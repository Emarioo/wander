
main.o:     file format pe-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#import "Logger"


#import "./core.btb"

fn main() {
       0:	ff f5                	push   %rbp
       2:	48 8b ec             	mov    %rsp,%rbp
       5:	ff f3                	push   %rbx
       7:	ff f7                	push   %rdi
       9:	ff f6                	push   %rsi
       b:	41 ff f4             	push   %r12
       e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 15 <main+0x15>
      15:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1c <main+0x1c>
      1c:	48 89 0a             	mov    %rcx,(%rdx)
      1f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 26 <main+0x26>
      26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <main+0x2d>
      2d:	48 89 0a             	mov    %rcx,(%rdx)
      30:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 37 <main+0x37>
      37:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3e <main+0x3e>
      3e:	48 89 0a             	mov    %rcx,(%rdx)
    StartGame()
      41:	e8 ca 73 00 00       	call   7410 <main+0x7410>
      46:	41 8f c4             	pop    %r12
      49:	8f c6                	pop    %rsi
      4b:	8f c7                	pop    %rdi
      4d:	8f c3                	pop    %rbx
      4f:	8f c5                	pop    %rbp
      51:	c3                   	ret
    #macro Assert(EXPR) #endmacro
#else
    #macro Assert(EXPR) CheckAssert(EXPR, #line, #file, #quoted EXPR)
#endif

fn CheckAssert(condition: bool, line: i32, file: char[], expr_string: char[]) {
      52:	ff f5                	push   %rbp
      54:	48 8b ec             	mov    %rsp,%rbp
      57:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    // TODO: NOT THREAD SAFE, we need a boolean per thread. thread local storage?
    global disable_asserts: bool;
    loc: i32;
      5e:	33 c9                	xor    %ecx,%ecx
      60:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    if condition
      63:	48 8a 4d 10          	rex.W mov 0x10(%rbp),%cl
      67:	48 0f b6 c9          	movzbq %cl,%rcx
      6b:	48 83 f9 00          	cmp    $0x0,%rcx
      6f:	0f 84 0a 00 00 00    	je     7f <main+0x7f>
        return;
      75:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
      7c:	8f c5                	pop    %rbp
      7e:	c3                   	ret
        
    if disable_asserts
      7f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 86 <main+0x86>
      86:	48 8a 11             	rex.W mov (%rcx),%dl
      89:	48 0f b6 d2          	movzbq %dl,%rdx
      8d:	48 83 fa 00          	cmp    $0x0,%rdx
      91:	0f 84 0a 00 00 00    	je     a1 <main+0xa1>
        return;
      97:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
      9e:	8f c5                	pop    %rbp
      a0:	c3                   	ret
        
    disable_asserts = true
      a1:	b9 01 00 00 00       	mov    $0x1,%ecx
      a6:	ff f1                	push   %rcx
      a8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # af <main+0xaf>
      af:	8f c2                	pop    %rdx
      b1:	88 11                	mov    %dl,(%rcx)
    defer disable_asserts = false
    
    // PrintStackTrace()
    
    prints("\n");
      b3:	b9 01 00 00 00       	mov    $0x1,%ecx
      b8:	ff f1                	push   %rcx
      ba:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # c1 <main+0xc1>
      c1:	8f c2                	pop    %rdx
      c3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
      ca:	48 8b f1             	mov    %rcx,%rsi
      cd:	48 8b fa             	mov    %rdx,%rdi
      d0:	48 83 ec 38          	sub    $0x38,%rsp
      d4:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
      d9:	ff 15 00 00 00 00    	call   *0x0(%rip)        # df <main+0xdf>
      df:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
      e6:	00 00 
      e8:	4d 31 c9             	xor    %r9,%r9
      eb:	49 89 f8             	mov    %rdi,%r8
      ee:	48 89 f2             	mov    %rsi,%rdx
      f1:	48 89 c1             	mov    %rax,%rcx
      f4:	ff 15 00 00 00 00    	call   *0x0(%rip)        # fa <main+0xfa>
      fa:	48 83 c4 38          	add    $0x38,%rsp
      fe:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    
    prints("[ASSERT] ")
     105:	b9 09 00 00 00       	mov    $0x9,%ecx
     10a:	ff f1                	push   %rcx
     10c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 113 <main+0x113>
     113:	8f c2                	pop    %rdx
     115:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     11c:	48 8b f1             	mov    %rcx,%rsi
     11f:	48 8b fa             	mov    %rdx,%rdi
     122:	48 83 ec 38          	sub    $0x38,%rsp
     126:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     12b:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 131 <main+0x131>
     131:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     138:	00 00 
     13a:	4d 31 c9             	xor    %r9,%r9
     13d:	49 89 f8             	mov    %rdi,%r8
     140:	48 89 f2             	mov    %rsi,%rdx
     143:	48 89 c1             	mov    %rax,%rcx
     146:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 14c <main+0x14c>
     14c:	48 83 c4 38          	add    $0x38,%rsp
     150:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    prints(expr_string)
     157:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
     15b:	48 8b c9             	mov    %rcx,%rcx
     15e:	ff f1                	push   %rcx
     160:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
     164:	8f c2                	pop    %rdx
     166:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     16d:	48 8b f1             	mov    %rcx,%rsi
     170:	48 8b fa             	mov    %rdx,%rdi
     173:	48 83 ec 38          	sub    $0x38,%rsp
     177:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     17c:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 182 <main+0x182>
     182:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     189:	00 00 
     18b:	4d 31 c9             	xor    %r9,%r9
     18e:	49 89 f8             	mov    %rdi,%r8
     191:	48 89 f2             	mov    %rsi,%rdx
     194:	48 89 c1             	mov    %rax,%rcx
     197:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 19d <main+0x19d>
     19d:	48 83 c4 38          	add    $0x38,%rsp
     1a1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    prints(" - ")
     1a8:	b9 03 00 00 00       	mov    $0x3,%ecx
     1ad:	ff f1                	push   %rcx
     1af:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1b6 <main+0x1b6>
     1b6:	8f c2                	pop    %rdx
     1b8:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     1bf:	48 8b f1             	mov    %rcx,%rsi
     1c2:	48 8b fa             	mov    %rdx,%rdi
     1c5:	48 83 ec 38          	sub    $0x38,%rsp
     1c9:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     1ce:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 1d4 <main+0x1d4>
     1d4:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     1db:	00 00 
     1dd:	4d 31 c9             	xor    %r9,%r9
     1e0:	49 89 f8             	mov    %rdi,%r8
     1e3:	48 89 f2             	mov    %rsi,%rdx
     1e6:	48 89 c1             	mov    %rax,%rcx
     1e9:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 1ef <main+0x1ef>
     1ef:	48 83 c4 38          	add    $0x38,%rsp
     1f3:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    prints(file)
     1fa:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
     1fe:	48 8b c9             	mov    %rcx,%rcx
     201:	ff f1                	push   %rcx
     203:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
     207:	8f c2                	pop    %rdx
     209:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     210:	48 8b f1             	mov    %rcx,%rsi
     213:	48 8b fa             	mov    %rdx,%rdi
     216:	48 83 ec 38          	sub    $0x38,%rsp
     21a:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     21f:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 225 <main+0x225>
     225:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     22c:	00 00 
     22e:	4d 31 c9             	xor    %r9,%r9
     231:	49 89 f8             	mov    %rdi,%r8
     234:	48 89 f2             	mov    %rsi,%rdx
     237:	48 89 c1             	mov    %rax,%rcx
     23a:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 240 <main+0x240>
     240:	48 83 c4 38          	add    $0x38,%rsp
     244:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    prints(":")
     24b:	b9 01 00 00 00       	mov    $0x1,%ecx
     250:	ff f1                	push   %rcx
     252:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 259 <main+0x259>
     259:	8f c2                	pop    %rdx
     25b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     262:	48 8b f1             	mov    %rcx,%rsi
     265:	48 8b fa             	mov    %rdx,%rdi
     268:	48 83 ec 38          	sub    $0x38,%rsp
     26c:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     271:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 277 <main+0x277>
     277:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     27e:	00 00 
     280:	4d 31 c9             	xor    %r9,%r9
     283:	49 89 f8             	mov    %rdi,%r8
     286:	48 89 f2             	mov    %rsi,%rdx
     289:	48 89 c1             	mov    %rax,%rcx
     28c:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 292 <main+0x292>
     292:	48 83 c4 38          	add    $0x38,%rsp
     296:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    // std_print(line)
    prints("\n");
     29d:	b9 01 00 00 00       	mov    $0x1,%ecx
     2a2:	ff f1                	push   %rcx
     2a4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 2ab <main+0x2ab>
     2ab:	8f c2                	pop    %rdx
     2ad:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     2b4:	48 8b f1             	mov    %rcx,%rsi
     2b7:	48 8b fa             	mov    %rdx,%rdi
     2ba:	48 83 ec 38          	sub    $0x38,%rsp
     2be:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
     2c3:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 2c9 <main+0x2c9>
     2c9:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
     2d0:	00 00 
     2d2:	4d 31 c9             	xor    %r9,%r9
     2d5:	49 89 f8             	mov    %rdi,%r8
     2d8:	48 89 f2             	mov    %rsi,%rdx
     2db:	48 89 c1             	mov    %rax,%rcx
     2de:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 2e4 <main+0x2e4>
     2e4:	48 83 c4 38          	add    $0x38,%rsp
     2e8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    
    *(cast<i32*>null) = 0
     2ef:	b9 00 00 00 00       	mov    $0x0,%ecx
     2f4:	ff f1                	push   %rcx
     2f6:	b9 00 00 00 00       	mov    $0x0,%ecx
     2fb:	8f c2                	pop    %rdx
     2fd:	89 11                	mov    %edx,(%rcx)
    defer disable_asserts = false
     2ff:	b9 00 00 00 00       	mov    $0x0,%ecx
     304:	ff f1                	push   %rcx
     306:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 30d <main+0x30d>
     30d:	8f c2                	pop    %rdx
     30f:	88 11                	mov    %dl,(%rcx)
     311:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
     318:	8f c5                	pop    %rbp
     31a:	c3                   	ret
        construct(&ptr[len])
        ptr_elem := ptr + len * sizeof T;
        len++;
        return ptr_elem;
    }
    fn add(newElement: T) -> T* {
     31b:	ff f5                	push   %rbp
     31d:	48 8b ec             	mov    %rsp,%rbp
     320:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if len + 1 > max {
     327:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     32b:	48 8b c9             	mov    %rcx,%rcx
     32e:	8b 51 0c             	mov    0xc(%rcx),%edx
     331:	ff f2                	push   %rdx
     333:	b9 01 00 00 00       	mov    $0x1,%ecx
     338:	8f c2                	pop    %rdx
     33a:	03 d1                	add    %ecx,%edx
     33c:	ff f2                	push   %rdx
     33e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     342:	48 8b c9             	mov    %rcx,%rcx
     345:	8b 51 08             	mov    0x8(%rcx),%edx
     348:	8f c1                	pop    %rcx
     34a:	3b ca                	cmp    %edx,%ecx
     34c:	40 0f 9f c1          	rex setg %cl
     350:	48 0f b6 c9          	movzbq %cl,%rcx
     354:	48 83 f9 00          	cmp    $0x0,%rcx
     358:	0f 84 83 00 00 00    	je     3e1 <main+0x3e1>
            res := reserve(7 + max * 2);
     35e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
     365:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     369:	48 8b c9             	mov    %rcx,%rcx
     36c:	ff f1                	push   %rcx
     36e:	b9 07 00 00 00       	mov    $0x7,%ecx
     373:	ff f1                	push   %rcx
     375:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     379:	48 8b c9             	mov    %rcx,%rcx
     37c:	8b 51 08             	mov    0x8(%rcx),%edx
     37f:	ff f2                	push   %rdx
     381:	b9 02 00 00 00       	mov    $0x2,%ecx
     386:	8f c2                	pop    %rdx
     388:	0f af d1             	imul   %ecx,%edx
     38b:	8f c1                	pop    %rcx
     38d:	03 ca                	add    %edx,%ecx
     38f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
     393:	8f c1                	pop    %rcx
     395:	48 89 0c 24          	mov    %rcx,(%rsp)
     399:	e8 1f 09 00 00       	call   cbd <main+0xcbd>
     39e:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     3a5:	48 8a 4c 24 d0       	rex.W mov -0x30(%rsp),%cl
     3aa:	48 0f b6 c9          	movzbq %cl,%rcx
     3ae:	88 4d f0             	mov    %cl,-0x10(%rbp)
            // res := reserve(1 + max); // small growth when debugging
            if !res {
     3b1:	48 8a 4d f0          	rex.W mov -0x10(%rbp),%cl
     3b5:	48 0f b6 c9          	movzbq %cl,%rcx
     3b9:	48 85 c9             	test   %rcx,%rcx
     3bc:	40 0f 94 c1          	rex sete %cl
     3c0:	48 0f b6 c9          	movzbq %cl,%rcx
     3c4:	48 83 f9 00          	cmp    $0x0,%rcx
     3c8:	0f 84 13 00 00 00    	je     3e1 <main+0x3e1>
                return null;
     3ce:	b9 00 00 00 00       	mov    $0x0,%ecx
     3d3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     3d7:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     3de:	8f c5                	pop    %rbp
     3e0:	c3                   	ret
            }
        }
        ptr[len] = newElement;
     3e1:	8b 4d 28             	mov    0x28(%rbp),%ecx
     3e4:	48 63 c9             	movslq %ecx,%rcx
     3e7:	ff f1                	push   %rcx
     3e9:	48 8a 4d 24          	rex.W mov 0x24(%rbp),%cl
     3ed:	48 0f b6 c9          	movzbq %cl,%rcx
     3f1:	ff f1                	push   %rcx
     3f3:	8b 4d 20             	mov    0x20(%rbp),%ecx
     3f6:	48 63 c9             	movslq %ecx,%rcx
     3f9:	ff f1                	push   %rcx
     3fb:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
     3ff:	ff f1                	push   %rcx
     401:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     405:	48 8b c9             	mov    %rcx,%rcx
     408:	ba 00 00 00 00       	mov    $0x0,%edx
     40d:	48 03 ca             	add    %rdx,%rcx
     410:	ff f1                	push   %rcx
     412:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     416:	48 8b c9             	mov    %rcx,%rcx
     419:	8b 51 0c             	mov    0xc(%rcx),%edx
     41c:	8f c1                	pop    %rcx
     41e:	48 8b 19             	mov    (%rcx),%rbx
     421:	b9 18 00 00 00       	mov    $0x18,%ecx
     426:	48 8b c2             	mov    %rdx,%rax
     429:	48 f7 e1             	mul    %rcx
     42c:	48 8b d0             	mov    %rax,%rdx
     42f:	48 03 da             	add    %rdx,%rbx
     432:	8f c1                	pop    %rcx
     434:	48 89 0b             	mov    %rcx,(%rbx)
     437:	8f c1                	pop    %rcx
     439:	89 4b 08             	mov    %ecx,0x8(%rbx)
     43c:	8f c1                	pop    %rcx
     43e:	88 4b 0c             	mov    %cl,0xc(%rbx)
     441:	8f c1                	pop    %rcx
     443:	89 4b 10             	mov    %ecx,0x10(%rbx)
        ptr_elem := ptr + len * sizeof T;
     446:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     44a:	48 8b c9             	mov    %rcx,%rcx
     44d:	48 8b 11             	mov    (%rcx),%rdx
     450:	ff f2                	push   %rdx
     452:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     456:	48 8b c9             	mov    %rcx,%rcx
     459:	8b 51 0c             	mov    0xc(%rcx),%edx
     45c:	ff f2                	push   %rdx
     45e:	b9 18 00 00 00       	mov    $0x18,%ecx
     463:	8f c2                	pop    %rdx
     465:	0f af d1             	imul   %ecx,%edx
     468:	8f c1                	pop    %rcx
     46a:	48 03 ca             	add    %rdx,%rcx
     46d:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        len++;
     471:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     475:	48 8b c9             	mov    %rcx,%rcx
     478:	ba 0c 00 00 00       	mov    $0xc,%edx
     47d:	48 03 ca             	add    %rdx,%rcx
     480:	8b 11                	mov    (%rcx),%edx
     482:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
     489:	89 11                	mov    %edx,(%rcx)
        return ptr_elem;
     48b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
     48f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     493:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     49a:	8f c5                	pop    %rbp
     49c:	c3                   	ret
    fn add(newElement: T) -> T* {
     49d:	ff f5                	push   %rbp
     49f:	48 8b ec             	mov    %rsp,%rbp
     4a2:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if len + 1 > max {
     4a9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     4ad:	48 8b c9             	mov    %rcx,%rcx
     4b0:	8b 51 0c             	mov    0xc(%rcx),%edx
     4b3:	ff f2                	push   %rdx
     4b5:	b9 01 00 00 00       	mov    $0x1,%ecx
     4ba:	8f c2                	pop    %rdx
     4bc:	03 d1                	add    %ecx,%edx
     4be:	ff f2                	push   %rdx
     4c0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     4c4:	48 8b c9             	mov    %rcx,%rcx
     4c7:	8b 51 08             	mov    0x8(%rcx),%edx
     4ca:	8f c1                	pop    %rcx
     4cc:	3b ca                	cmp    %edx,%ecx
     4ce:	40 0f 9f c1          	rex setg %cl
     4d2:	48 0f b6 c9          	movzbq %cl,%rcx
     4d6:	48 83 f9 00          	cmp    $0x0,%rcx
     4da:	0f 84 83 00 00 00    	je     563 <main+0x563>
            res := reserve(7 + max * 2);
     4e0:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
     4e7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     4eb:	48 8b c9             	mov    %rcx,%rcx
     4ee:	ff f1                	push   %rcx
     4f0:	b9 07 00 00 00       	mov    $0x7,%ecx
     4f5:	ff f1                	push   %rcx
     4f7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     4fb:	48 8b c9             	mov    %rcx,%rcx
     4fe:	8b 51 08             	mov    0x8(%rcx),%edx
     501:	ff f2                	push   %rdx
     503:	b9 02 00 00 00       	mov    $0x2,%ecx
     508:	8f c2                	pop    %rdx
     50a:	0f af d1             	imul   %ecx,%edx
     50d:	8f c1                	pop    %rcx
     50f:	03 ca                	add    %edx,%ecx
     511:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
     515:	8f c1                	pop    %rcx
     517:	48 89 0c 24          	mov    %rcx,(%rsp)
     51b:	e8 65 13 00 00       	call   1885 <main+0x1885>
     520:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     527:	48 8a 4c 24 d0       	rex.W mov -0x30(%rsp),%cl
     52c:	48 0f b6 c9          	movzbq %cl,%rcx
     530:	88 4d f0             	mov    %cl,-0x10(%rbp)
            if !res {
     533:	48 8a 4d f0          	rex.W mov -0x10(%rbp),%cl
     537:	48 0f b6 c9          	movzbq %cl,%rcx
     53b:	48 85 c9             	test   %rcx,%rcx
     53e:	40 0f 94 c1          	rex sete %cl
     542:	48 0f b6 c9          	movzbq %cl,%rcx
     546:	48 83 f9 00          	cmp    $0x0,%rcx
     54a:	0f 84 13 00 00 00    	je     563 <main+0x563>
                return null;
     550:	b9 00 00 00 00       	mov    $0x0,%ecx
     555:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     559:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     560:	8f c5                	pop    %rbp
     562:	c3                   	ret
        ptr[len] = newElement;
     563:	8b 4d 50             	mov    0x50(%rbp),%ecx
     566:	48 63 c9             	movslq %ecx,%rcx
     569:	ff f1                	push   %rcx
     56b:	8b 4d 4c             	mov    0x4c(%rbp),%ecx
     56e:	48 63 c9             	movslq %ecx,%rcx
     571:	ff f1                	push   %rcx
     573:	8b 4d 48             	mov    0x48(%rbp),%ecx
     576:	48 63 c9             	movslq %ecx,%rcx
     579:	ff f1                	push   %rcx
     57b:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
     57f:	ff f1                	push   %rcx
     581:	8b 4d 3c             	mov    0x3c(%rbp),%ecx
     584:	48 63 c9             	movslq %ecx,%rcx
     587:	ff f1                	push   %rcx
     589:	8b 4d 38             	mov    0x38(%rbp),%ecx
     58c:	48 63 c9             	movslq %ecx,%rcx
     58f:	ff f1                	push   %rcx
     591:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
     595:	ff f1                	push   %rcx
     597:	8b 4d 2c             	mov    0x2c(%rbp),%ecx
     59a:	48 63 c9             	movslq %ecx,%rcx
     59d:	ff f1                	push   %rcx
     59f:	48 8a 4d 2b          	rex.W mov 0x2b(%rbp),%cl
     5a3:	48 0f b6 c9          	movzbq %cl,%rcx
     5a7:	ff f1                	push   %rcx
     5a9:	48 8a 4d 2a          	rex.W mov 0x2a(%rbp),%cl
     5ad:	48 0f b6 c9          	movzbq %cl,%rcx
     5b1:	ff f1                	push   %rcx
     5b3:	66 8b 4d 28          	mov    0x28(%rbp),%cx
     5b7:	48 0f b7 c9          	movzwq %cx,%rcx
     5bb:	ff f1                	push   %rcx
     5bd:	48 8a 4d 20          	rex.W mov 0x20(%rbp),%cl
     5c1:	48 0f b6 c9          	movzbq %cl,%rcx
     5c5:	ff f1                	push   %rcx
     5c7:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
     5ca:	48 63 c9             	movslq %ecx,%rcx
     5cd:	ff f1                	push   %rcx
     5cf:	8b 4d 18             	mov    0x18(%rbp),%ecx
     5d2:	8b c9                	mov    %ecx,%ecx
     5d4:	ff f1                	push   %rcx
     5d6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     5da:	48 8b c9             	mov    %rcx,%rcx
     5dd:	ba 00 00 00 00       	mov    $0x0,%edx
     5e2:	48 03 ca             	add    %rdx,%rcx
     5e5:	ff f1                	push   %rcx
     5e7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     5eb:	48 8b c9             	mov    %rcx,%rcx
     5ee:	8b 51 0c             	mov    0xc(%rcx),%edx
     5f1:	8f c1                	pop    %rcx
     5f3:	48 8b 19             	mov    (%rcx),%rbx
     5f6:	b9 40 00 00 00       	mov    $0x40,%ecx
     5fb:	48 8b c2             	mov    %rdx,%rax
     5fe:	48 f7 e1             	mul    %rcx
     601:	48 8b d0             	mov    %rax,%rdx
     604:	48 03 da             	add    %rdx,%rbx
     607:	8f c1                	pop    %rcx
     609:	89 0b                	mov    %ecx,(%rbx)
     60b:	8f c1                	pop    %rcx
     60d:	89 4b 04             	mov    %ecx,0x4(%rbx)
     610:	8f c1                	pop    %rcx
     612:	88 4b 08             	mov    %cl,0x8(%rbx)
     615:	8f c1                	pop    %rcx
     617:	66 89 4b 10          	mov    %cx,0x10(%rbx)
     61b:	8f c1                	pop    %rcx
     61d:	88 4b 12             	mov    %cl,0x12(%rbx)
     620:	8f c1                	pop    %rcx
     622:	88 4b 13             	mov    %cl,0x13(%rbx)
     625:	8f c1                	pop    %rcx
     627:	89 4b 14             	mov    %ecx,0x14(%rbx)
     62a:	8f c1                	pop    %rcx
     62c:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
     630:	8f c1                	pop    %rcx
     632:	89 4b 20             	mov    %ecx,0x20(%rbx)
     635:	8f c1                	pop    %rcx
     637:	89 4b 24             	mov    %ecx,0x24(%rbx)
     63a:	8f c1                	pop    %rcx
     63c:	48 89 4b 28          	mov    %rcx,0x28(%rbx)
     640:	8f c1                	pop    %rcx
     642:	89 4b 30             	mov    %ecx,0x30(%rbx)
     645:	8f c1                	pop    %rcx
     647:	89 4b 34             	mov    %ecx,0x34(%rbx)
     64a:	8f c1                	pop    %rcx
     64c:	89 4b 38             	mov    %ecx,0x38(%rbx)
        ptr_elem := ptr + len * sizeof T;
     64f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     653:	48 8b c9             	mov    %rcx,%rcx
     656:	48 8b 11             	mov    (%rcx),%rdx
     659:	ff f2                	push   %rdx
     65b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     65f:	48 8b c9             	mov    %rcx,%rcx
     662:	8b 51 0c             	mov    0xc(%rcx),%edx
     665:	ff f2                	push   %rdx
     667:	b9 40 00 00 00       	mov    $0x40,%ecx
     66c:	8f c2                	pop    %rdx
     66e:	0f af d1             	imul   %ecx,%edx
     671:	8f c1                	pop    %rcx
     673:	48 03 ca             	add    %rdx,%rcx
     676:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        len++;
     67a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     67e:	48 8b c9             	mov    %rcx,%rcx
     681:	ba 0c 00 00 00       	mov    $0xc,%edx
     686:	48 03 ca             	add    %rdx,%rcx
     689:	8b 11                	mov    (%rcx),%edx
     68b:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
     692:	89 11                	mov    %edx,(%rcx)
        return ptr_elem;
     694:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
     698:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     69c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     6a3:	8f c5                	pop    %rbp
     6a5:	c3                   	ret
    fn add(newElement: T) -> T* {
     6a6:	ff f5                	push   %rbp
     6a8:	48 8b ec             	mov    %rsp,%rbp
     6ab:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if len + 1 > max {
     6b2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     6b6:	48 8b c9             	mov    %rcx,%rcx
     6b9:	8b 51 0c             	mov    0xc(%rcx),%edx
     6bc:	ff f2                	push   %rdx
     6be:	b9 01 00 00 00       	mov    $0x1,%ecx
     6c3:	8f c2                	pop    %rdx
     6c5:	03 d1                	add    %ecx,%edx
     6c7:	ff f2                	push   %rdx
     6c9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     6cd:	48 8b c9             	mov    %rcx,%rcx
     6d0:	8b 51 08             	mov    0x8(%rcx),%edx
     6d3:	8f c1                	pop    %rcx
     6d5:	3b ca                	cmp    %edx,%ecx
     6d7:	40 0f 9f c1          	rex setg %cl
     6db:	48 0f b6 c9          	movzbq %cl,%rcx
     6df:	48 83 f9 00          	cmp    $0x0,%rcx
     6e3:	0f 84 83 00 00 00    	je     76c <main+0x76c>
            res := reserve(7 + max * 2);
     6e9:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
     6f0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     6f4:	48 8b c9             	mov    %rcx,%rcx
     6f7:	ff f1                	push   %rcx
     6f9:	b9 07 00 00 00       	mov    $0x7,%ecx
     6fe:	ff f1                	push   %rcx
     700:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     704:	48 8b c9             	mov    %rcx,%rcx
     707:	8b 51 08             	mov    0x8(%rcx),%edx
     70a:	ff f2                	push   %rdx
     70c:	b9 02 00 00 00       	mov    $0x2,%ecx
     711:	8f c2                	pop    %rdx
     713:	0f af d1             	imul   %ecx,%edx
     716:	8f c1                	pop    %rcx
     718:	03 ca                	add    %edx,%ecx
     71a:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
     71e:	8f c1                	pop    %rcx
     720:	48 89 0c 24          	mov    %rcx,(%rsp)
     724:	e8 53 17 00 00       	call   1e7c <main+0x1e7c>
     729:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     730:	48 8a 4c 24 d0       	rex.W mov -0x30(%rsp),%cl
     735:	48 0f b6 c9          	movzbq %cl,%rcx
     739:	88 4d f0             	mov    %cl,-0x10(%rbp)
            if !res {
     73c:	48 8a 4d f0          	rex.W mov -0x10(%rbp),%cl
     740:	48 0f b6 c9          	movzbq %cl,%rcx
     744:	48 85 c9             	test   %rcx,%rcx
     747:	40 0f 94 c1          	rex sete %cl
     74b:	48 0f b6 c9          	movzbq %cl,%rcx
     74f:	48 83 f9 00          	cmp    $0x0,%rcx
     753:	0f 84 13 00 00 00    	je     76c <main+0x76c>
                return null;
     759:	b9 00 00 00 00       	mov    $0x0,%ecx
     75e:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     762:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     769:	8f c5                	pop    %rbp
     76b:	c3                   	ret
        ptr[len] = newElement;
     76c:	48 8a 4d 20          	rex.W mov 0x20(%rbp),%cl
     770:	48 0f be c9          	movsbq %cl,%rcx
     774:	ff f1                	push   %rcx
     776:	48 8a 4d 1f          	rex.W mov 0x1f(%rbp),%cl
     77a:	48 0f be c9          	movsbq %cl,%rcx
     77e:	ff f1                	push   %rcx
     780:	48 8a 4d 1e          	rex.W mov 0x1e(%rbp),%cl
     784:	48 0f be c9          	movsbq %cl,%rcx
     788:	ff f1                	push   %rcx
     78a:	48 8a 4d 1d          	rex.W mov 0x1d(%rbp),%cl
     78e:	48 0f be c9          	movsbq %cl,%rcx
     792:	ff f1                	push   %rcx
     794:	48 8a 4d 1c          	rex.W mov 0x1c(%rbp),%cl
     798:	48 0f b6 c9          	movzbq %cl,%rcx
     79c:	ff f1                	push   %rcx
     79e:	8b 4d 18             	mov    0x18(%rbp),%ecx
     7a1:	48 63 c9             	movslq %ecx,%rcx
     7a4:	ff f1                	push   %rcx
     7a6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     7aa:	48 8b c9             	mov    %rcx,%rcx
     7ad:	ba 00 00 00 00       	mov    $0x0,%edx
     7b2:	48 03 ca             	add    %rdx,%rcx
     7b5:	ff f1                	push   %rcx
     7b7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     7bb:	48 8b c9             	mov    %rcx,%rcx
     7be:	8b 51 0c             	mov    0xc(%rcx),%edx
     7c1:	8f c1                	pop    %rcx
     7c3:	48 8b 19             	mov    (%rcx),%rbx
     7c6:	b9 0c 00 00 00       	mov    $0xc,%ecx
     7cb:	48 8b c2             	mov    %rdx,%rax
     7ce:	48 f7 e1             	mul    %rcx
     7d1:	48 8b d0             	mov    %rax,%rdx
     7d4:	48 03 da             	add    %rdx,%rbx
     7d7:	8f c1                	pop    %rcx
     7d9:	89 0b                	mov    %ecx,(%rbx)
     7db:	8f c1                	pop    %rcx
     7dd:	88 4b 04             	mov    %cl,0x4(%rbx)
     7e0:	8f c1                	pop    %rcx
     7e2:	88 4b 05             	mov    %cl,0x5(%rbx)
     7e5:	8f c1                	pop    %rcx
     7e7:	88 4b 06             	mov    %cl,0x6(%rbx)
     7ea:	8f c1                	pop    %rcx
     7ec:	88 4b 07             	mov    %cl,0x7(%rbx)
     7ef:	8f c1                	pop    %rcx
     7f1:	88 4b 08             	mov    %cl,0x8(%rbx)
        ptr_elem := ptr + len * sizeof T;
     7f4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     7f8:	48 8b c9             	mov    %rcx,%rcx
     7fb:	48 8b 11             	mov    (%rcx),%rdx
     7fe:	ff f2                	push   %rdx
     800:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     804:	48 8b c9             	mov    %rcx,%rcx
     807:	8b 51 0c             	mov    0xc(%rcx),%edx
     80a:	ff f2                	push   %rdx
     80c:	b9 0c 00 00 00       	mov    $0xc,%ecx
     811:	8f c2                	pop    %rdx
     813:	0f af d1             	imul   %ecx,%edx
     816:	8f c1                	pop    %rcx
     818:	48 03 ca             	add    %rdx,%rcx
     81b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        len++;
     81f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     823:	48 8b c9             	mov    %rcx,%rcx
     826:	ba 0c 00 00 00       	mov    $0xc,%edx
     82b:	48 03 ca             	add    %rdx,%rcx
     82e:	8b 11                	mov    (%rcx),%edx
     830:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
     837:	89 11                	mov    %edx,(%rcx)
        return ptr_elem;
     839:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
     83d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     841:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     848:	8f c5                	pop    %rbp
     84a:	c3                   	ret
            destruct(&ptr[nr])
        }
        len = 0
    }
    fn data() -> T* { return ptr }
    fn size() -> i32 { return len; }
     84b:	ff f5                	push   %rbp
     84d:	48 8b ec             	mov    %rsp,%rbp
     850:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
     857:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     85b:	48 8b c9             	mov    %rcx,%rcx
     85e:	8b 51 0c             	mov    0xc(%rcx),%edx
     861:	89 55 f8             	mov    %edx,-0x8(%rbp)
     864:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     86b:	8f c5                	pop    %rbp
     86d:	c3                   	ret
     86e:	ff f5                	push   %rbp
     870:	48 8b ec             	mov    %rsp,%rbp
     873:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
     87a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     87e:	48 8b c9             	mov    %rcx,%rcx
     881:	8b 51 0c             	mov    0xc(%rcx),%edx
     884:	89 55 f8             	mov    %edx,-0x8(%rbp)
     887:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     88e:	8f c5                	pop    %rbp
     890:	c3                   	ret
     891:	ff f5                	push   %rbp
     893:	48 8b ec             	mov    %rsp,%rbp
     896:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
     89d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     8a1:	48 8b c9             	mov    %rcx,%rcx
     8a4:	8b 51 0c             	mov    0xc(%rcx),%edx
     8a7:	89 55 f8             	mov    %edx,-0x8(%rbp)
     8aa:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     8b1:	8f c5                	pop    %rbp
     8b3:	c3                   	ret
     8b4:	ff f5                	push   %rbp
     8b6:	48 8b ec             	mov    %rsp,%rbp
     8b9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
     8c0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     8c4:	48 8b c9             	mov    %rcx,%rcx
     8c7:	8b 51 0c             	mov    0xc(%rcx),%edx
     8ca:	89 55 f8             	mov    %edx,-0x8(%rbp)
     8cd:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     8d4:	8f c5                	pop    %rbp
     8d6:	c3                   	ret
    fn sliced_unsafe() -> Slice<T> {
     8d7:	ff f5                	push   %rbp
     8d9:	48 8b ec             	mov    %rsp,%rbp
     8dc:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
        return Slice<T>{ptr, len};
     8e3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     8e7:	48 8b c9             	mov    %rcx,%rcx
     8ea:	8b 51 0c             	mov    0xc(%rcx),%edx
     8ed:	48 63 ca             	movslq %edx,%rcx
     8f0:	ff f1                	push   %rcx
     8f2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     8f6:	48 8b c9             	mov    %rcx,%rcx
     8f9:	48 8b 11             	mov    (%rcx),%rdx
     8fc:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
     900:	8f c1                	pop    %rcx
     902:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     906:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
     90d:	8f c5                	pop    %rbp
     90f:	c3                   	ret
    }
    fn sliced() -> Slice<T> {
     910:	ff f5                	push   %rbp
     912:	48 8b ec             	mov    %rsp,%rbp
     915:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
        return Slice<T>{ptr, len};
     91c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     920:	48 8b c9             	mov    %rcx,%rcx
     923:	8b 51 0c             	mov    0xc(%rcx),%edx
     926:	48 63 ca             	movslq %edx,%rcx
     929:	ff f1                	push   %rcx
     92b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     92f:	48 8b c9             	mov    %rcx,%rcx
     932:	48 8b 11             	mov    (%rcx),%rdx
     935:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
     939:	8f c1                	pop    %rcx
     93b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     93f:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
     946:	8f c5                	pop    %rbp
     948:	c3                   	ret
        for index..len-1 {
            ptr[nr] = ptr[nr+1];
        }
        len--;
    }
    fn get(index: i32) -> T {
     949:	ff f5                	push   %rbp
     94b:	48 8b ec             	mov    %rsp,%rbp
     94e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        if(index >= len)
     955:	8b 4d 18             	mov    0x18(%rbp),%ecx
     958:	48 63 c9             	movslq %ecx,%rcx
     95b:	ff f1                	push   %rcx
     95d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     961:	48 8b c9             	mov    %rcx,%rcx
     964:	8b 51 0c             	mov    0xc(%rcx),%edx
     967:	8f c1                	pop    %rcx
     969:	3b ca                	cmp    %edx,%ecx
     96b:	40 0f 9d c1          	rex setge %cl
     96f:	48 0f b6 c9          	movzbq %cl,%rcx
     973:	48 83 f9 00          	cmp    $0x0,%rcx
     977:	0f 84 10 00 00 00    	je     98d <main+0x98d>
            return T{}; // TODO: Assert instead
     97d:	48 33 c9             	xor    %rcx,%rcx
     980:	89 4d f8             	mov    %ecx,-0x8(%rbp)
     983:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     98a:	8f c5                	pop    %rbp
     98c:	c3                   	ret
        return ptr[index];
     98d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     991:	48 8b c9             	mov    %rcx,%rcx
     994:	48 8b 11             	mov    (%rcx),%rdx
     997:	ff f2                	push   %rdx
     999:	8b 4d 18             	mov    0x18(%rbp),%ecx
     99c:	48 63 c9             	movslq %ecx,%rcx
     99f:	8f c2                	pop    %rdx
     9a1:	bb 04 00 00 00       	mov    $0x4,%ebx
     9a6:	ff f2                	push   %rdx
     9a8:	48 8b c1             	mov    %rcx,%rax
     9ab:	f7 e3                	mul    %ebx
     9ad:	48 8b c8             	mov    %rax,%rcx
     9b0:	8f c2                	pop    %rdx
     9b2:	48 03 d1             	add    %rcx,%rdx
     9b5:	8b 0a                	mov    (%rdx),%ecx
     9b7:	89 4d f8             	mov    %ecx,-0x8(%rbp)
     9ba:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     9c1:	8f c5                	pop    %rbp
     9c3:	c3                   	ret
    fn last() -> T* {
        if(len == 0)
            return null; // TODO: Assert instead
        return &ptr[len - 1];
    }
    fn get_unsafe(index: i32) -> T* {
     9c4:	ff f5                	push   %rbp
     9c6:	48 8b ec             	mov    %rsp,%rbp
     9c9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        if(index >= len)
     9d0:	8b 4d 18             	mov    0x18(%rbp),%ecx
     9d3:	48 63 c9             	movslq %ecx,%rcx
     9d6:	ff f1                	push   %rcx
     9d8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     9dc:	48 8b c9             	mov    %rcx,%rcx
     9df:	8b 51 0c             	mov    0xc(%rcx),%edx
     9e2:	8f c1                	pop    %rcx
     9e4:	3b ca                	cmp    %edx,%ecx
     9e6:	40 0f 9d c1          	rex setge %cl
     9ea:	48 0f b6 c9          	movzbq %cl,%rcx
     9ee:	48 83 f9 00          	cmp    $0x0,%rcx
     9f2:	0f 84 13 00 00 00    	je     a0b <main+0xa0b>
            return null;
     9f8:	b9 00 00 00 00       	mov    $0x0,%ecx
     9fd:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     a01:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     a08:	8f c5                	pop    %rbp
     a0a:	c3                   	ret
        return &ptr[index];
     a0b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     a0f:	48 8b c9             	mov    %rcx,%rcx
     a12:	ba 00 00 00 00       	mov    $0x0,%edx
     a17:	48 03 ca             	add    %rdx,%rcx
     a1a:	ff f1                	push   %rcx
     a1c:	8b 4d 18             	mov    0x18(%rbp),%ecx
     a1f:	48 63 c9             	movslq %ecx,%rcx
     a22:	8f c2                	pop    %rdx
     a24:	48 8b 1a             	mov    (%rdx),%rbx
     a27:	ba 18 00 00 00       	mov    $0x18,%edx
     a2c:	48 8b fa             	mov    %rdx,%rdi
     a2f:	48 8b c1             	mov    %rcx,%rax
     a32:	48 f7 e7             	mul    %rdi
     a35:	48 8b c8             	mov    %rax,%rcx
     a38:	48 8b d7             	mov    %rdi,%rdx
     a3b:	48 03 d9             	add    %rcx,%rbx
     a3e:	48 89 5d f8          	mov    %rbx,-0x8(%rbp)
     a42:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     a49:	8f c5                	pop    %rbp
     a4b:	c3                   	ret
    fn get_unsafe(index: i32) -> T* {
     a4c:	ff f5                	push   %rbp
     a4e:	48 8b ec             	mov    %rsp,%rbp
     a51:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        if(index >= len)
     a58:	8b 4d 18             	mov    0x18(%rbp),%ecx
     a5b:	48 63 c9             	movslq %ecx,%rcx
     a5e:	ff f1                	push   %rcx
     a60:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     a64:	48 8b c9             	mov    %rcx,%rcx
     a67:	8b 51 0c             	mov    0xc(%rcx),%edx
     a6a:	8f c1                	pop    %rcx
     a6c:	3b ca                	cmp    %edx,%ecx
     a6e:	40 0f 9d c1          	rex setge %cl
     a72:	48 0f b6 c9          	movzbq %cl,%rcx
     a76:	48 83 f9 00          	cmp    $0x0,%rcx
     a7a:	0f 84 13 00 00 00    	je     a93 <main+0xa93>
            return null;
     a80:	b9 00 00 00 00       	mov    $0x0,%ecx
     a85:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     a89:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     a90:	8f c5                	pop    %rbp
     a92:	c3                   	ret
        return &ptr[index];
     a93:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     a97:	48 8b c9             	mov    %rcx,%rcx
     a9a:	ba 00 00 00 00       	mov    $0x0,%edx
     a9f:	48 03 ca             	add    %rdx,%rcx
     aa2:	ff f1                	push   %rcx
     aa4:	8b 4d 18             	mov    0x18(%rbp),%ecx
     aa7:	48 63 c9             	movslq %ecx,%rcx
     aaa:	8f c2                	pop    %rdx
     aac:	48 8b 1a             	mov    (%rdx),%rbx
     aaf:	ba 40 00 00 00       	mov    $0x40,%edx
     ab4:	48 8b fa             	mov    %rdx,%rdi
     ab7:	48 8b c1             	mov    %rcx,%rax
     aba:	48 f7 e7             	mul    %rdi
     abd:	48 8b c8             	mov    %rax,%rcx
     ac0:	48 8b d7             	mov    %rdi,%rdx
     ac3:	48 03 d9             	add    %rcx,%rbx
     ac6:	48 89 5d f8          	mov    %rbx,-0x8(%rbp)
     aca:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     ad1:	8f c5                	pop    %rbp
     ad3:	c3                   	ret
    fn get_unsafe(index: i32) -> T* {
     ad4:	ff f5                	push   %rbp
     ad6:	48 8b ec             	mov    %rsp,%rbp
     ad9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        if(index >= len)
     ae0:	8b 4d 18             	mov    0x18(%rbp),%ecx
     ae3:	48 63 c9             	movslq %ecx,%rcx
     ae6:	ff f1                	push   %rcx
     ae8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     aec:	48 8b c9             	mov    %rcx,%rcx
     aef:	8b 51 0c             	mov    0xc(%rcx),%edx
     af2:	8f c1                	pop    %rcx
     af4:	3b ca                	cmp    %edx,%ecx
     af6:	40 0f 9d c1          	rex setge %cl
     afa:	48 0f b6 c9          	movzbq %cl,%rcx
     afe:	48 83 f9 00          	cmp    $0x0,%rcx
     b02:	0f 84 13 00 00 00    	je     b1b <main+0xb1b>
            return null;
     b08:	b9 00 00 00 00       	mov    $0x0,%ecx
     b0d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
     b11:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     b18:	8f c5                	pop    %rbp
     b1a:	c3                   	ret
        return &ptr[index];
     b1b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     b1f:	48 8b c9             	mov    %rcx,%rcx
     b22:	ba 00 00 00 00       	mov    $0x0,%edx
     b27:	48 03 ca             	add    %rdx,%rcx
     b2a:	ff f1                	push   %rcx
     b2c:	8b 4d 18             	mov    0x18(%rbp),%ecx
     b2f:	48 63 c9             	movslq %ecx,%rcx
     b32:	8f c2                	pop    %rdx
     b34:	48 8b 1a             	mov    (%rdx),%rbx
     b37:	ba 0c 00 00 00       	mov    $0xc,%edx
     b3c:	48 8b fa             	mov    %rdx,%rdi
     b3f:	48 8b c1             	mov    %rcx,%rax
     b42:	48 f7 e7             	mul    %rdi
     b45:	48 8b c8             	mov    %rax,%rcx
     b48:	48 8b d7             	mov    %rdi,%rdx
     b4b:	48 03 d9             	add    %rcx,%rbx
     b4e:	48 89 5d f8          	mov    %rbx,-0x8(%rbp)
     b52:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     b59:	8f c5                	pop    %rbp
     b5b:	c3                   	ret
    fn set_unsafe(index: i32, t: T*) {
        if(index >= len)
            return;
        ptr[index] = t;
    }
    fn resize(newLen: i32) -> bool {
     b5c:	ff f5                	push   %rbp
     b5e:	48 8b ec             	mov    %rsp,%rbp
     b61:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        // TODO: destruct elements if shrinking
        if newLen > max {
     b68:	8b 4d 18             	mov    0x18(%rbp),%ecx
     b6b:	48 63 c9             	movslq %ecx,%rcx
     b6e:	ff f1                	push   %rcx
     b70:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     b74:	48 8b c9             	mov    %rcx,%rcx
     b77:	8b 51 08             	mov    0x8(%rcx),%edx
     b7a:	8f c1                	pop    %rcx
     b7c:	3b ca                	cmp    %edx,%ecx
     b7e:	40 0f 9f c1          	rex setg %cl
     b82:	48 0f b6 c9          	movzbq %cl,%rcx
     b86:	48 83 f9 00          	cmp    $0x0,%rcx
     b8a:	0f 84 5c 00 00 00    	je     bec <main+0xbec>
            if !reserve(newLen)
     b90:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
     b97:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     b9b:	48 8b c9             	mov    %rcx,%rcx
     b9e:	ff f1                	push   %rcx
     ba0:	8b 4d 18             	mov    0x18(%rbp),%ecx
     ba3:	48 63 c9             	movslq %ecx,%rcx
     ba6:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
     baa:	8f c1                	pop    %rcx
     bac:	48 89 0c 24          	mov    %rcx,(%rsp)
     bb0:	e8 ff 06 00 00       	call   12b4 <main+0x12b4>
     bb5:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     bbc:	48 8a 4c 24 d0       	rex.W mov -0x30(%rsp),%cl
     bc1:	48 0f b6 c9          	movzbq %cl,%rcx
     bc5:	48 85 c9             	test   %rcx,%rcx
     bc8:	40 0f 94 c1          	rex sete %cl
     bcc:	48 0f b6 c9          	movzbq %cl,%rcx
     bd0:	48 83 f9 00          	cmp    $0x0,%rcx
     bd4:	0f 84 12 00 00 00    	je     bec <main+0xbec>
                return false;
     bda:	b9 00 00 00 00       	mov    $0x0,%ecx
     bdf:	88 4d f8             	mov    %cl,-0x8(%rbp)
     be2:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     be9:	8f c5                	pop    %rbp
     beb:	c3                   	ret
        }
        if newLen < len {
     bec:	8b 4d 18             	mov    0x18(%rbp),%ecx
     bef:	48 63 c9             	movslq %ecx,%rcx
     bf2:	ff f1                	push   %rcx
     bf4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     bf8:	48 8b c9             	mov    %rcx,%rcx
     bfb:	8b 51 0c             	mov    0xc(%rcx),%edx
     bfe:	8f c1                	pop    %rcx
     c00:	3b ca                	cmp    %edx,%ecx
     c02:	40 0f 9c c1          	rex setl %cl
     c06:	48 0f b6 c9          	movzbq %cl,%rcx
     c0a:	48 83 f9 00          	cmp    $0x0,%rcx
     c0e:	0f 84 7c 00 00 00    	je     c90 <main+0xc90>
            for newLen..len {
     c14:	8b 4d 18             	mov    0x18(%rbp),%ecx
     c17:	48 63 c9             	movslq %ecx,%rcx
     c1a:	ff f1                	push   %rcx
     c1c:	8f c1                	pop    %rcx
     c1e:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
     c25:	89 4d f0             	mov    %ecx,-0x10(%rbp)
     c28:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     c2c:	48 8b c9             	mov    %rcx,%rcx
     c2f:	8b 51 0c             	mov    0xc(%rcx),%edx
     c32:	ff f2                	push   %rdx
     c34:	8f c1                	pop    %rcx
     c36:	8b 55 f0             	mov    -0x10(%rbp),%edx
     c39:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
     c40:	89 55 f0             	mov    %edx,-0x10(%rbp)
     c43:	3b d1                	cmp    %ecx,%edx
     c45:	40 0f 9c c2          	rex setl %dl
     c49:	48 0f b6 d2          	movzbq %dl,%rdx
     c4d:	48 83 fa 00          	cmp    $0x0,%rdx
     c51:	0f 84 39 00 00 00    	je     c90 <main+0xc90>
                destruct(&ptr[nr])
     c57:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     c5b:	48 8b c9             	mov    %rcx,%rcx
     c5e:	ba 00 00 00 00       	mov    $0x0,%edx
     c63:	48 03 ca             	add    %rdx,%rcx
     c66:	ff f1                	push   %rcx
     c68:	8b 4d f0             	mov    -0x10(%rbp),%ecx
     c6b:	8f c2                	pop    %rdx
     c6d:	48 8b 1a             	mov    (%rdx),%rbx
     c70:	ba 04 00 00 00       	mov    $0x4,%edx
     c75:	48 8b fa             	mov    %rdx,%rdi
     c78:	48 8b c1             	mov    %rcx,%rax
     c7b:	48 f7 e7             	mul    %rdi
     c7e:	48 8b c8             	mov    %rax,%rcx
     c81:	48 8b d7             	mov    %rdi,%rdx
     c84:	48 03 d9             	add    %rcx,%rbx
     c87:	33 d2                	xor    %edx,%edx
     c89:	89 13                	mov    %edx,(%rbx)
     c8b:	e9 98 ff ff ff       	jmp    c28 <main+0xc28>
            }
        }
        len = newLen;
     c90:	8b 4d 18             	mov    0x18(%rbp),%ecx
     c93:	48 63 c9             	movslq %ecx,%rcx
     c96:	ff f1                	push   %rcx
     c98:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     c9c:	48 8b c9             	mov    %rcx,%rcx
     c9f:	ba 0c 00 00 00       	mov    $0xc,%edx
     ca4:	48 03 ca             	add    %rdx,%rcx
     ca7:	8f c2                	pop    %rdx
     ca9:	89 11                	mov    %edx,(%rcx)
        return true;
     cab:	b9 01 00 00 00       	mov    $0x1,%ecx
     cb0:	88 4d f8             	mov    %cl,-0x8(%rbp)
     cb3:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
     cba:	8f c5                	pop    %rbp
     cbc:	c3                   	ret
    }
    // new memory is zero-initialized (DO NOT CHANGE THIS IN THE FUTURE BECAUSE CODE DEPEND ON THIS)
    fn reserve(newMax: i32) -> bool {
     cbd:	ff f5                	push   %rbp
     cbf:	48 8b ec             	mov    %rsp,%rbp
     cc2:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        // log("newMax",newMax)
        // log("size",sizeof T)
        Assert(!is_frozen())
     cc9:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
     cd0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
     cd7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     cdb:	48 8b c9             	mov    %rcx,%rcx
     cde:	48 89 0c 24          	mov    %rcx,(%rsp)
     ce2:	e8 16 18 00 00       	call   24fd <main+0x24fd>
     ce7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
     cee:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
     cf3:	48 0f b6 c9          	movzbq %cl,%rcx
     cf7:	48 85 c9             	test   %rcx,%rcx
     cfa:	40 0f 94 c1          	rex sete %cl
     cfe:	48 0f b6 c9          	movzbq %cl,%rcx
     d02:	ff f1                	push   %rcx
     d04:	b9 8d 00 00 00       	mov    $0x8d,%ecx
     d09:	ff f1                	push   %rcx
     d0b:	b9 15 00 00 00       	mov    $0x15,%ecx
     d10:	ff f1                	push   %rcx
     d12:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d19 <main+0xd19>
     d19:	ff f1                	push   %rcx
     d1b:	b9 0c 00 00 00       	mov    $0xc,%ecx
     d20:	ff f1                	push   %rcx
     d22:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d29 <main+0xd29>
     d29:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
     d2e:	8f c1                	pop    %rcx
     d30:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
     d35:	8f c1                	pop    %rcx
     d37:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
     d3c:	8f c1                	pop    %rcx
     d3e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
     d43:	8f c1                	pop    %rcx
     d45:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
     d49:	8f c1                	pop    %rcx
     d4b:	88 0c 24             	mov    %cl,(%rsp)
     d4e:	e8 ff f2 ff ff       	call   52 <main+0x52>
     d53:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        // NOTE: We could return false instead of asserting but the intention of freeze,
        //   is to put a restriction and an expectation of no reallocations. You
        //   want an asser as soon as it happens.
        if is_frozen()
     d5a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     d61:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     d65:	48 8b c9             	mov    %rcx,%rcx
     d68:	48 89 0c 24          	mov    %rcx,(%rsp)
     d6c:	e8 8c 17 00 00       	call   24fd <main+0x24fd>
     d71:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
     d78:	48 8a 4c 24 e0       	rex.W mov -0x20(%rsp),%cl
     d7d:	48 0f b6 c9          	movzbq %cl,%rcx
     d81:	48 83 f9 00          	cmp    $0x0,%rcx
     d85:	0f 84 12 00 00 00    	je     d9d <main+0xd9d>
            return false
     d8b:	b9 00 00 00 00       	mov    $0x0,%ecx
     d90:	88 4d f8             	mov    %cl,-0x8(%rbp)
     d93:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
     d9a:	8f c5                	pop    %rbp
     d9c:	c3                   	ret
        
        if newMax==0 {
     d9d:	8b 4d 18             	mov    0x18(%rbp),%ecx
     da0:	48 63 c9             	movslq %ecx,%rcx
     da3:	ff f1                	push   %rcx
     da5:	b9 00 00 00 00       	mov    $0x0,%ecx
     daa:	8f c2                	pop    %rdx
     dac:	3b d1                	cmp    %ecx,%edx
     dae:	40 0f 94 c2          	rex sete %dl
     db2:	48 0f b6 d2          	movzbq %dl,%rdx
     db6:	48 83 fa 00          	cmp    $0x0,%rdx
     dba:	0f 84 5f 01 00 00    	je     f1f <main+0xf1f>
            // log("{",cast<u64>ptr, max, len,"}",newMax);
            if max!=0 {
     dc0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     dc4:	48 8b c9             	mov    %rcx,%rcx
     dc7:	8b 51 08             	mov    0x8(%rcx),%edx
     dca:	ff f2                	push   %rdx
     dcc:	b9 00 00 00 00       	mov    $0x0,%ecx
     dd1:	8f c2                	pop    %rdx
     dd3:	3b d1                	cmp    %ecx,%edx
     dd5:	40 0f 95 c2          	rex setne %dl
     dd9:	48 0f b6 d2          	movzbq %dl,%rdx
     ddd:	48 83 fa 00          	cmp    $0x0,%rdx
     de1:	0f 84 d7 00 00 00    	je     ebe <main+0xebe>
                // log("oh")
                for 0..len {
     de7:	b9 00 00 00 00       	mov    $0x0,%ecx
     dec:	ff f1                	push   %rcx
     dee:	8f c1                	pop    %rcx
     df0:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
     df7:	89 4d f0             	mov    %ecx,-0x10(%rbp)
     dfa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     dfe:	48 8b c9             	mov    %rcx,%rcx
     e01:	8b 51 0c             	mov    0xc(%rcx),%edx
     e04:	ff f2                	push   %rdx
     e06:	8f c1                	pop    %rcx
     e08:	8b 55 f0             	mov    -0x10(%rbp),%edx
     e0b:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
     e12:	89 55 f0             	mov    %edx,-0x10(%rbp)
     e15:	3b d1                	cmp    %ecx,%edx
     e17:	40 0f 9c c2          	rex setl %dl
     e1b:	48 0f b6 d2          	movzbq %dl,%rdx
     e1f:	48 83 fa 00          	cmp    $0x0,%rdx
     e23:	0f 84 4c 00 00 00    	je     e75 <main+0xe75>
                    destruct(&ptr[nr])
     e29:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     e2d:	48 8b c9             	mov    %rcx,%rcx
     e30:	ba 00 00 00 00       	mov    $0x0,%edx
     e35:	48 03 ca             	add    %rdx,%rcx
     e38:	ff f1                	push   %rcx
     e3a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
     e3d:	8f c2                	pop    %rdx
     e3f:	48 8b 1a             	mov    (%rdx),%rbx
     e42:	ba 18 00 00 00       	mov    $0x18,%edx
     e47:	48 8b fa             	mov    %rdx,%rdi
     e4a:	48 8b c1             	mov    %rcx,%rax
     e4d:	48 f7 e7             	mul    %rdi
     e50:	48 8b c8             	mov    %rax,%rcx
     e53:	48 8b d7             	mov    %rdi,%rdx
     e56:	48 03 d9             	add    %rcx,%rbx
     e59:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     e60:	48 89 1c 24          	mov    %rbx,(%rsp)
     e64:	e8 fc 17 00 00       	call   2665 <main+0x2665>
     e69:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
     e70:	e9 85 ff ff ff       	jmp    dfa <main+0xdfa>
                }
                bytes := max * sizeof T
     e75:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     e79:	48 8b c9             	mov    %rcx,%rcx
     e7c:	8b 51 08             	mov    0x8(%rcx),%edx
     e7f:	ff f2                	push   %rdx
     e81:	b9 18 00 00 00       	mov    $0x18,%ecx
     e86:	8f c2                	pop    %rdx
     e88:	0f af d1             	imul   %ecx,%edx
     e8b:	89 55 f0             	mov    %edx,-0x10(%rbp)
                Free(cast_unsafe<void*>ptr, bytes);
     e8e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
     e95:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     e99:	48 8b c9             	mov    %rcx,%rcx
     e9c:	48 8b 11             	mov    (%rcx),%rdx
     e9f:	ff f2                	push   %rdx
     ea1:	8b 4d f0             	mov    -0x10(%rbp),%ecx
     ea4:	48 63 d1             	movslq %ecx,%rdx
     ea7:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
     eac:	8f c1                	pop    %rcx
     eae:	48 89 0c 24          	mov    %rcx,(%rsp)
     eb2:	e8 9a 6b 00 00       	call   7a51 <main+0x7a51>
     eb7:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
                // memory_tracker.remove(cast_unsafe<void*>ptr, bytes, typeid T)
                // log("nah")
            }
            ptr = null;
     ebe:	b9 00 00 00 00       	mov    $0x0,%ecx
     ec3:	ff f1                	push   %rcx
     ec5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     ec9:	48 8b c9             	mov    %rcx,%rcx
     ecc:	ba 00 00 00 00       	mov    $0x0,%edx
     ed1:	48 03 ca             	add    %rdx,%rcx
     ed4:	8f c2                	pop    %rdx
     ed6:	48 89 11             	mov    %rdx,(%rcx)
            max = 0;
     ed9:	b9 00 00 00 00       	mov    $0x0,%ecx
     ede:	ff f1                	push   %rcx
     ee0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     ee4:	48 8b c9             	mov    %rcx,%rcx
     ee7:	ba 08 00 00 00       	mov    $0x8,%edx
     eec:	48 03 ca             	add    %rdx,%rcx
     eef:	8f c2                	pop    %rdx
     ef1:	89 11                	mov    %edx,(%rcx)
            len = 0;
     ef3:	b9 00 00 00 00       	mov    $0x0,%ecx
     ef8:	ff f1                	push   %rcx
     efa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     efe:	48 8b c9             	mov    %rcx,%rcx
     f01:	ba 0c 00 00 00       	mov    $0xc,%edx
     f06:	48 03 ca             	add    %rdx,%rcx
     f09:	8f c2                	pop    %rdx
     f0b:	89 11                	mov    %edx,(%rcx)
            return true;
     f0d:	b9 01 00 00 00       	mov    $0x1,%ecx
     f12:	88 4d f8             	mov    %cl,-0x8(%rbp)
     f15:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
     f1c:	8f c5                	pop    %rbp
     f1e:	c3                   	ret
        }
        // log("what",cast<u64>ptr)
        if !ptr {
     f1f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     f23:	48 8b c9             	mov    %rcx,%rcx
     f26:	48 8b 11             	mov    (%rcx),%rdx
     f29:	48 85 d2             	test   %rdx,%rdx
     f2c:	40 0f 94 c2          	rex sete %dl
     f30:	48 0f b6 d2          	movzbq %dl,%rdx
     f34:	48 83 fa 00          	cmp    $0x0,%rdx
     f38:	0f 84 f7 00 00 00    	je     1035 <main+0x1035>
            // log("huh")
            // log("Try reserve, sizeof T =",sizeof T)
            bytes := newMax * sizeof T
     f3e:	8b 4d 18             	mov    0x18(%rbp),%ecx
     f41:	48 63 c9             	movslq %ecx,%rcx
     f44:	ff f1                	push   %rcx
     f46:	b9 18 00 00 00       	mov    $0x18,%ecx
     f4b:	8f c2                	pop    %rdx
     f4d:	0f af d1             	imul   %ecx,%edx
     f50:	89 55 f0             	mov    %edx,-0x10(%rbp)
            ptr = cast_unsafe<T*>Allocate(bytes);
     f53:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
     f5a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
     f5d:	48 63 d1             	movslq %ecx,%rdx
     f60:	48 89 14 24          	mov    %rdx,(%rsp)
     f64:	e8 32 6a 00 00       	call   799b <main+0x799b>
     f69:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
     f70:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
     f75:	ff f1                	push   %rcx
     f77:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     f7b:	48 8b c9             	mov    %rcx,%rcx
     f7e:	ba 00 00 00 00       	mov    $0x0,%edx
     f83:	48 03 ca             	add    %rdx,%rcx
     f86:	8f c2                	pop    %rdx
     f88:	48 89 11             	mov    %rdx,(%rcx)
            // memory_tracker.add(cast_unsafe<void*>ptr, bytes, typeid T)
            memzero(cast_unsafe<void*>ptr, bytes)
     f8b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     f8f:	48 8b c9             	mov    %rcx,%rcx
     f92:	48 8b 11             	mov    (%rcx),%rdx
     f95:	ff f2                	push   %rdx
     f97:	8b 4d f0             	mov    -0x10(%rbp),%ecx
     f9a:	48 63 d1             	movslq %ecx,%rdx
     f9d:	8f c1                	pop    %rcx
     f9f:	ff f1                	push   %rcx
     fa1:	ff f2                	push   %rdx
     fa3:	48 01 ca             	add    %rcx,%rdx
     fa6:	48 3b d1             	cmp    %rcx,%rdx
     fa9:	74 09                	je     fb4 <main+0xfb4>
     fab:	c6 01 00             	movb   $0x0,(%rcx)
     fae:	48 83 c1 01          	add    $0x1,%rcx
     fb2:	eb f2                	jmp    fa6 <main+0xfa6>
     fb4:	8f c2                	pop    %rdx
     fb6:	8f c1                	pop    %rcx
            // log("allocSize",newMax * sizeof T)
            // log("ptr",ptr)
            // Assert(ptr);
            // initialization of elements is done when adding them
            if !ptr
     fb8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     fbc:	48 8b c9             	mov    %rcx,%rcx
     fbf:	48 8b 11             	mov    (%rcx),%rdx
     fc2:	48 85 d2             	test   %rdx,%rdx
     fc5:	40 0f 94 c2          	rex sete %dl
     fc9:	48 0f b6 d2          	movzbq %dl,%rdx
     fcd:	48 83 fa 00          	cmp    $0x0,%rdx
     fd1:	0f 84 12 00 00 00    	je     fe9 <main+0xfe9>
                return false;
     fd7:	b9 00 00 00 00       	mov    $0x0,%ecx
     fdc:	88 4d f8             	mov    %cl,-0x8(%rbp)
     fdf:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
     fe6:	8f c5                	pop    %rbp
     fe8:	c3                   	ret
            len = 0;
     fe9:	b9 00 00 00 00       	mov    $0x0,%ecx
     fee:	ff f1                	push   %rcx
     ff0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
     ff4:	48 8b c9             	mov    %rcx,%rcx
     ff7:	ba 0c 00 00 00       	mov    $0xc,%edx
     ffc:	48 03 ca             	add    %rdx,%rcx
     fff:	8f c2                	pop    %rdx
    1001:	89 11                	mov    %edx,(%rcx)
            max = newMax;
    1003:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1006:	48 63 c9             	movslq %ecx,%rcx
    1009:	ff f1                	push   %rcx
    100b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    100f:	48 8b c9             	mov    %rcx,%rcx
    1012:	ba 08 00 00 00       	mov    $0x8,%edx
    1017:	48 03 ca             	add    %rdx,%rcx
    101a:	8f c2                	pop    %rdx
    101c:	89 11                	mov    %edx,(%rcx)
            return true;
    101e:	b9 01 00 00 00       	mov    $0x1,%ecx
    1023:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1026:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    102d:	8f c5                	pop    %rbp
    102f:	c3                   	ret
    1030:	e9 6d 02 00 00       	jmp    12a2 <main+0x12a2>
        } else {
            if newMax < len {
    1035:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1038:	48 63 c9             	movslq %ecx,%rcx
    103b:	ff f1                	push   %rcx
    103d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1041:	48 8b c9             	mov    %rcx,%rcx
    1044:	8b 51 0c             	mov    0xc(%rcx),%edx
    1047:	8f c1                	pop    %rcx
    1049:	3b ca                	cmp    %edx,%ecx
    104b:	40 0f 9c c1          	rex setl %cl
    104f:	48 0f b6 c9          	movzbq %cl,%rcx
    1053:	48 83 f9 00          	cmp    $0x0,%rcx
    1057:	0f 84 8f 00 00 00    	je     10ec <main+0x10ec>
                for newMax..len {
    105d:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1060:	48 63 c9             	movslq %ecx,%rcx
    1063:	ff f1                	push   %rcx
    1065:	8f c1                	pop    %rcx
    1067:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    106e:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    1071:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1075:	48 8b c9             	mov    %rcx,%rcx
    1078:	8b 51 0c             	mov    0xc(%rcx),%edx
    107b:	ff f2                	push   %rdx
    107d:	8f c1                	pop    %rcx
    107f:	8b 55 f0             	mov    -0x10(%rbp),%edx
    1082:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    1089:	89 55 f0             	mov    %edx,-0x10(%rbp)
    108c:	3b d1                	cmp    %ecx,%edx
    108e:	40 0f 9c c2          	rex setl %dl
    1092:	48 0f b6 d2          	movzbq %dl,%rdx
    1096:	48 83 fa 00          	cmp    $0x0,%rdx
    109a:	0f 84 4c 00 00 00    	je     10ec <main+0x10ec>
                    destruct(&ptr[nr])
    10a0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    10a4:	48 8b c9             	mov    %rcx,%rcx
    10a7:	ba 00 00 00 00       	mov    $0x0,%edx
    10ac:	48 03 ca             	add    %rdx,%rcx
    10af:	ff f1                	push   %rcx
    10b1:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    10b4:	8f c2                	pop    %rdx
    10b6:	48 8b 1a             	mov    (%rdx),%rbx
    10b9:	ba 18 00 00 00       	mov    $0x18,%edx
    10be:	48 8b fa             	mov    %rdx,%rdi
    10c1:	48 8b c1             	mov    %rcx,%rax
    10c4:	48 f7 e7             	mul    %rdi
    10c7:	48 8b c8             	mov    %rax,%rcx
    10ca:	48 8b d7             	mov    %rdi,%rdx
    10cd:	48 03 d9             	add    %rcx,%rbx
    10d0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    10d7:	48 89 1c 24          	mov    %rbx,(%rsp)
    10db:	e8 85 15 00 00       	call   2665 <main+0x2665>
    10e0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    10e7:	e9 85 ff ff ff       	jmp    1071 <main+0x1071>
                }
            }

            new_size := newMax * sizeof T;
    10ec:	8b 4d 18             	mov    0x18(%rbp),%ecx
    10ef:	48 63 c9             	movslq %ecx,%rcx
    10f2:	ff f1                	push   %rcx
    10f4:	b9 18 00 00 00       	mov    $0x18,%ecx
    10f9:	8f c2                	pop    %rdx
    10fb:	0f af d1             	imul   %ecx,%edx
    10fe:	89 55 f0             	mov    %edx,-0x10(%rbp)
            old_size := max * sizeof T;
    1101:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1105:	48 8b c9             	mov    %rcx,%rcx
    1108:	8b 51 08             	mov    0x8(%rcx),%edx
    110b:	ff f2                	push   %rdx
    110d:	b9 18 00 00 00       	mov    $0x18,%ecx
    1112:	8f c2                	pop    %rdx
    1114:	0f af d1             	imul   %ecx,%edx
    1117:	89 55 e8             	mov    %edx,-0x18(%rbp)
            newPtr: T* = cast_unsafe<T*>Reallocate(new_size, cast_unsafe<void*>ptr, old_size);
    111a:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    1121:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1124:	48 63 d1             	movslq %ecx,%rdx
    1127:	ff f2                	push   %rdx
    1129:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    112d:	48 8b c9             	mov    %rcx,%rcx
    1130:	48 8b 11             	mov    (%rcx),%rdx
    1133:	ff f2                	push   %rdx
    1135:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    1138:	48 63 d1             	movslq %ecx,%rdx
    113b:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    1140:	8f c1                	pop    %rcx
    1142:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    1147:	8f c1                	pop    %rcx
    1149:	48 89 0c 24          	mov    %rcx,(%rsp)
    114d:	e8 a5 68 00 00       	call   79f7 <main+0x79f7>
    1152:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    1159:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    115e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            // memory_tracker.remove(cast_unsafe<void*>ptr, old_size, typeid T)
            // memory_tracker.add(cast_unsafe<void*>newPtr, new_size, typeid T)
            // Assert(newPtr);
            if !newPtr
    1162:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1166:	48 85 c9             	test   %rcx,%rcx
    1169:	40 0f 94 c1          	rex sete %cl
    116d:	48 0f b6 c9          	movzbq %cl,%rcx
    1171:	48 83 f9 00          	cmp    $0x0,%rcx
    1175:	0f 84 12 00 00 00    	je     118d <main+0x118d>
                return false;
    117b:	b9 00 00 00 00       	mov    $0x0,%ecx
    1180:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1183:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    118a:	8f c5                	pop    %rbp
    118c:	c3                   	ret
            if newMax > max
    118d:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1190:	48 63 c9             	movslq %ecx,%rcx
    1193:	ff f1                	push   %rcx
    1195:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1199:	48 8b c9             	mov    %rcx,%rcx
    119c:	8b 51 08             	mov    0x8(%rcx),%edx
    119f:	8f c1                	pop    %rcx
    11a1:	3b ca                	cmp    %edx,%ecx
    11a3:	40 0f 9f c1          	rex setg %cl
    11a7:	48 0f b6 c9          	movzbq %cl,%rcx
    11ab:	48 83 f9 00          	cmp    $0x0,%rcx
    11af:	0f 84 63 00 00 00    	je     1218 <main+0x1218>
                memzero(cast_unsafe<void*>newPtr + len * sizeof T, (newMax - max) * sizeof T);
    11b5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    11b9:	ff f1                	push   %rcx
    11bb:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    11bf:	48 8b c9             	mov    %rcx,%rcx
    11c2:	8b 51 0c             	mov    0xc(%rcx),%edx
    11c5:	ff f2                	push   %rdx
    11c7:	b9 18 00 00 00       	mov    $0x18,%ecx
    11cc:	8f c2                	pop    %rdx
    11ce:	0f af d1             	imul   %ecx,%edx
    11d1:	8f c1                	pop    %rcx
    11d3:	48 03 ca             	add    %rdx,%rcx
    11d6:	ff f1                	push   %rcx
    11d8:	8b 4d 18             	mov    0x18(%rbp),%ecx
    11db:	48 63 c9             	movslq %ecx,%rcx
    11de:	ff f1                	push   %rcx
    11e0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    11e4:	48 8b c9             	mov    %rcx,%rcx
    11e7:	8b 51 08             	mov    0x8(%rcx),%edx
    11ea:	8f c1                	pop    %rcx
    11ec:	2b ca                	sub    %edx,%ecx
    11ee:	ff f1                	push   %rcx
    11f0:	b9 18 00 00 00       	mov    $0x18,%ecx
    11f5:	8f c2                	pop    %rdx
    11f7:	0f af d1             	imul   %ecx,%edx
    11fa:	48 63 ca             	movslq %edx,%rcx
    11fd:	8f c2                	pop    %rdx
    11ff:	ff f2                	push   %rdx
    1201:	ff f1                	push   %rcx
    1203:	48 01 d1             	add    %rdx,%rcx
    1206:	48 3b ca             	cmp    %rdx,%rcx
    1209:	74 09                	je     1214 <main+0x1214>
    120b:	c6 02 00             	movb   $0x0,(%rdx)
    120e:	48 83 c2 01          	add    $0x1,%rdx
    1212:	eb f2                	jmp    1206 <main+0x1206>
    1214:	8f c1                	pop    %rcx
    1216:	8f c2                	pop    %rdx
            ptr = newPtr;
    1218:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    121c:	ff f1                	push   %rcx
    121e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1222:	48 8b c9             	mov    %rcx,%rcx
    1225:	ba 00 00 00 00       	mov    $0x0,%edx
    122a:	48 03 ca             	add    %rdx,%rcx
    122d:	8f c2                	pop    %rdx
    122f:	48 89 11             	mov    %rdx,(%rcx)
            max = newMax;
    1232:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1235:	48 63 c9             	movslq %ecx,%rcx
    1238:	ff f1                	push   %rcx
    123a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    123e:	48 8b c9             	mov    %rcx,%rcx
    1241:	ba 08 00 00 00       	mov    $0x8,%edx
    1246:	48 03 ca             	add    %rdx,%rcx
    1249:	8f c2                	pop    %rdx
    124b:	89 11                	mov    %edx,(%rcx)
            if len > newMax {
    124d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1251:	48 8b c9             	mov    %rcx,%rcx
    1254:	8b 51 0c             	mov    0xc(%rcx),%edx
    1257:	ff f2                	push   %rdx
    1259:	8b 4d 18             	mov    0x18(%rbp),%ecx
    125c:	48 63 c9             	movslq %ecx,%rcx
    125f:	8f c2                	pop    %rdx
    1261:	3b d1                	cmp    %ecx,%edx
    1263:	40 0f 9f c2          	rex setg %dl
    1267:	48 0f b6 d2          	movzbq %dl,%rdx
    126b:	48 83 fa 00          	cmp    $0x0,%rdx
    126f:	0f 84 1b 00 00 00    	je     1290 <main+0x1290>
                len = newMax;
    1275:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1278:	48 63 c9             	movslq %ecx,%rcx
    127b:	ff f1                	push   %rcx
    127d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1281:	48 8b c9             	mov    %rcx,%rcx
    1284:	ba 0c 00 00 00       	mov    $0xc,%edx
    1289:	48 03 ca             	add    %rdx,%rcx
    128c:	8f c2                	pop    %rdx
    128e:	89 11                	mov    %edx,(%rcx)
            }
            return true;
    1290:	b9 01 00 00 00       	mov    $0x1,%ecx
    1295:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1298:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    129f:	8f c5                	pop    %rbp
    12a1:	c3                   	ret
        }
        return false;
    12a2:	b9 00 00 00 00       	mov    $0x0,%ecx
    12a7:	88 4d f8             	mov    %cl,-0x8(%rbp)
    12aa:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    12b1:	8f c5                	pop    %rbp
    12b3:	c3                   	ret
    fn reserve(newMax: i32) -> bool {
    12b4:	ff f5                	push   %rbp
    12b6:	48 8b ec             	mov    %rsp,%rbp
    12b9:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        Assert(!is_frozen())
    12c0:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    12c7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    12ce:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    12d2:	48 8b c9             	mov    %rcx,%rcx
    12d5:	48 89 0c 24          	mov    %rcx,(%rsp)
    12d9:	e8 79 12 00 00       	call   2557 <main+0x2557>
    12de:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    12e5:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
    12ea:	48 0f b6 c9          	movzbq %cl,%rcx
    12ee:	48 85 c9             	test   %rcx,%rcx
    12f1:	40 0f 94 c1          	rex sete %cl
    12f5:	48 0f b6 c9          	movzbq %cl,%rcx
    12f9:	ff f1                	push   %rcx
    12fb:	b9 8d 00 00 00       	mov    $0x8d,%ecx
    1300:	ff f1                	push   %rcx
    1302:	b9 15 00 00 00       	mov    $0x15,%ecx
    1307:	ff f1                	push   %rcx
    1309:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1310 <main+0x1310>
    1310:	ff f1                	push   %rcx
    1312:	b9 0c 00 00 00       	mov    $0xc,%ecx
    1317:	ff f1                	push   %rcx
    1319:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1320 <main+0x1320>
    1320:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    1325:	8f c1                	pop    %rcx
    1327:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    132c:	8f c1                	pop    %rcx
    132e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    1333:	8f c1                	pop    %rcx
    1335:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    133a:	8f c1                	pop    %rcx
    133c:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    1340:	8f c1                	pop    %rcx
    1342:	88 0c 24             	mov    %cl,(%rsp)
    1345:	e8 08 ed ff ff       	call   52 <main+0x52>
    134a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        if is_frozen()
    1351:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1358:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    135c:	48 8b c9             	mov    %rcx,%rcx
    135f:	48 89 0c 24          	mov    %rcx,(%rsp)
    1363:	e8 ef 11 00 00       	call   2557 <main+0x2557>
    1368:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    136f:	48 8a 4c 24 e0       	rex.W mov -0x20(%rsp),%cl
    1374:	48 0f b6 c9          	movzbq %cl,%rcx
    1378:	48 83 f9 00          	cmp    $0x0,%rcx
    137c:	0f 84 12 00 00 00    	je     1394 <main+0x1394>
            return false
    1382:	b9 00 00 00 00       	mov    $0x0,%ecx
    1387:	88 4d f8             	mov    %cl,-0x8(%rbp)
    138a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1391:	8f c5                	pop    %rbp
    1393:	c3                   	ret
        if newMax==0 {
    1394:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1397:	48 63 c9             	movslq %ecx,%rcx
    139a:	ff f1                	push   %rcx
    139c:	b9 00 00 00 00       	mov    $0x0,%ecx
    13a1:	8f c2                	pop    %rdx
    13a3:	3b d1                	cmp    %ecx,%edx
    13a5:	40 0f 94 c2          	rex sete %dl
    13a9:	48 0f b6 d2          	movzbq %dl,%rdx
    13ad:	48 83 fa 00          	cmp    $0x0,%rdx
    13b1:	0f 84 4c 01 00 00    	je     1503 <main+0x1503>
            if max!=0 {
    13b7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    13bb:	48 8b c9             	mov    %rcx,%rcx
    13be:	8b 51 08             	mov    0x8(%rcx),%edx
    13c1:	ff f2                	push   %rdx
    13c3:	b9 00 00 00 00       	mov    $0x0,%ecx
    13c8:	8f c2                	pop    %rdx
    13ca:	3b d1                	cmp    %ecx,%edx
    13cc:	40 0f 95 c2          	rex setne %dl
    13d0:	48 0f b6 d2          	movzbq %dl,%rdx
    13d4:	48 83 fa 00          	cmp    $0x0,%rdx
    13d8:	0f 84 c4 00 00 00    	je     14a2 <main+0x14a2>
                for 0..len {
    13de:	b9 00 00 00 00       	mov    $0x0,%ecx
    13e3:	ff f1                	push   %rcx
    13e5:	8f c1                	pop    %rcx
    13e7:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    13ee:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    13f1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    13f5:	48 8b c9             	mov    %rcx,%rcx
    13f8:	8b 51 0c             	mov    0xc(%rcx),%edx
    13fb:	ff f2                	push   %rdx
    13fd:	8f c1                	pop    %rcx
    13ff:	8b 55 f0             	mov    -0x10(%rbp),%edx
    1402:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    1409:	89 55 f0             	mov    %edx,-0x10(%rbp)
    140c:	3b d1                	cmp    %ecx,%edx
    140e:	40 0f 9c c2          	rex setl %dl
    1412:	48 0f b6 d2          	movzbq %dl,%rdx
    1416:	48 83 fa 00          	cmp    $0x0,%rdx
    141a:	0f 84 39 00 00 00    	je     1459 <main+0x1459>
                    destruct(&ptr[nr])
    1420:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1424:	48 8b c9             	mov    %rcx,%rcx
    1427:	ba 00 00 00 00       	mov    $0x0,%edx
    142c:	48 03 ca             	add    %rdx,%rcx
    142f:	ff f1                	push   %rcx
    1431:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1434:	8f c2                	pop    %rdx
    1436:	48 8b 1a             	mov    (%rdx),%rbx
    1439:	ba 04 00 00 00       	mov    $0x4,%edx
    143e:	48 8b fa             	mov    %rdx,%rdi
    1441:	48 8b c1             	mov    %rcx,%rax
    1444:	48 f7 e7             	mul    %rdi
    1447:	48 8b c8             	mov    %rax,%rcx
    144a:	48 8b d7             	mov    %rdi,%rdx
    144d:	48 03 d9             	add    %rcx,%rbx
    1450:	33 d2                	xor    %edx,%edx
    1452:	89 13                	mov    %edx,(%rbx)
    1454:	e9 98 ff ff ff       	jmp    13f1 <main+0x13f1>
                bytes := max * sizeof T
    1459:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    145d:	48 8b c9             	mov    %rcx,%rcx
    1460:	8b 51 08             	mov    0x8(%rcx),%edx
    1463:	ff f2                	push   %rdx
    1465:	b9 04 00 00 00       	mov    $0x4,%ecx
    146a:	8f c2                	pop    %rdx
    146c:	0f af d1             	imul   %ecx,%edx
    146f:	89 55 f0             	mov    %edx,-0x10(%rbp)
                Free(cast_unsafe<void*>ptr, bytes);
    1472:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    1479:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    147d:	48 8b c9             	mov    %rcx,%rcx
    1480:	48 8b 11             	mov    (%rcx),%rdx
    1483:	ff f2                	push   %rdx
    1485:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1488:	48 63 d1             	movslq %ecx,%rdx
    148b:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    1490:	8f c1                	pop    %rcx
    1492:	48 89 0c 24          	mov    %rcx,(%rsp)
    1496:	e8 b6 65 00 00       	call   7a51 <main+0x7a51>
    149b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
            ptr = null;
    14a2:	b9 00 00 00 00       	mov    $0x0,%ecx
    14a7:	ff f1                	push   %rcx
    14a9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    14ad:	48 8b c9             	mov    %rcx,%rcx
    14b0:	ba 00 00 00 00       	mov    $0x0,%edx
    14b5:	48 03 ca             	add    %rdx,%rcx
    14b8:	8f c2                	pop    %rdx
    14ba:	48 89 11             	mov    %rdx,(%rcx)
            max = 0;
    14bd:	b9 00 00 00 00       	mov    $0x0,%ecx
    14c2:	ff f1                	push   %rcx
    14c4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    14c8:	48 8b c9             	mov    %rcx,%rcx
    14cb:	ba 08 00 00 00       	mov    $0x8,%edx
    14d0:	48 03 ca             	add    %rdx,%rcx
    14d3:	8f c2                	pop    %rdx
    14d5:	89 11                	mov    %edx,(%rcx)
            len = 0;
    14d7:	b9 00 00 00 00       	mov    $0x0,%ecx
    14dc:	ff f1                	push   %rcx
    14de:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    14e2:	48 8b c9             	mov    %rcx,%rcx
    14e5:	ba 0c 00 00 00       	mov    $0xc,%edx
    14ea:	48 03 ca             	add    %rdx,%rcx
    14ed:	8f c2                	pop    %rdx
    14ef:	89 11                	mov    %edx,(%rcx)
            return true;
    14f1:	b9 01 00 00 00       	mov    $0x1,%ecx
    14f6:	88 4d f8             	mov    %cl,-0x8(%rbp)
    14f9:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1500:	8f c5                	pop    %rbp
    1502:	c3                   	ret
        if !ptr {
    1503:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1507:	48 8b c9             	mov    %rcx,%rcx
    150a:	48 8b 11             	mov    (%rcx),%rdx
    150d:	48 85 d2             	test   %rdx,%rdx
    1510:	40 0f 94 c2          	rex sete %dl
    1514:	48 0f b6 d2          	movzbq %dl,%rdx
    1518:	48 83 fa 00          	cmp    $0x0,%rdx
    151c:	0f 84 f7 00 00 00    	je     1619 <main+0x1619>
            bytes := newMax * sizeof T
    1522:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1525:	48 63 c9             	movslq %ecx,%rcx
    1528:	ff f1                	push   %rcx
    152a:	b9 04 00 00 00       	mov    $0x4,%ecx
    152f:	8f c2                	pop    %rdx
    1531:	0f af d1             	imul   %ecx,%edx
    1534:	89 55 f0             	mov    %edx,-0x10(%rbp)
            ptr = cast_unsafe<T*>Allocate(bytes);
    1537:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    153e:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1541:	48 63 d1             	movslq %ecx,%rdx
    1544:	48 89 14 24          	mov    %rdx,(%rsp)
    1548:	e8 4e 64 00 00       	call   799b <main+0x799b>
    154d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1554:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    1559:	ff f1                	push   %rcx
    155b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    155f:	48 8b c9             	mov    %rcx,%rcx
    1562:	ba 00 00 00 00       	mov    $0x0,%edx
    1567:	48 03 ca             	add    %rdx,%rcx
    156a:	8f c2                	pop    %rdx
    156c:	48 89 11             	mov    %rdx,(%rcx)
            memzero(cast_unsafe<void*>ptr, bytes)
    156f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1573:	48 8b c9             	mov    %rcx,%rcx
    1576:	48 8b 11             	mov    (%rcx),%rdx
    1579:	ff f2                	push   %rdx
    157b:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    157e:	48 63 d1             	movslq %ecx,%rdx
    1581:	8f c1                	pop    %rcx
    1583:	ff f1                	push   %rcx
    1585:	ff f2                	push   %rdx
    1587:	48 01 ca             	add    %rcx,%rdx
    158a:	48 3b d1             	cmp    %rcx,%rdx
    158d:	74 09                	je     1598 <main+0x1598>
    158f:	c6 01 00             	movb   $0x0,(%rcx)
    1592:	48 83 c1 01          	add    $0x1,%rcx
    1596:	eb f2                	jmp    158a <main+0x158a>
    1598:	8f c2                	pop    %rdx
    159a:	8f c1                	pop    %rcx
            if !ptr
    159c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    15a0:	48 8b c9             	mov    %rcx,%rcx
    15a3:	48 8b 11             	mov    (%rcx),%rdx
    15a6:	48 85 d2             	test   %rdx,%rdx
    15a9:	40 0f 94 c2          	rex sete %dl
    15ad:	48 0f b6 d2          	movzbq %dl,%rdx
    15b1:	48 83 fa 00          	cmp    $0x0,%rdx
    15b5:	0f 84 12 00 00 00    	je     15cd <main+0x15cd>
                return false;
    15bb:	b9 00 00 00 00       	mov    $0x0,%ecx
    15c0:	88 4d f8             	mov    %cl,-0x8(%rbp)
    15c3:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    15ca:	8f c5                	pop    %rbp
    15cc:	c3                   	ret
            len = 0;
    15cd:	b9 00 00 00 00       	mov    $0x0,%ecx
    15d2:	ff f1                	push   %rcx
    15d4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    15d8:	48 8b c9             	mov    %rcx,%rcx
    15db:	ba 0c 00 00 00       	mov    $0xc,%edx
    15e0:	48 03 ca             	add    %rdx,%rcx
    15e3:	8f c2                	pop    %rdx
    15e5:	89 11                	mov    %edx,(%rcx)
            max = newMax;
    15e7:	8b 4d 18             	mov    0x18(%rbp),%ecx
    15ea:	48 63 c9             	movslq %ecx,%rcx
    15ed:	ff f1                	push   %rcx
    15ef:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    15f3:	48 8b c9             	mov    %rcx,%rcx
    15f6:	ba 08 00 00 00       	mov    $0x8,%edx
    15fb:	48 03 ca             	add    %rdx,%rcx
    15fe:	8f c2                	pop    %rdx
    1600:	89 11                	mov    %edx,(%rcx)
            return true;
    1602:	b9 01 00 00 00       	mov    $0x1,%ecx
    1607:	88 4d f8             	mov    %cl,-0x8(%rbp)
    160a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1611:	8f c5                	pop    %rbp
    1613:	c3                   	ret
    1614:	e9 5a 02 00 00       	jmp    1873 <main+0x1873>
            if newMax < len {
    1619:	8b 4d 18             	mov    0x18(%rbp),%ecx
    161c:	48 63 c9             	movslq %ecx,%rcx
    161f:	ff f1                	push   %rcx
    1621:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1625:	48 8b c9             	mov    %rcx,%rcx
    1628:	8b 51 0c             	mov    0xc(%rcx),%edx
    162b:	8f c1                	pop    %rcx
    162d:	3b ca                	cmp    %edx,%ecx
    162f:	40 0f 9c c1          	rex setl %cl
    1633:	48 0f b6 c9          	movzbq %cl,%rcx
    1637:	48 83 f9 00          	cmp    $0x0,%rcx
    163b:	0f 84 7c 00 00 00    	je     16bd <main+0x16bd>
                for newMax..len {
    1641:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1644:	48 63 c9             	movslq %ecx,%rcx
    1647:	ff f1                	push   %rcx
    1649:	8f c1                	pop    %rcx
    164b:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    1652:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    1655:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1659:	48 8b c9             	mov    %rcx,%rcx
    165c:	8b 51 0c             	mov    0xc(%rcx),%edx
    165f:	ff f2                	push   %rdx
    1661:	8f c1                	pop    %rcx
    1663:	8b 55 f0             	mov    -0x10(%rbp),%edx
    1666:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    166d:	89 55 f0             	mov    %edx,-0x10(%rbp)
    1670:	3b d1                	cmp    %ecx,%edx
    1672:	40 0f 9c c2          	rex setl %dl
    1676:	48 0f b6 d2          	movzbq %dl,%rdx
    167a:	48 83 fa 00          	cmp    $0x0,%rdx
    167e:	0f 84 39 00 00 00    	je     16bd <main+0x16bd>
                    destruct(&ptr[nr])
    1684:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1688:	48 8b c9             	mov    %rcx,%rcx
    168b:	ba 00 00 00 00       	mov    $0x0,%edx
    1690:	48 03 ca             	add    %rdx,%rcx
    1693:	ff f1                	push   %rcx
    1695:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1698:	8f c2                	pop    %rdx
    169a:	48 8b 1a             	mov    (%rdx),%rbx
    169d:	ba 04 00 00 00       	mov    $0x4,%edx
    16a2:	48 8b fa             	mov    %rdx,%rdi
    16a5:	48 8b c1             	mov    %rcx,%rax
    16a8:	48 f7 e7             	mul    %rdi
    16ab:	48 8b c8             	mov    %rax,%rcx
    16ae:	48 8b d7             	mov    %rdi,%rdx
    16b1:	48 03 d9             	add    %rcx,%rbx
    16b4:	33 d2                	xor    %edx,%edx
    16b6:	89 13                	mov    %edx,(%rbx)
    16b8:	e9 98 ff ff ff       	jmp    1655 <main+0x1655>
            new_size := newMax * sizeof T;
    16bd:	8b 4d 18             	mov    0x18(%rbp),%ecx
    16c0:	48 63 c9             	movslq %ecx,%rcx
    16c3:	ff f1                	push   %rcx
    16c5:	b9 04 00 00 00       	mov    $0x4,%ecx
    16ca:	8f c2                	pop    %rdx
    16cc:	0f af d1             	imul   %ecx,%edx
    16cf:	89 55 f0             	mov    %edx,-0x10(%rbp)
            old_size := max * sizeof T;
    16d2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    16d6:	48 8b c9             	mov    %rcx,%rcx
    16d9:	8b 51 08             	mov    0x8(%rcx),%edx
    16dc:	ff f2                	push   %rdx
    16de:	b9 04 00 00 00       	mov    $0x4,%ecx
    16e3:	8f c2                	pop    %rdx
    16e5:	0f af d1             	imul   %ecx,%edx
    16e8:	89 55 e8             	mov    %edx,-0x18(%rbp)
            newPtr: T* = cast_unsafe<T*>Reallocate(new_size, cast_unsafe<void*>ptr, old_size);
    16eb:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    16f2:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    16f5:	48 63 d1             	movslq %ecx,%rdx
    16f8:	ff f2                	push   %rdx
    16fa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    16fe:	48 8b c9             	mov    %rcx,%rcx
    1701:	48 8b 11             	mov    (%rcx),%rdx
    1704:	ff f2                	push   %rdx
    1706:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    1709:	48 63 d1             	movslq %ecx,%rdx
    170c:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    1711:	8f c1                	pop    %rcx
    1713:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    1718:	8f c1                	pop    %rcx
    171a:	48 89 0c 24          	mov    %rcx,(%rsp)
    171e:	e8 d4 62 00 00       	call   79f7 <main+0x79f7>
    1723:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    172a:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    172f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !newPtr
    1733:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1737:	48 85 c9             	test   %rcx,%rcx
    173a:	40 0f 94 c1          	rex sete %cl
    173e:	48 0f b6 c9          	movzbq %cl,%rcx
    1742:	48 83 f9 00          	cmp    $0x0,%rcx
    1746:	0f 84 12 00 00 00    	je     175e <main+0x175e>
                return false;
    174c:	b9 00 00 00 00       	mov    $0x0,%ecx
    1751:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1754:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    175b:	8f c5                	pop    %rbp
    175d:	c3                   	ret
            if newMax > max
    175e:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1761:	48 63 c9             	movslq %ecx,%rcx
    1764:	ff f1                	push   %rcx
    1766:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    176a:	48 8b c9             	mov    %rcx,%rcx
    176d:	8b 51 08             	mov    0x8(%rcx),%edx
    1770:	8f c1                	pop    %rcx
    1772:	3b ca                	cmp    %edx,%ecx
    1774:	40 0f 9f c1          	rex setg %cl
    1778:	48 0f b6 c9          	movzbq %cl,%rcx
    177c:	48 83 f9 00          	cmp    $0x0,%rcx
    1780:	0f 84 63 00 00 00    	je     17e9 <main+0x17e9>
                memzero(cast_unsafe<void*>newPtr + len * sizeof T, (newMax - max) * sizeof T);
    1786:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    178a:	ff f1                	push   %rcx
    178c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1790:	48 8b c9             	mov    %rcx,%rcx
    1793:	8b 51 0c             	mov    0xc(%rcx),%edx
    1796:	ff f2                	push   %rdx
    1798:	b9 04 00 00 00       	mov    $0x4,%ecx
    179d:	8f c2                	pop    %rdx
    179f:	0f af d1             	imul   %ecx,%edx
    17a2:	8f c1                	pop    %rcx
    17a4:	48 03 ca             	add    %rdx,%rcx
    17a7:	ff f1                	push   %rcx
    17a9:	8b 4d 18             	mov    0x18(%rbp),%ecx
    17ac:	48 63 c9             	movslq %ecx,%rcx
    17af:	ff f1                	push   %rcx
    17b1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    17b5:	48 8b c9             	mov    %rcx,%rcx
    17b8:	8b 51 08             	mov    0x8(%rcx),%edx
    17bb:	8f c1                	pop    %rcx
    17bd:	2b ca                	sub    %edx,%ecx
    17bf:	ff f1                	push   %rcx
    17c1:	b9 04 00 00 00       	mov    $0x4,%ecx
    17c6:	8f c2                	pop    %rdx
    17c8:	0f af d1             	imul   %ecx,%edx
    17cb:	48 63 ca             	movslq %edx,%rcx
    17ce:	8f c2                	pop    %rdx
    17d0:	ff f2                	push   %rdx
    17d2:	ff f1                	push   %rcx
    17d4:	48 01 d1             	add    %rdx,%rcx
    17d7:	48 3b ca             	cmp    %rdx,%rcx
    17da:	74 09                	je     17e5 <main+0x17e5>
    17dc:	c6 02 00             	movb   $0x0,(%rdx)
    17df:	48 83 c2 01          	add    $0x1,%rdx
    17e3:	eb f2                	jmp    17d7 <main+0x17d7>
    17e5:	8f c1                	pop    %rcx
    17e7:	8f c2                	pop    %rdx
            ptr = newPtr;
    17e9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    17ed:	ff f1                	push   %rcx
    17ef:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    17f3:	48 8b c9             	mov    %rcx,%rcx
    17f6:	ba 00 00 00 00       	mov    $0x0,%edx
    17fb:	48 03 ca             	add    %rdx,%rcx
    17fe:	8f c2                	pop    %rdx
    1800:	48 89 11             	mov    %rdx,(%rcx)
            max = newMax;
    1803:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1806:	48 63 c9             	movslq %ecx,%rcx
    1809:	ff f1                	push   %rcx
    180b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    180f:	48 8b c9             	mov    %rcx,%rcx
    1812:	ba 08 00 00 00       	mov    $0x8,%edx
    1817:	48 03 ca             	add    %rdx,%rcx
    181a:	8f c2                	pop    %rdx
    181c:	89 11                	mov    %edx,(%rcx)
            if len > newMax {
    181e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1822:	48 8b c9             	mov    %rcx,%rcx
    1825:	8b 51 0c             	mov    0xc(%rcx),%edx
    1828:	ff f2                	push   %rdx
    182a:	8b 4d 18             	mov    0x18(%rbp),%ecx
    182d:	48 63 c9             	movslq %ecx,%rcx
    1830:	8f c2                	pop    %rdx
    1832:	3b d1                	cmp    %ecx,%edx
    1834:	40 0f 9f c2          	rex setg %dl
    1838:	48 0f b6 d2          	movzbq %dl,%rdx
    183c:	48 83 fa 00          	cmp    $0x0,%rdx
    1840:	0f 84 1b 00 00 00    	je     1861 <main+0x1861>
                len = newMax;
    1846:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1849:	48 63 c9             	movslq %ecx,%rcx
    184c:	ff f1                	push   %rcx
    184e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1852:	48 8b c9             	mov    %rcx,%rcx
    1855:	ba 0c 00 00 00       	mov    $0xc,%edx
    185a:	48 03 ca             	add    %rdx,%rcx
    185d:	8f c2                	pop    %rdx
    185f:	89 11                	mov    %edx,(%rcx)
            return true;
    1861:	b9 01 00 00 00       	mov    $0x1,%ecx
    1866:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1869:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1870:	8f c5                	pop    %rbp
    1872:	c3                   	ret
        return false;
    1873:	b9 00 00 00 00       	mov    $0x0,%ecx
    1878:	88 4d f8             	mov    %cl,-0x8(%rbp)
    187b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1882:	8f c5                	pop    %rbp
    1884:	c3                   	ret
    fn reserve(newMax: i32) -> bool {
    1885:	ff f5                	push   %rbp
    1887:	48 8b ec             	mov    %rsp,%rbp
    188a:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        Assert(!is_frozen())
    1891:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    1898:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    189f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    18a3:	48 8b c9             	mov    %rcx,%rcx
    18a6:	48 89 0c 24          	mov    %rcx,(%rsp)
    18aa:	e8 02 0d 00 00       	call   25b1 <main+0x25b1>
    18af:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    18b6:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
    18bb:	48 0f b6 c9          	movzbq %cl,%rcx
    18bf:	48 85 c9             	test   %rcx,%rcx
    18c2:	40 0f 94 c1          	rex sete %cl
    18c6:	48 0f b6 c9          	movzbq %cl,%rcx
    18ca:	ff f1                	push   %rcx
    18cc:	b9 8d 00 00 00       	mov    $0x8d,%ecx
    18d1:	ff f1                	push   %rcx
    18d3:	b9 15 00 00 00       	mov    $0x15,%ecx
    18d8:	ff f1                	push   %rcx
    18da:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 18e1 <main+0x18e1>
    18e1:	ff f1                	push   %rcx
    18e3:	b9 0c 00 00 00       	mov    $0xc,%ecx
    18e8:	ff f1                	push   %rcx
    18ea:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 18f1 <main+0x18f1>
    18f1:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    18f6:	8f c1                	pop    %rcx
    18f8:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    18fd:	8f c1                	pop    %rcx
    18ff:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    1904:	8f c1                	pop    %rcx
    1906:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    190b:	8f c1                	pop    %rcx
    190d:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    1911:	8f c1                	pop    %rcx
    1913:	88 0c 24             	mov    %cl,(%rsp)
    1916:	e8 37 e7 ff ff       	call   52 <main+0x52>
    191b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        if is_frozen()
    1922:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1929:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    192d:	48 8b c9             	mov    %rcx,%rcx
    1930:	48 89 0c 24          	mov    %rcx,(%rsp)
    1934:	e8 78 0c 00 00       	call   25b1 <main+0x25b1>
    1939:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1940:	48 8a 4c 24 e0       	rex.W mov -0x20(%rsp),%cl
    1945:	48 0f b6 c9          	movzbq %cl,%rcx
    1949:	48 83 f9 00          	cmp    $0x0,%rcx
    194d:	0f 84 12 00 00 00    	je     1965 <main+0x1965>
            return false
    1953:	b9 00 00 00 00       	mov    $0x0,%ecx
    1958:	88 4d f8             	mov    %cl,-0x8(%rbp)
    195b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1962:	8f c5                	pop    %rbp
    1964:	c3                   	ret
        if newMax==0 {
    1965:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1968:	48 63 c9             	movslq %ecx,%rcx
    196b:	ff f1                	push   %rcx
    196d:	b9 00 00 00 00       	mov    $0x0,%ecx
    1972:	8f c2                	pop    %rdx
    1974:	3b d1                	cmp    %ecx,%edx
    1976:	40 0f 94 c2          	rex sete %dl
    197a:	48 0f b6 d2          	movzbq %dl,%rdx
    197e:	48 83 fa 00          	cmp    $0x0,%rdx
    1982:	0f 84 5f 01 00 00    	je     1ae7 <main+0x1ae7>
            if max!=0 {
    1988:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    198c:	48 8b c9             	mov    %rcx,%rcx
    198f:	8b 51 08             	mov    0x8(%rcx),%edx
    1992:	ff f2                	push   %rdx
    1994:	b9 00 00 00 00       	mov    $0x0,%ecx
    1999:	8f c2                	pop    %rdx
    199b:	3b d1                	cmp    %ecx,%edx
    199d:	40 0f 95 c2          	rex setne %dl
    19a1:	48 0f b6 d2          	movzbq %dl,%rdx
    19a5:	48 83 fa 00          	cmp    $0x0,%rdx
    19a9:	0f 84 d7 00 00 00    	je     1a86 <main+0x1a86>
                for 0..len {
    19af:	b9 00 00 00 00       	mov    $0x0,%ecx
    19b4:	ff f1                	push   %rcx
    19b6:	8f c1                	pop    %rcx
    19b8:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    19bf:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    19c2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    19c6:	48 8b c9             	mov    %rcx,%rcx
    19c9:	8b 51 0c             	mov    0xc(%rcx),%edx
    19cc:	ff f2                	push   %rdx
    19ce:	8f c1                	pop    %rcx
    19d0:	8b 55 f0             	mov    -0x10(%rbp),%edx
    19d3:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    19da:	89 55 f0             	mov    %edx,-0x10(%rbp)
    19dd:	3b d1                	cmp    %ecx,%edx
    19df:	40 0f 9c c2          	rex setl %dl
    19e3:	48 0f b6 d2          	movzbq %dl,%rdx
    19e7:	48 83 fa 00          	cmp    $0x0,%rdx
    19eb:	0f 84 4c 00 00 00    	je     1a3d <main+0x1a3d>
                    destruct(&ptr[nr])
    19f1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    19f5:	48 8b c9             	mov    %rcx,%rcx
    19f8:	ba 00 00 00 00       	mov    $0x0,%edx
    19fd:	48 03 ca             	add    %rdx,%rcx
    1a00:	ff f1                	push   %rcx
    1a02:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1a05:	8f c2                	pop    %rdx
    1a07:	48 8b 1a             	mov    (%rdx),%rbx
    1a0a:	ba 40 00 00 00       	mov    $0x40,%edx
    1a0f:	48 8b fa             	mov    %rdx,%rdi
    1a12:	48 8b c1             	mov    %rcx,%rax
    1a15:	48 f7 e7             	mul    %rdi
    1a18:	48 8b c8             	mov    %rax,%rcx
    1a1b:	48 8b d7             	mov    %rdi,%rdx
    1a1e:	48 03 d9             	add    %rcx,%rbx
    1a21:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1a28:	48 89 1c 24          	mov    %rbx,(%rsp)
    1a2c:	e8 34 0c 00 00       	call   2665 <main+0x2665>
    1a31:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1a38:	e9 85 ff ff ff       	jmp    19c2 <main+0x19c2>
                bytes := max * sizeof T
    1a3d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1a41:	48 8b c9             	mov    %rcx,%rcx
    1a44:	8b 51 08             	mov    0x8(%rcx),%edx
    1a47:	ff f2                	push   %rdx
    1a49:	b9 40 00 00 00       	mov    $0x40,%ecx
    1a4e:	8f c2                	pop    %rdx
    1a50:	0f af d1             	imul   %ecx,%edx
    1a53:	89 55 f0             	mov    %edx,-0x10(%rbp)
                Free(cast_unsafe<void*>ptr, bytes);
    1a56:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    1a5d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1a61:	48 8b c9             	mov    %rcx,%rcx
    1a64:	48 8b 11             	mov    (%rcx),%rdx
    1a67:	ff f2                	push   %rdx
    1a69:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1a6c:	48 63 d1             	movslq %ecx,%rdx
    1a6f:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    1a74:	8f c1                	pop    %rcx
    1a76:	48 89 0c 24          	mov    %rcx,(%rsp)
    1a7a:	e8 d2 5f 00 00       	call   7a51 <main+0x7a51>
    1a7f:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
            ptr = null;
    1a86:	b9 00 00 00 00       	mov    $0x0,%ecx
    1a8b:	ff f1                	push   %rcx
    1a8d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1a91:	48 8b c9             	mov    %rcx,%rcx
    1a94:	ba 00 00 00 00       	mov    $0x0,%edx
    1a99:	48 03 ca             	add    %rdx,%rcx
    1a9c:	8f c2                	pop    %rdx
    1a9e:	48 89 11             	mov    %rdx,(%rcx)
            max = 0;
    1aa1:	b9 00 00 00 00       	mov    $0x0,%ecx
    1aa6:	ff f1                	push   %rcx
    1aa8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1aac:	48 8b c9             	mov    %rcx,%rcx
    1aaf:	ba 08 00 00 00       	mov    $0x8,%edx
    1ab4:	48 03 ca             	add    %rdx,%rcx
    1ab7:	8f c2                	pop    %rdx
    1ab9:	89 11                	mov    %edx,(%rcx)
            len = 0;
    1abb:	b9 00 00 00 00       	mov    $0x0,%ecx
    1ac0:	ff f1                	push   %rcx
    1ac2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1ac6:	48 8b c9             	mov    %rcx,%rcx
    1ac9:	ba 0c 00 00 00       	mov    $0xc,%edx
    1ace:	48 03 ca             	add    %rdx,%rcx
    1ad1:	8f c2                	pop    %rdx
    1ad3:	89 11                	mov    %edx,(%rcx)
            return true;
    1ad5:	b9 01 00 00 00       	mov    $0x1,%ecx
    1ada:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1add:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1ae4:	8f c5                	pop    %rbp
    1ae6:	c3                   	ret
        if !ptr {
    1ae7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1aeb:	48 8b c9             	mov    %rcx,%rcx
    1aee:	48 8b 11             	mov    (%rcx),%rdx
    1af1:	48 85 d2             	test   %rdx,%rdx
    1af4:	40 0f 94 c2          	rex sete %dl
    1af8:	48 0f b6 d2          	movzbq %dl,%rdx
    1afc:	48 83 fa 00          	cmp    $0x0,%rdx
    1b00:	0f 84 f7 00 00 00    	je     1bfd <main+0x1bfd>
            bytes := newMax * sizeof T
    1b06:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1b09:	48 63 c9             	movslq %ecx,%rcx
    1b0c:	ff f1                	push   %rcx
    1b0e:	b9 40 00 00 00       	mov    $0x40,%ecx
    1b13:	8f c2                	pop    %rdx
    1b15:	0f af d1             	imul   %ecx,%edx
    1b18:	89 55 f0             	mov    %edx,-0x10(%rbp)
            ptr = cast_unsafe<T*>Allocate(bytes);
    1b1b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1b22:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1b25:	48 63 d1             	movslq %ecx,%rdx
    1b28:	48 89 14 24          	mov    %rdx,(%rsp)
    1b2c:	e8 6a 5e 00 00       	call   799b <main+0x799b>
    1b31:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1b38:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    1b3d:	ff f1                	push   %rcx
    1b3f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1b43:	48 8b c9             	mov    %rcx,%rcx
    1b46:	ba 00 00 00 00       	mov    $0x0,%edx
    1b4b:	48 03 ca             	add    %rdx,%rcx
    1b4e:	8f c2                	pop    %rdx
    1b50:	48 89 11             	mov    %rdx,(%rcx)
            memzero(cast_unsafe<void*>ptr, bytes)
    1b53:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1b57:	48 8b c9             	mov    %rcx,%rcx
    1b5a:	48 8b 11             	mov    (%rcx),%rdx
    1b5d:	ff f2                	push   %rdx
    1b5f:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1b62:	48 63 d1             	movslq %ecx,%rdx
    1b65:	8f c1                	pop    %rcx
    1b67:	ff f1                	push   %rcx
    1b69:	ff f2                	push   %rdx
    1b6b:	48 01 ca             	add    %rcx,%rdx
    1b6e:	48 3b d1             	cmp    %rcx,%rdx
    1b71:	74 09                	je     1b7c <main+0x1b7c>
    1b73:	c6 01 00             	movb   $0x0,(%rcx)
    1b76:	48 83 c1 01          	add    $0x1,%rcx
    1b7a:	eb f2                	jmp    1b6e <main+0x1b6e>
    1b7c:	8f c2                	pop    %rdx
    1b7e:	8f c1                	pop    %rcx
            if !ptr
    1b80:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1b84:	48 8b c9             	mov    %rcx,%rcx
    1b87:	48 8b 11             	mov    (%rcx),%rdx
    1b8a:	48 85 d2             	test   %rdx,%rdx
    1b8d:	40 0f 94 c2          	rex sete %dl
    1b91:	48 0f b6 d2          	movzbq %dl,%rdx
    1b95:	48 83 fa 00          	cmp    $0x0,%rdx
    1b99:	0f 84 12 00 00 00    	je     1bb1 <main+0x1bb1>
                return false;
    1b9f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1ba4:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1ba7:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1bae:	8f c5                	pop    %rbp
    1bb0:	c3                   	ret
            len = 0;
    1bb1:	b9 00 00 00 00       	mov    $0x0,%ecx
    1bb6:	ff f1                	push   %rcx
    1bb8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1bbc:	48 8b c9             	mov    %rcx,%rcx
    1bbf:	ba 0c 00 00 00       	mov    $0xc,%edx
    1bc4:	48 03 ca             	add    %rdx,%rcx
    1bc7:	8f c2                	pop    %rdx
    1bc9:	89 11                	mov    %edx,(%rcx)
            max = newMax;
    1bcb:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1bce:	48 63 c9             	movslq %ecx,%rcx
    1bd1:	ff f1                	push   %rcx
    1bd3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1bd7:	48 8b c9             	mov    %rcx,%rcx
    1bda:	ba 08 00 00 00       	mov    $0x8,%edx
    1bdf:	48 03 ca             	add    %rdx,%rcx
    1be2:	8f c2                	pop    %rdx
    1be4:	89 11                	mov    %edx,(%rcx)
            return true;
    1be6:	b9 01 00 00 00       	mov    $0x1,%ecx
    1beb:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1bee:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1bf5:	8f c5                	pop    %rbp
    1bf7:	c3                   	ret
    1bf8:	e9 6d 02 00 00       	jmp    1e6a <main+0x1e6a>
            if newMax < len {
    1bfd:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1c00:	48 63 c9             	movslq %ecx,%rcx
    1c03:	ff f1                	push   %rcx
    1c05:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1c09:	48 8b c9             	mov    %rcx,%rcx
    1c0c:	8b 51 0c             	mov    0xc(%rcx),%edx
    1c0f:	8f c1                	pop    %rcx
    1c11:	3b ca                	cmp    %edx,%ecx
    1c13:	40 0f 9c c1          	rex setl %cl
    1c17:	48 0f b6 c9          	movzbq %cl,%rcx
    1c1b:	48 83 f9 00          	cmp    $0x0,%rcx
    1c1f:	0f 84 8f 00 00 00    	je     1cb4 <main+0x1cb4>
                for newMax..len {
    1c25:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1c28:	48 63 c9             	movslq %ecx,%rcx
    1c2b:	ff f1                	push   %rcx
    1c2d:	8f c1                	pop    %rcx
    1c2f:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    1c36:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    1c39:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1c3d:	48 8b c9             	mov    %rcx,%rcx
    1c40:	8b 51 0c             	mov    0xc(%rcx),%edx
    1c43:	ff f2                	push   %rdx
    1c45:	8f c1                	pop    %rcx
    1c47:	8b 55 f0             	mov    -0x10(%rbp),%edx
    1c4a:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    1c51:	89 55 f0             	mov    %edx,-0x10(%rbp)
    1c54:	3b d1                	cmp    %ecx,%edx
    1c56:	40 0f 9c c2          	rex setl %dl
    1c5a:	48 0f b6 d2          	movzbq %dl,%rdx
    1c5e:	48 83 fa 00          	cmp    $0x0,%rdx
    1c62:	0f 84 4c 00 00 00    	je     1cb4 <main+0x1cb4>
                    destruct(&ptr[nr])
    1c68:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1c6c:	48 8b c9             	mov    %rcx,%rcx
    1c6f:	ba 00 00 00 00       	mov    $0x0,%edx
    1c74:	48 03 ca             	add    %rdx,%rcx
    1c77:	ff f1                	push   %rcx
    1c79:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1c7c:	8f c2                	pop    %rdx
    1c7e:	48 8b 1a             	mov    (%rdx),%rbx
    1c81:	ba 40 00 00 00       	mov    $0x40,%edx
    1c86:	48 8b fa             	mov    %rdx,%rdi
    1c89:	48 8b c1             	mov    %rcx,%rax
    1c8c:	48 f7 e7             	mul    %rdi
    1c8f:	48 8b c8             	mov    %rax,%rcx
    1c92:	48 8b d7             	mov    %rdi,%rdx
    1c95:	48 03 d9             	add    %rcx,%rbx
    1c98:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1c9f:	48 89 1c 24          	mov    %rbx,(%rsp)
    1ca3:	e8 bd 09 00 00       	call   2665 <main+0x2665>
    1ca8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1caf:	e9 85 ff ff ff       	jmp    1c39 <main+0x1c39>
            new_size := newMax * sizeof T;
    1cb4:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1cb7:	48 63 c9             	movslq %ecx,%rcx
    1cba:	ff f1                	push   %rcx
    1cbc:	b9 40 00 00 00       	mov    $0x40,%ecx
    1cc1:	8f c2                	pop    %rdx
    1cc3:	0f af d1             	imul   %ecx,%edx
    1cc6:	89 55 f0             	mov    %edx,-0x10(%rbp)
            old_size := max * sizeof T;
    1cc9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1ccd:	48 8b c9             	mov    %rcx,%rcx
    1cd0:	8b 51 08             	mov    0x8(%rcx),%edx
    1cd3:	ff f2                	push   %rdx
    1cd5:	b9 40 00 00 00       	mov    $0x40,%ecx
    1cda:	8f c2                	pop    %rdx
    1cdc:	0f af d1             	imul   %ecx,%edx
    1cdf:	89 55 e8             	mov    %edx,-0x18(%rbp)
            newPtr: T* = cast_unsafe<T*>Reallocate(new_size, cast_unsafe<void*>ptr, old_size);
    1ce2:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    1ce9:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1cec:	48 63 d1             	movslq %ecx,%rdx
    1cef:	ff f2                	push   %rdx
    1cf1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1cf5:	48 8b c9             	mov    %rcx,%rcx
    1cf8:	48 8b 11             	mov    (%rcx),%rdx
    1cfb:	ff f2                	push   %rdx
    1cfd:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    1d00:	48 63 d1             	movslq %ecx,%rdx
    1d03:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    1d08:	8f c1                	pop    %rcx
    1d0a:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    1d0f:	8f c1                	pop    %rcx
    1d11:	48 89 0c 24          	mov    %rcx,(%rsp)
    1d15:	e8 dd 5c 00 00       	call   79f7 <main+0x79f7>
    1d1a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    1d21:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    1d26:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !newPtr
    1d2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1d2e:	48 85 c9             	test   %rcx,%rcx
    1d31:	40 0f 94 c1          	rex sete %cl
    1d35:	48 0f b6 c9          	movzbq %cl,%rcx
    1d39:	48 83 f9 00          	cmp    $0x0,%rcx
    1d3d:	0f 84 12 00 00 00    	je     1d55 <main+0x1d55>
                return false;
    1d43:	b9 00 00 00 00       	mov    $0x0,%ecx
    1d48:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1d4b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1d52:	8f c5                	pop    %rbp
    1d54:	c3                   	ret
            if newMax > max
    1d55:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1d58:	48 63 c9             	movslq %ecx,%rcx
    1d5b:	ff f1                	push   %rcx
    1d5d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1d61:	48 8b c9             	mov    %rcx,%rcx
    1d64:	8b 51 08             	mov    0x8(%rcx),%edx
    1d67:	8f c1                	pop    %rcx
    1d69:	3b ca                	cmp    %edx,%ecx
    1d6b:	40 0f 9f c1          	rex setg %cl
    1d6f:	48 0f b6 c9          	movzbq %cl,%rcx
    1d73:	48 83 f9 00          	cmp    $0x0,%rcx
    1d77:	0f 84 63 00 00 00    	je     1de0 <main+0x1de0>
                memzero(cast_unsafe<void*>newPtr + len * sizeof T, (newMax - max) * sizeof T);
    1d7d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1d81:	ff f1                	push   %rcx
    1d83:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1d87:	48 8b c9             	mov    %rcx,%rcx
    1d8a:	8b 51 0c             	mov    0xc(%rcx),%edx
    1d8d:	ff f2                	push   %rdx
    1d8f:	b9 40 00 00 00       	mov    $0x40,%ecx
    1d94:	8f c2                	pop    %rdx
    1d96:	0f af d1             	imul   %ecx,%edx
    1d99:	8f c1                	pop    %rcx
    1d9b:	48 03 ca             	add    %rdx,%rcx
    1d9e:	ff f1                	push   %rcx
    1da0:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1da3:	48 63 c9             	movslq %ecx,%rcx
    1da6:	ff f1                	push   %rcx
    1da8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1dac:	48 8b c9             	mov    %rcx,%rcx
    1daf:	8b 51 08             	mov    0x8(%rcx),%edx
    1db2:	8f c1                	pop    %rcx
    1db4:	2b ca                	sub    %edx,%ecx
    1db6:	ff f1                	push   %rcx
    1db8:	b9 40 00 00 00       	mov    $0x40,%ecx
    1dbd:	8f c2                	pop    %rdx
    1dbf:	0f af d1             	imul   %ecx,%edx
    1dc2:	48 63 ca             	movslq %edx,%rcx
    1dc5:	8f c2                	pop    %rdx
    1dc7:	ff f2                	push   %rdx
    1dc9:	ff f1                	push   %rcx
    1dcb:	48 01 d1             	add    %rdx,%rcx
    1dce:	48 3b ca             	cmp    %rdx,%rcx
    1dd1:	74 09                	je     1ddc <main+0x1ddc>
    1dd3:	c6 02 00             	movb   $0x0,(%rdx)
    1dd6:	48 83 c2 01          	add    $0x1,%rdx
    1dda:	eb f2                	jmp    1dce <main+0x1dce>
    1ddc:	8f c1                	pop    %rcx
    1dde:	8f c2                	pop    %rdx
            ptr = newPtr;
    1de0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1de4:	ff f1                	push   %rcx
    1de6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1dea:	48 8b c9             	mov    %rcx,%rcx
    1ded:	ba 00 00 00 00       	mov    $0x0,%edx
    1df2:	48 03 ca             	add    %rdx,%rcx
    1df5:	8f c2                	pop    %rdx
    1df7:	48 89 11             	mov    %rdx,(%rcx)
            max = newMax;
    1dfa:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1dfd:	48 63 c9             	movslq %ecx,%rcx
    1e00:	ff f1                	push   %rcx
    1e02:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1e06:	48 8b c9             	mov    %rcx,%rcx
    1e09:	ba 08 00 00 00       	mov    $0x8,%edx
    1e0e:	48 03 ca             	add    %rdx,%rcx
    1e11:	8f c2                	pop    %rdx
    1e13:	89 11                	mov    %edx,(%rcx)
            if len > newMax {
    1e15:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1e19:	48 8b c9             	mov    %rcx,%rcx
    1e1c:	8b 51 0c             	mov    0xc(%rcx),%edx
    1e1f:	ff f2                	push   %rdx
    1e21:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1e24:	48 63 c9             	movslq %ecx,%rcx
    1e27:	8f c2                	pop    %rdx
    1e29:	3b d1                	cmp    %ecx,%edx
    1e2b:	40 0f 9f c2          	rex setg %dl
    1e2f:	48 0f b6 d2          	movzbq %dl,%rdx
    1e33:	48 83 fa 00          	cmp    $0x0,%rdx
    1e37:	0f 84 1b 00 00 00    	je     1e58 <main+0x1e58>
                len = newMax;
    1e3d:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1e40:	48 63 c9             	movslq %ecx,%rcx
    1e43:	ff f1                	push   %rcx
    1e45:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1e49:	48 8b c9             	mov    %rcx,%rcx
    1e4c:	ba 0c 00 00 00       	mov    $0xc,%edx
    1e51:	48 03 ca             	add    %rdx,%rcx
    1e54:	8f c2                	pop    %rdx
    1e56:	89 11                	mov    %edx,(%rcx)
            return true;
    1e58:	b9 01 00 00 00       	mov    $0x1,%ecx
    1e5d:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1e60:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1e67:	8f c5                	pop    %rbp
    1e69:	c3                   	ret
        return false;
    1e6a:	b9 00 00 00 00       	mov    $0x0,%ecx
    1e6f:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1e72:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1e79:	8f c5                	pop    %rbp
    1e7b:	c3                   	ret
    fn reserve(newMax: i32) -> bool {
    1e7c:	ff f5                	push   %rbp
    1e7e:	48 8b ec             	mov    %rsp,%rbp
    1e81:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        Assert(!is_frozen())
    1e88:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    1e8f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    1e96:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1e9a:	48 8b c9             	mov    %rcx,%rcx
    1e9d:	48 89 0c 24          	mov    %rcx,(%rsp)
    1ea1:	e8 65 07 00 00       	call   260b <main+0x260b>
    1ea6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    1ead:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
    1eb2:	48 0f b6 c9          	movzbq %cl,%rcx
    1eb6:	48 85 c9             	test   %rcx,%rcx
    1eb9:	40 0f 94 c1          	rex sete %cl
    1ebd:	48 0f b6 c9          	movzbq %cl,%rcx
    1ec1:	ff f1                	push   %rcx
    1ec3:	b9 8d 00 00 00       	mov    $0x8d,%ecx
    1ec8:	ff f1                	push   %rcx
    1eca:	b9 15 00 00 00       	mov    $0x15,%ecx
    1ecf:	ff f1                	push   %rcx
    1ed1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1ed8 <main+0x1ed8>
    1ed8:	ff f1                	push   %rcx
    1eda:	b9 0c 00 00 00       	mov    $0xc,%ecx
    1edf:	ff f1                	push   %rcx
    1ee1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1ee8 <main+0x1ee8>
    1ee8:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    1eed:	8f c1                	pop    %rcx
    1eef:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    1ef4:	8f c1                	pop    %rcx
    1ef6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    1efb:	8f c1                	pop    %rcx
    1efd:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    1f02:	8f c1                	pop    %rcx
    1f04:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    1f08:	8f c1                	pop    %rcx
    1f0a:	88 0c 24             	mov    %cl,(%rsp)
    1f0d:	e8 40 e1 ff ff       	call   52 <main+0x52>
    1f12:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        if is_frozen()
    1f19:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    1f20:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1f24:	48 8b c9             	mov    %rcx,%rcx
    1f27:	48 89 0c 24          	mov    %rcx,(%rsp)
    1f2b:	e8 db 06 00 00       	call   260b <main+0x260b>
    1f30:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    1f37:	48 8a 4c 24 e0       	rex.W mov -0x20(%rsp),%cl
    1f3c:	48 0f b6 c9          	movzbq %cl,%rcx
    1f40:	48 83 f9 00          	cmp    $0x0,%rcx
    1f44:	0f 84 12 00 00 00    	je     1f5c <main+0x1f5c>
            return false
    1f4a:	b9 00 00 00 00       	mov    $0x0,%ecx
    1f4f:	88 4d f8             	mov    %cl,-0x8(%rbp)
    1f52:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    1f59:	8f c5                	pop    %rbp
    1f5b:	c3                   	ret
        if newMax==0 {
    1f5c:	8b 4d 18             	mov    0x18(%rbp),%ecx
    1f5f:	48 63 c9             	movslq %ecx,%rcx
    1f62:	ff f1                	push   %rcx
    1f64:	b9 00 00 00 00       	mov    $0x0,%ecx
    1f69:	8f c2                	pop    %rdx
    1f6b:	3b d1                	cmp    %ecx,%edx
    1f6d:	40 0f 94 c2          	rex sete %dl
    1f71:	48 0f b6 d2          	movzbq %dl,%rdx
    1f75:	48 83 fa 00          	cmp    $0x0,%rdx
    1f79:	0f 84 a4 01 00 00    	je     2123 <main+0x2123>
            if max!=0 {
    1f7f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1f83:	48 8b c9             	mov    %rcx,%rcx
    1f86:	8b 51 08             	mov    0x8(%rcx),%edx
    1f89:	ff f2                	push   %rdx
    1f8b:	b9 00 00 00 00       	mov    $0x0,%ecx
    1f90:	8f c2                	pop    %rdx
    1f92:	3b d1                	cmp    %ecx,%edx
    1f94:	40 0f 95 c2          	rex setne %dl
    1f98:	48 0f b6 d2          	movzbq %dl,%rdx
    1f9c:	48 83 fa 00          	cmp    $0x0,%rdx
    1fa0:	0f 84 1c 01 00 00    	je     20c2 <main+0x20c2>
                for 0..len {
    1fa6:	b9 00 00 00 00       	mov    $0x0,%ecx
    1fab:	ff f1                	push   %rcx
    1fad:	8f c1                	pop    %rcx
    1faf:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    1fb6:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    1fb9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1fbd:	48 8b c9             	mov    %rcx,%rcx
    1fc0:	8b 51 0c             	mov    0xc(%rcx),%edx
    1fc3:	ff f2                	push   %rdx
    1fc5:	8f c1                	pop    %rcx
    1fc7:	8b 55 f0             	mov    -0x10(%rbp),%edx
    1fca:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    1fd1:	89 55 f0             	mov    %edx,-0x10(%rbp)
    1fd4:	3b d1                	cmp    %ecx,%edx
    1fd6:	40 0f 9c c2          	rex setl %dl
    1fda:	48 0f b6 d2          	movzbq %dl,%rdx
    1fde:	48 83 fa 00          	cmp    $0x0,%rdx
    1fe2:	0f 84 91 00 00 00    	je     2079 <main+0x2079>
                    destruct(&ptr[nr])
    1fe8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    1fec:	48 8b c9             	mov    %rcx,%rcx
    1fef:	ba 00 00 00 00       	mov    $0x0,%edx
    1ff4:	48 03 ca             	add    %rdx,%rcx
    1ff7:	ff f1                	push   %rcx
    1ff9:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    1ffc:	8f c2                	pop    %rdx
    1ffe:	48 8b 1a             	mov    (%rdx),%rbx
    2001:	ba 0c 00 00 00       	mov    $0xc,%edx
    2006:	48 8b fa             	mov    %rdx,%rdi
    2009:	48 8b c1             	mov    %rcx,%rax
    200c:	48 f7 e7             	mul    %rdi
    200f:	48 8b c8             	mov    %rax,%rcx
    2012:	48 8b d7             	mov    %rdi,%rdx
    2015:	48 03 d9             	add    %rcx,%rbx
    2018:	b9 0c 00 00 00       	mov    $0xc,%ecx
    201d:	ff f3                	push   %rbx
    201f:	ff f1                	push   %rcx
    2021:	48 01 d9             	add    %rbx,%rcx
    2024:	48 3b cb             	cmp    %rbx,%rcx
    2027:	74 0c                	je     2035 <main+0x2035>
    2029:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    202f:	48 83 c3 04          	add    $0x4,%rbx
    2033:	eb ef                	jmp    2024 <main+0x2024>
    2035:	8f c1                	pop    %rcx
    2037:	8f c3                	pop    %rbx
    2039:	b9 00 00 00 00       	mov    $0x0,%ecx
    203e:	48 63 d1             	movslq %ecx,%rdx
    2041:	88 53 08             	mov    %dl,0x8(%rbx)
    2044:	b9 00 00 00 00       	mov    $0x0,%ecx
    2049:	48 63 d1             	movslq %ecx,%rdx
    204c:	88 53 07             	mov    %dl,0x7(%rbx)
    204f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2054:	48 63 d1             	movslq %ecx,%rdx
    2057:	88 53 06             	mov    %dl,0x6(%rbx)
    205a:	b9 00 00 00 00       	mov    $0x0,%ecx
    205f:	48 63 d1             	movslq %ecx,%rdx
    2062:	88 53 05             	mov    %dl,0x5(%rbx)
    2065:	b9 00 00 00 00       	mov    $0x0,%ecx
    206a:	88 4b 04             	mov    %cl,0x4(%rbx)
    206d:	b9 00 00 00 00       	mov    $0x0,%ecx
    2072:	89 0b                	mov    %ecx,(%rbx)
    2074:	e9 40 ff ff ff       	jmp    1fb9 <main+0x1fb9>
                bytes := max * sizeof T
    2079:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    207d:	48 8b c9             	mov    %rcx,%rcx
    2080:	8b 51 08             	mov    0x8(%rcx),%edx
    2083:	ff f2                	push   %rdx
    2085:	b9 0c 00 00 00       	mov    $0xc,%ecx
    208a:	8f c2                	pop    %rdx
    208c:	0f af d1             	imul   %ecx,%edx
    208f:	89 55 f0             	mov    %edx,-0x10(%rbp)
                Free(cast_unsafe<void*>ptr, bytes);
    2092:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2099:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    209d:	48 8b c9             	mov    %rcx,%rcx
    20a0:	48 8b 11             	mov    (%rcx),%rdx
    20a3:	ff f2                	push   %rdx
    20a5:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    20a8:	48 63 d1             	movslq %ecx,%rdx
    20ab:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    20b0:	8f c1                	pop    %rcx
    20b2:	48 89 0c 24          	mov    %rcx,(%rsp)
    20b6:	e8 96 59 00 00       	call   7a51 <main+0x7a51>
    20bb:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
            ptr = null;
    20c2:	b9 00 00 00 00       	mov    $0x0,%ecx
    20c7:	ff f1                	push   %rcx
    20c9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    20cd:	48 8b c9             	mov    %rcx,%rcx
    20d0:	ba 00 00 00 00       	mov    $0x0,%edx
    20d5:	48 03 ca             	add    %rdx,%rcx
    20d8:	8f c2                	pop    %rdx
    20da:	48 89 11             	mov    %rdx,(%rcx)
            max = 0;
    20dd:	b9 00 00 00 00       	mov    $0x0,%ecx
    20e2:	ff f1                	push   %rcx
    20e4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    20e8:	48 8b c9             	mov    %rcx,%rcx
    20eb:	ba 08 00 00 00       	mov    $0x8,%edx
    20f0:	48 03 ca             	add    %rdx,%rcx
    20f3:	8f c2                	pop    %rdx
    20f5:	89 11                	mov    %edx,(%rcx)
            len = 0;
    20f7:	b9 00 00 00 00       	mov    $0x0,%ecx
    20fc:	ff f1                	push   %rcx
    20fe:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2102:	48 8b c9             	mov    %rcx,%rcx
    2105:	ba 0c 00 00 00       	mov    $0xc,%edx
    210a:	48 03 ca             	add    %rdx,%rcx
    210d:	8f c2                	pop    %rdx
    210f:	89 11                	mov    %edx,(%rcx)
            return true;
    2111:	b9 01 00 00 00       	mov    $0x1,%ecx
    2116:	88 4d f8             	mov    %cl,-0x8(%rbp)
    2119:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2120:	8f c5                	pop    %rbp
    2122:	c3                   	ret
        if !ptr {
    2123:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2127:	48 8b c9             	mov    %rcx,%rcx
    212a:	48 8b 11             	mov    (%rcx),%rdx
    212d:	48 85 d2             	test   %rdx,%rdx
    2130:	40 0f 94 c2          	rex sete %dl
    2134:	48 0f b6 d2          	movzbq %dl,%rdx
    2138:	48 83 fa 00          	cmp    $0x0,%rdx
    213c:	0f 84 f7 00 00 00    	je     2239 <main+0x2239>
            bytes := newMax * sizeof T
    2142:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2145:	48 63 c9             	movslq %ecx,%rcx
    2148:	ff f1                	push   %rcx
    214a:	b9 0c 00 00 00       	mov    $0xc,%ecx
    214f:	8f c2                	pop    %rdx
    2151:	0f af d1             	imul   %ecx,%edx
    2154:	89 55 f0             	mov    %edx,-0x10(%rbp)
            ptr = cast_unsafe<T*>Allocate(bytes);
    2157:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    215e:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2161:	48 63 d1             	movslq %ecx,%rdx
    2164:	48 89 14 24          	mov    %rdx,(%rsp)
    2168:	e8 2e 58 00 00       	call   799b <main+0x799b>
    216d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    2174:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    2179:	ff f1                	push   %rcx
    217b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    217f:	48 8b c9             	mov    %rcx,%rcx
    2182:	ba 00 00 00 00       	mov    $0x0,%edx
    2187:	48 03 ca             	add    %rdx,%rcx
    218a:	8f c2                	pop    %rdx
    218c:	48 89 11             	mov    %rdx,(%rcx)
            memzero(cast_unsafe<void*>ptr, bytes)
    218f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2193:	48 8b c9             	mov    %rcx,%rcx
    2196:	48 8b 11             	mov    (%rcx),%rdx
    2199:	ff f2                	push   %rdx
    219b:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    219e:	48 63 d1             	movslq %ecx,%rdx
    21a1:	8f c1                	pop    %rcx
    21a3:	ff f1                	push   %rcx
    21a5:	ff f2                	push   %rdx
    21a7:	48 01 ca             	add    %rcx,%rdx
    21aa:	48 3b d1             	cmp    %rcx,%rdx
    21ad:	74 09                	je     21b8 <main+0x21b8>
    21af:	c6 01 00             	movb   $0x0,(%rcx)
    21b2:	48 83 c1 01          	add    $0x1,%rcx
    21b6:	eb f2                	jmp    21aa <main+0x21aa>
    21b8:	8f c2                	pop    %rdx
    21ba:	8f c1                	pop    %rcx
            if !ptr
    21bc:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    21c0:	48 8b c9             	mov    %rcx,%rcx
    21c3:	48 8b 11             	mov    (%rcx),%rdx
    21c6:	48 85 d2             	test   %rdx,%rdx
    21c9:	40 0f 94 c2          	rex sete %dl
    21cd:	48 0f b6 d2          	movzbq %dl,%rdx
    21d1:	48 83 fa 00          	cmp    $0x0,%rdx
    21d5:	0f 84 12 00 00 00    	je     21ed <main+0x21ed>
                return false;
    21db:	b9 00 00 00 00       	mov    $0x0,%ecx
    21e0:	88 4d f8             	mov    %cl,-0x8(%rbp)
    21e3:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    21ea:	8f c5                	pop    %rbp
    21ec:	c3                   	ret
            len = 0;
    21ed:	b9 00 00 00 00       	mov    $0x0,%ecx
    21f2:	ff f1                	push   %rcx
    21f4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    21f8:	48 8b c9             	mov    %rcx,%rcx
    21fb:	ba 0c 00 00 00       	mov    $0xc,%edx
    2200:	48 03 ca             	add    %rdx,%rcx
    2203:	8f c2                	pop    %rdx
    2205:	89 11                	mov    %edx,(%rcx)
            max = newMax;
    2207:	8b 4d 18             	mov    0x18(%rbp),%ecx
    220a:	48 63 c9             	movslq %ecx,%rcx
    220d:	ff f1                	push   %rcx
    220f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2213:	48 8b c9             	mov    %rcx,%rcx
    2216:	ba 08 00 00 00       	mov    $0x8,%edx
    221b:	48 03 ca             	add    %rdx,%rcx
    221e:	8f c2                	pop    %rdx
    2220:	89 11                	mov    %edx,(%rcx)
            return true;
    2222:	b9 01 00 00 00       	mov    $0x1,%ecx
    2227:	88 4d f8             	mov    %cl,-0x8(%rbp)
    222a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2231:	8f c5                	pop    %rbp
    2233:	c3                   	ret
    2234:	e9 b2 02 00 00       	jmp    24eb <main+0x24eb>
            if newMax < len {
    2239:	8b 4d 18             	mov    0x18(%rbp),%ecx
    223c:	48 63 c9             	movslq %ecx,%rcx
    223f:	ff f1                	push   %rcx
    2241:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2245:	48 8b c9             	mov    %rcx,%rcx
    2248:	8b 51 0c             	mov    0xc(%rcx),%edx
    224b:	8f c1                	pop    %rcx
    224d:	3b ca                	cmp    %edx,%ecx
    224f:	40 0f 9c c1          	rex setl %cl
    2253:	48 0f b6 c9          	movzbq %cl,%rcx
    2257:	48 83 f9 00          	cmp    $0x0,%rcx
    225b:	0f 84 d4 00 00 00    	je     2335 <main+0x2335>
                for newMax..len {
    2261:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2264:	48 63 c9             	movslq %ecx,%rcx
    2267:	ff f1                	push   %rcx
    2269:	8f c1                	pop    %rcx
    226b:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    2272:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    2275:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2279:	48 8b c9             	mov    %rcx,%rcx
    227c:	8b 51 0c             	mov    0xc(%rcx),%edx
    227f:	ff f2                	push   %rdx
    2281:	8f c1                	pop    %rcx
    2283:	8b 55 f0             	mov    -0x10(%rbp),%edx
    2286:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    228d:	89 55 f0             	mov    %edx,-0x10(%rbp)
    2290:	3b d1                	cmp    %ecx,%edx
    2292:	40 0f 9c c2          	rex setl %dl
    2296:	48 0f b6 d2          	movzbq %dl,%rdx
    229a:	48 83 fa 00          	cmp    $0x0,%rdx
    229e:	0f 84 91 00 00 00    	je     2335 <main+0x2335>
                    destruct(&ptr[nr])
    22a4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    22a8:	48 8b c9             	mov    %rcx,%rcx
    22ab:	ba 00 00 00 00       	mov    $0x0,%edx
    22b0:	48 03 ca             	add    %rdx,%rcx
    22b3:	ff f1                	push   %rcx
    22b5:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    22b8:	8f c2                	pop    %rdx
    22ba:	48 8b 1a             	mov    (%rdx),%rbx
    22bd:	ba 0c 00 00 00       	mov    $0xc,%edx
    22c2:	48 8b fa             	mov    %rdx,%rdi
    22c5:	48 8b c1             	mov    %rcx,%rax
    22c8:	48 f7 e7             	mul    %rdi
    22cb:	48 8b c8             	mov    %rax,%rcx
    22ce:	48 8b d7             	mov    %rdi,%rdx
    22d1:	48 03 d9             	add    %rcx,%rbx
    22d4:	b9 0c 00 00 00       	mov    $0xc,%ecx
    22d9:	ff f3                	push   %rbx
    22db:	ff f1                	push   %rcx
    22dd:	48 01 d9             	add    %rbx,%rcx
    22e0:	48 3b cb             	cmp    %rbx,%rcx
    22e3:	74 0c                	je     22f1 <main+0x22f1>
    22e5:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
    22eb:	48 83 c3 04          	add    $0x4,%rbx
    22ef:	eb ef                	jmp    22e0 <main+0x22e0>
    22f1:	8f c1                	pop    %rcx
    22f3:	8f c3                	pop    %rbx
    22f5:	b9 00 00 00 00       	mov    $0x0,%ecx
    22fa:	48 63 d1             	movslq %ecx,%rdx
    22fd:	88 53 08             	mov    %dl,0x8(%rbx)
    2300:	b9 00 00 00 00       	mov    $0x0,%ecx
    2305:	48 63 d1             	movslq %ecx,%rdx
    2308:	88 53 07             	mov    %dl,0x7(%rbx)
    230b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2310:	48 63 d1             	movslq %ecx,%rdx
    2313:	88 53 06             	mov    %dl,0x6(%rbx)
    2316:	b9 00 00 00 00       	mov    $0x0,%ecx
    231b:	48 63 d1             	movslq %ecx,%rdx
    231e:	88 53 05             	mov    %dl,0x5(%rbx)
    2321:	b9 00 00 00 00       	mov    $0x0,%ecx
    2326:	88 4b 04             	mov    %cl,0x4(%rbx)
    2329:	b9 00 00 00 00       	mov    $0x0,%ecx
    232e:	89 0b                	mov    %ecx,(%rbx)
    2330:	e9 40 ff ff ff       	jmp    2275 <main+0x2275>
            new_size := newMax * sizeof T;
    2335:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2338:	48 63 c9             	movslq %ecx,%rcx
    233b:	ff f1                	push   %rcx
    233d:	b9 0c 00 00 00       	mov    $0xc,%ecx
    2342:	8f c2                	pop    %rdx
    2344:	0f af d1             	imul   %ecx,%edx
    2347:	89 55 f0             	mov    %edx,-0x10(%rbp)
            old_size := max * sizeof T;
    234a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    234e:	48 8b c9             	mov    %rcx,%rcx
    2351:	8b 51 08             	mov    0x8(%rcx),%edx
    2354:	ff f2                	push   %rdx
    2356:	b9 0c 00 00 00       	mov    $0xc,%ecx
    235b:	8f c2                	pop    %rdx
    235d:	0f af d1             	imul   %ecx,%edx
    2360:	89 55 e8             	mov    %edx,-0x18(%rbp)
            newPtr: T* = cast_unsafe<T*>Reallocate(new_size, cast_unsafe<void*>ptr, old_size);
    2363:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    236a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    236d:	48 63 d1             	movslq %ecx,%rdx
    2370:	ff f2                	push   %rdx
    2372:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2376:	48 8b c9             	mov    %rcx,%rcx
    2379:	48 8b 11             	mov    (%rcx),%rdx
    237c:	ff f2                	push   %rdx
    237e:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    2381:	48 63 d1             	movslq %ecx,%rdx
    2384:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    2389:	8f c1                	pop    %rcx
    238b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    2390:	8f c1                	pop    %rcx
    2392:	48 89 0c 24          	mov    %rcx,(%rsp)
    2396:	e8 5c 56 00 00       	call   79f7 <main+0x79f7>
    239b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    23a2:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    23a7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !newPtr
    23ab:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    23af:	48 85 c9             	test   %rcx,%rcx
    23b2:	40 0f 94 c1          	rex sete %cl
    23b6:	48 0f b6 c9          	movzbq %cl,%rcx
    23ba:	48 83 f9 00          	cmp    $0x0,%rcx
    23be:	0f 84 12 00 00 00    	je     23d6 <main+0x23d6>
                return false;
    23c4:	b9 00 00 00 00       	mov    $0x0,%ecx
    23c9:	88 4d f8             	mov    %cl,-0x8(%rbp)
    23cc:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    23d3:	8f c5                	pop    %rbp
    23d5:	c3                   	ret
            if newMax > max
    23d6:	8b 4d 18             	mov    0x18(%rbp),%ecx
    23d9:	48 63 c9             	movslq %ecx,%rcx
    23dc:	ff f1                	push   %rcx
    23de:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    23e2:	48 8b c9             	mov    %rcx,%rcx
    23e5:	8b 51 08             	mov    0x8(%rcx),%edx
    23e8:	8f c1                	pop    %rcx
    23ea:	3b ca                	cmp    %edx,%ecx
    23ec:	40 0f 9f c1          	rex setg %cl
    23f0:	48 0f b6 c9          	movzbq %cl,%rcx
    23f4:	48 83 f9 00          	cmp    $0x0,%rcx
    23f8:	0f 84 63 00 00 00    	je     2461 <main+0x2461>
                memzero(cast_unsafe<void*>newPtr + len * sizeof T, (newMax - max) * sizeof T);
    23fe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2402:	ff f1                	push   %rcx
    2404:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2408:	48 8b c9             	mov    %rcx,%rcx
    240b:	8b 51 0c             	mov    0xc(%rcx),%edx
    240e:	ff f2                	push   %rdx
    2410:	b9 0c 00 00 00       	mov    $0xc,%ecx
    2415:	8f c2                	pop    %rdx
    2417:	0f af d1             	imul   %ecx,%edx
    241a:	8f c1                	pop    %rcx
    241c:	48 03 ca             	add    %rdx,%rcx
    241f:	ff f1                	push   %rcx
    2421:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2424:	48 63 c9             	movslq %ecx,%rcx
    2427:	ff f1                	push   %rcx
    2429:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    242d:	48 8b c9             	mov    %rcx,%rcx
    2430:	8b 51 08             	mov    0x8(%rcx),%edx
    2433:	8f c1                	pop    %rcx
    2435:	2b ca                	sub    %edx,%ecx
    2437:	ff f1                	push   %rcx
    2439:	b9 0c 00 00 00       	mov    $0xc,%ecx
    243e:	8f c2                	pop    %rdx
    2440:	0f af d1             	imul   %ecx,%edx
    2443:	48 63 ca             	movslq %edx,%rcx
    2446:	8f c2                	pop    %rdx
    2448:	ff f2                	push   %rdx
    244a:	ff f1                	push   %rcx
    244c:	48 01 d1             	add    %rdx,%rcx
    244f:	48 3b ca             	cmp    %rdx,%rcx
    2452:	74 09                	je     245d <main+0x245d>
    2454:	c6 02 00             	movb   $0x0,(%rdx)
    2457:	48 83 c2 01          	add    $0x1,%rdx
    245b:	eb f2                	jmp    244f <main+0x244f>
    245d:	8f c1                	pop    %rcx
    245f:	8f c2                	pop    %rdx
            ptr = newPtr;
    2461:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2465:	ff f1                	push   %rcx
    2467:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    246b:	48 8b c9             	mov    %rcx,%rcx
    246e:	ba 00 00 00 00       	mov    $0x0,%edx
    2473:	48 03 ca             	add    %rdx,%rcx
    2476:	8f c2                	pop    %rdx
    2478:	48 89 11             	mov    %rdx,(%rcx)
            max = newMax;
    247b:	8b 4d 18             	mov    0x18(%rbp),%ecx
    247e:	48 63 c9             	movslq %ecx,%rcx
    2481:	ff f1                	push   %rcx
    2483:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2487:	48 8b c9             	mov    %rcx,%rcx
    248a:	ba 08 00 00 00       	mov    $0x8,%edx
    248f:	48 03 ca             	add    %rdx,%rcx
    2492:	8f c2                	pop    %rdx
    2494:	89 11                	mov    %edx,(%rcx)
            if len > newMax {
    2496:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    249a:	48 8b c9             	mov    %rcx,%rcx
    249d:	8b 51 0c             	mov    0xc(%rcx),%edx
    24a0:	ff f2                	push   %rdx
    24a2:	8b 4d 18             	mov    0x18(%rbp),%ecx
    24a5:	48 63 c9             	movslq %ecx,%rcx
    24a8:	8f c2                	pop    %rdx
    24aa:	3b d1                	cmp    %ecx,%edx
    24ac:	40 0f 9f c2          	rex setg %dl
    24b0:	48 0f b6 d2          	movzbq %dl,%rdx
    24b4:	48 83 fa 00          	cmp    $0x0,%rdx
    24b8:	0f 84 1b 00 00 00    	je     24d9 <main+0x24d9>
                len = newMax;
    24be:	8b 4d 18             	mov    0x18(%rbp),%ecx
    24c1:	48 63 c9             	movslq %ecx,%rcx
    24c4:	ff f1                	push   %rcx
    24c6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    24ca:	48 8b c9             	mov    %rcx,%rcx
    24cd:	ba 0c 00 00 00       	mov    $0xc,%edx
    24d2:	48 03 ca             	add    %rdx,%rcx
    24d5:	8f c2                	pop    %rdx
    24d7:	89 11                	mov    %edx,(%rcx)
            return true;
    24d9:	b9 01 00 00 00       	mov    $0x1,%ecx
    24de:	88 4d f8             	mov    %cl,-0x8(%rbp)
    24e1:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    24e8:	8f c5                	pop    %rbp
    24ea:	c3                   	ret
        return false;
    24eb:	b9 00 00 00 00       	mov    $0x0,%ecx
    24f0:	88 4d f8             	mov    %cl,-0x8(%rbp)
    24f3:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    24fa:	8f c5                	pop    %rbp
    24fc:	c3                   	ret
        iter.index++
        iter.value = &ptr[iter.index]
        return true
    }
    
    fn is_frozen() -> bool {
    24fd:	ff f5                	push   %rbp
    24ff:	48 8b ec             	mov    %rsp,%rbp
    2502:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        return ptr && max == 0
    2509:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    250d:	48 8b c9             	mov    %rcx,%rcx
    2510:	48 8b 11             	mov    (%rcx),%rdx
    2513:	ff f2                	push   %rdx
    2515:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2519:	48 8b c9             	mov    %rcx,%rcx
    251c:	8b 51 08             	mov    0x8(%rcx),%edx
    251f:	ff f2                	push   %rdx
    2521:	b9 00 00 00 00       	mov    $0x0,%ecx
    2526:	8f c2                	pop    %rdx
    2528:	3b d1                	cmp    %ecx,%edx
    252a:	40 0f 94 c2          	rex sete %dl
    252e:	48 0f b6 d2          	movzbq %dl,%rdx
    2532:	8f c1                	pop    %rcx
    2534:	48 85 c9             	test   %rcx,%rcx
    2537:	74 0a                	je     2543 <main+0x2543>
    2539:	48 85 d2             	test   %rdx,%rdx
    253c:	74 05                	je     2543 <main+0x2543>
    253e:	c6 c1 01             	mov    $0x1,%cl
    2541:	eb 03                	jmp    2546 <main+0x2546>
    2543:	c6 c1 00             	mov    $0x0,%cl
    2546:	48 0f b6 c9          	movzbq %cl,%rcx
    254a:	88 4d f8             	mov    %cl,-0x8(%rbp)
    254d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2554:	8f c5                	pop    %rbp
    2556:	c3                   	ret
    fn is_frozen() -> bool {
    2557:	ff f5                	push   %rbp
    2559:	48 8b ec             	mov    %rsp,%rbp
    255c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        return ptr && max == 0
    2563:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2567:	48 8b c9             	mov    %rcx,%rcx
    256a:	48 8b 11             	mov    (%rcx),%rdx
    256d:	ff f2                	push   %rdx
    256f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2573:	48 8b c9             	mov    %rcx,%rcx
    2576:	8b 51 08             	mov    0x8(%rcx),%edx
    2579:	ff f2                	push   %rdx
    257b:	b9 00 00 00 00       	mov    $0x0,%ecx
    2580:	8f c2                	pop    %rdx
    2582:	3b d1                	cmp    %ecx,%edx
    2584:	40 0f 94 c2          	rex sete %dl
    2588:	48 0f b6 d2          	movzbq %dl,%rdx
    258c:	8f c1                	pop    %rcx
    258e:	48 85 c9             	test   %rcx,%rcx
    2591:	74 0a                	je     259d <main+0x259d>
    2593:	48 85 d2             	test   %rdx,%rdx
    2596:	74 05                	je     259d <main+0x259d>
    2598:	c6 c1 01             	mov    $0x1,%cl
    259b:	eb 03                	jmp    25a0 <main+0x25a0>
    259d:	c6 c1 00             	mov    $0x0,%cl
    25a0:	48 0f b6 c9          	movzbq %cl,%rcx
    25a4:	88 4d f8             	mov    %cl,-0x8(%rbp)
    25a7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    25ae:	8f c5                	pop    %rbp
    25b0:	c3                   	ret
    fn is_frozen() -> bool {
    25b1:	ff f5                	push   %rbp
    25b3:	48 8b ec             	mov    %rsp,%rbp
    25b6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        return ptr && max == 0
    25bd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    25c1:	48 8b c9             	mov    %rcx,%rcx
    25c4:	48 8b 11             	mov    (%rcx),%rdx
    25c7:	ff f2                	push   %rdx
    25c9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    25cd:	48 8b c9             	mov    %rcx,%rcx
    25d0:	8b 51 08             	mov    0x8(%rcx),%edx
    25d3:	ff f2                	push   %rdx
    25d5:	b9 00 00 00 00       	mov    $0x0,%ecx
    25da:	8f c2                	pop    %rdx
    25dc:	3b d1                	cmp    %ecx,%edx
    25de:	40 0f 94 c2          	rex sete %dl
    25e2:	48 0f b6 d2          	movzbq %dl,%rdx
    25e6:	8f c1                	pop    %rcx
    25e8:	48 85 c9             	test   %rcx,%rcx
    25eb:	74 0a                	je     25f7 <main+0x25f7>
    25ed:	48 85 d2             	test   %rdx,%rdx
    25f0:	74 05                	je     25f7 <main+0x25f7>
    25f2:	c6 c1 01             	mov    $0x1,%cl
    25f5:	eb 03                	jmp    25fa <main+0x25fa>
    25f7:	c6 c1 00             	mov    $0x0,%cl
    25fa:	48 0f b6 c9          	movzbq %cl,%rcx
    25fe:	88 4d f8             	mov    %cl,-0x8(%rbp)
    2601:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2608:	8f c5                	pop    %rbp
    260a:	c3                   	ret
    fn is_frozen() -> bool {
    260b:	ff f5                	push   %rbp
    260d:	48 8b ec             	mov    %rsp,%rbp
    2610:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        return ptr && max == 0
    2617:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    261b:	48 8b c9             	mov    %rcx,%rcx
    261e:	48 8b 11             	mov    (%rcx),%rdx
    2621:	ff f2                	push   %rdx
    2623:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2627:	48 8b c9             	mov    %rcx,%rcx
    262a:	8b 51 08             	mov    0x8(%rcx),%edx
    262d:	ff f2                	push   %rdx
    262f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2634:	8f c2                	pop    %rdx
    2636:	3b d1                	cmp    %ecx,%edx
    2638:	40 0f 94 c2          	rex sete %dl
    263c:	48 0f b6 d2          	movzbq %dl,%rdx
    2640:	8f c1                	pop    %rcx
    2642:	48 85 c9             	test   %rcx,%rcx
    2645:	74 0a                	je     2651 <main+0x2651>
    2647:	48 85 d2             	test   %rdx,%rdx
    264a:	74 05                	je     2651 <main+0x2651>
    264c:	c6 c1 01             	mov    $0x1,%cl
    264f:	eb 03                	jmp    2654 <main+0x2654>
    2651:	c6 c1 00             	mov    $0x0,%cl
    2654:	48 0f b6 c9          	movzbq %cl,%rcx
    2658:	88 4d f8             	mov    %cl,-0x8(%rbp)
    265b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2662:	8f c5                	pop    %rbp
    2664:	c3                   	ret
    key: Key;
    next: i32; // -1 can't be seen as unused because the chain may link to other chains which we would sever. We need a separate variable for unused while keeping the chain intact.
    unused: bool;
    val: Val;

    fn cleanup() {
    2665:	ff f5                	push   %rbp
    2667:	48 8b ec             	mov    %rsp,%rbp
        destruct(&key) // this might cause problems
    266a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    266e:	48 8b c9             	mov    %rcx,%rcx
    2671:	ba 00 00 00 00       	mov    $0x0,%edx
    2676:	48 03 ca             	add    %rdx,%rcx
    2679:	48 33 d2             	xor    %rdx,%rdx
    267c:	48 89 11             	mov    %rdx,(%rcx)
        destruct(&val)
    267f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2683:	48 8b c9             	mov    %rcx,%rcx
    2686:	ba 10 00 00 00       	mov    $0x10,%edx
    268b:	48 03 ca             	add    %rdx,%rcx
    268e:	33 d2                	xor    %edx,%edx
    2690:	89 11                	mov    %edx,(%rcx)
    2692:	8f c5                	pop    %rbp
    2694:	c3                   	ret
    #macro MAP_CHAIN_INDEX_NULL 0
    // #macro MAP_CHAIN_INDEX_BEGIN 1
    
    // Some programmers say that the maximum amount of key/value pairs you will have should
    // be 70% of the max table size.
    fn init(tableSize: i32, reserved_chains: i32 = 0) {
    2695:	ff f5                	push   %rbp
    2697:	48 8b ec             	mov    %rsp,%rbp
        // TODO: Assert(chains.len == 0)
        //   We could call remap but that has overhead and init is supposed to be called
        //   on a fresh map.
        table.resize(tableSize);
    269a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    26a1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    26a5:	48 8b c9             	mov    %rcx,%rcx
    26a8:	ba 10 00 00 00       	mov    $0x10,%edx
    26ad:	48 03 ca             	add    %rdx,%rcx
    26b0:	ff f1                	push   %rcx
    26b2:	8b 4d 18             	mov    0x18(%rbp),%ecx
    26b5:	48 63 c9             	movslq %ecx,%rcx
    26b8:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    26bc:	8f c1                	pop    %rcx
    26be:	48 89 0c 24          	mov    %rcx,(%rsp)
    26c2:	e8 95 e4 ff ff       	call   b5c <main+0xb5c>
    26c7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        if reserved_chains > 0
    26ce:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
    26d1:	48 63 c9             	movslq %ecx,%rcx
    26d4:	ff f1                	push   %rcx
    26d6:	b9 00 00 00 00       	mov    $0x0,%ecx
    26db:	8f c2                	pop    %rdx
    26dd:	3b d1                	cmp    %ecx,%edx
    26df:	40 0f 9f c2          	rex setg %dl
    26e3:	48 0f b6 d2          	movzbq %dl,%rdx
    26e7:	48 83 fa 00          	cmp    $0x0,%rdx
    26eb:	0f 84 34 00 00 00    	je     2725 <main+0x2725>
            chains.reserve(reserved_chains);
    26f1:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    26f8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    26fc:	48 8b c9             	mov    %rcx,%rcx
    26ff:	ba 00 00 00 00       	mov    $0x0,%edx
    2704:	48 03 ca             	add    %rdx,%rcx
    2707:	ff f1                	push   %rcx
    2709:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
    270c:	48 63 c9             	movslq %ecx,%rcx
    270f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    2713:	8f c1                	pop    %rcx
    2715:	48 89 0c 24          	mov    %rcx,(%rsp)
    2719:	e8 9f e5 ff ff       	call   cbd <main+0xcbd>
    271e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2725:	8f c5                	pop    %rbp
    2727:	c3                   	ret
            final_hash ^= it;
        }
        return final_hash % table.size();
    }
    // NOTE: Should this be the same or different from i64 hash
    fn hash(num: void*) -> i32 {
    2728:	ff f5                	push   %rbp
    272a:	48 8b ec             	mov    %rsp,%rbp
    272d:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if table.size() == 0
    2734:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    273b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    273f:	48 8b c9             	mov    %rcx,%rcx
    2742:	ba 10 00 00 00       	mov    $0x10,%edx
    2747:	48 03 ca             	add    %rdx,%rcx
    274a:	48 89 0c 24          	mov    %rcx,(%rsp)
    274e:	e8 1b e1 ff ff       	call   86e <main+0x86e>
    2753:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    275a:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
    275e:	48 63 c9             	movslq %ecx,%rcx
    2761:	ff f1                	push   %rcx
    2763:	b9 00 00 00 00       	mov    $0x0,%ecx
    2768:	8f c2                	pop    %rdx
    276a:	3b d1                	cmp    %ecx,%edx
    276c:	40 0f 94 c2          	rex sete %dl
    2770:	48 0f b6 d2          	movzbq %dl,%rdx
    2774:	48 83 fa 00          	cmp    $0x0,%rdx
    2778:	0f 84 12 00 00 00    	je     2790 <main+0x2790>
            return 0;
    277e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2783:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    2786:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    278d:	8f c5                	pop    %rbp
    278f:	c3                   	ret
        // https://www.shadertoy.com/view/WttXWX
        x: u32 = cast<u64>num & cast<u64>0xFFFF_FFFF;
    2790:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    2794:	ff f1                	push   %rcx
    2796:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    279b:	8b d1                	mov    %ecx,%edx
    279d:	8f c1                	pop    %rcx
    279f:	48 23 ca             	and    %rdx,%rcx
    27a2:	8b d1                	mov    %ecx,%edx
    27a4:	89 55 f0             	mov    %edx,-0x10(%rbp)
        x ^= x >> 17;
    27a7:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    27aa:	ff f1                	push   %rcx
    27ac:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    27af:	ff f1                	push   %rcx
    27b1:	b9 11 00 00 00       	mov    $0x11,%ecx
    27b6:	8f c2                	pop    %rdx
    27b8:	48 d3 ea             	shr    %cl,%rdx
    27bb:	8f c1                	pop    %rcx
    27bd:	33 ca                	xor    %edx,%ecx
    27bf:	ff f1                	push   %rcx
    27c1:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    27c8:	48 03 cd             	add    %rbp,%rcx
    27cb:	8f c2                	pop    %rdx
    27cd:	89 11                	mov    %edx,(%rcx)
        x *= 0xed5ad4bbu;
    27cf:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    27d2:	ff f1                	push   %rcx
    27d4:	b9 bb d4 5a ed       	mov    $0xed5ad4bb,%ecx
    27d9:	8f c2                	pop    %rdx
    27db:	48 8b c2             	mov    %rdx,%rax
    27de:	f7 e1                	mul    %ecx
    27e0:	48 8b d0             	mov    %rax,%rdx
    27e3:	ff f2                	push   %rdx
    27e5:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    27ec:	48 03 cd             	add    %rbp,%rcx
    27ef:	8f c2                	pop    %rdx
    27f1:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 11;
    27f3:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    27f6:	ff f1                	push   %rcx
    27f8:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    27fb:	ff f1                	push   %rcx
    27fd:	b9 0b 00 00 00       	mov    $0xb,%ecx
    2802:	8f c2                	pop    %rdx
    2804:	48 d3 ea             	shr    %cl,%rdx
    2807:	8f c1                	pop    %rcx
    2809:	33 ca                	xor    %edx,%ecx
    280b:	ff f1                	push   %rcx
    280d:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2814:	48 03 cd             	add    %rbp,%rcx
    2817:	8f c2                	pop    %rdx
    2819:	89 11                	mov    %edx,(%rcx)
        x *= 0xac4c1b51u;
    281b:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    281e:	ff f1                	push   %rcx
    2820:	b9 51 1b 4c ac       	mov    $0xac4c1b51,%ecx
    2825:	8f c2                	pop    %rdx
    2827:	48 8b c2             	mov    %rdx,%rax
    282a:	f7 e1                	mul    %ecx
    282c:	48 8b d0             	mov    %rax,%rdx
    282f:	ff f2                	push   %rdx
    2831:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2838:	48 03 cd             	add    %rbp,%rcx
    283b:	8f c2                	pop    %rdx
    283d:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 15;
    283f:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2842:	ff f1                	push   %rcx
    2844:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2847:	ff f1                	push   %rcx
    2849:	b9 0f 00 00 00       	mov    $0xf,%ecx
    284e:	8f c2                	pop    %rdx
    2850:	48 d3 ea             	shr    %cl,%rdx
    2853:	8f c1                	pop    %rcx
    2855:	33 ca                	xor    %edx,%ecx
    2857:	ff f1                	push   %rcx
    2859:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2860:	48 03 cd             	add    %rbp,%rcx
    2863:	8f c2                	pop    %rdx
    2865:	89 11                	mov    %edx,(%rcx)
        x *= 0x31848babu;
    2867:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    286a:	ff f1                	push   %rcx
    286c:	b9 ab 8b 84 31       	mov    $0x31848bab,%ecx
    2871:	8f c2                	pop    %rdx
    2873:	48 8b c2             	mov    %rdx,%rax
    2876:	f7 e1                	mul    %ecx
    2878:	48 8b d0             	mov    %rax,%rdx
    287b:	ff f2                	push   %rdx
    287d:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2884:	48 03 cd             	add    %rbp,%rcx
    2887:	8f c2                	pop    %rdx
    2889:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 14;
    288b:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    288e:	ff f1                	push   %rcx
    2890:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2893:	ff f1                	push   %rcx
    2895:	b9 0e 00 00 00       	mov    $0xe,%ecx
    289a:	8f c2                	pop    %rdx
    289c:	48 d3 ea             	shr    %cl,%rdx
    289f:	8f c1                	pop    %rcx
    28a1:	33 ca                	xor    %edx,%ecx
    28a3:	ff f1                	push   %rcx
    28a5:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    28ac:	48 03 cd             	add    %rbp,%rcx
    28af:	8f c2                	pop    %rdx
    28b1:	89 11                	mov    %edx,(%rcx)
        return x % cast<u32>table.size();
    28b3:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    28b6:	ff f1                	push   %rcx
    28b8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    28bf:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    28c3:	48 8b c9             	mov    %rcx,%rcx
    28c6:	ba 10 00 00 00       	mov    $0x10,%edx
    28cb:	48 03 ca             	add    %rdx,%rcx
    28ce:	48 89 0c 24          	mov    %rcx,(%rsp)
    28d2:	e8 97 df ff ff       	call   86e <main+0x86e>
    28d7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    28de:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    28e2:	48 63 c9             	movslq %ecx,%rcx
    28e5:	8b d1                	mov    %ecx,%edx
    28e7:	8f c1                	pop    %rcx
    28e9:	48 8b fa             	mov    %rdx,%rdi
    28ec:	48 8b c1             	mov    %rcx,%rax
    28ef:	48 33 d2             	xor    %rdx,%rdx
    28f2:	f7 f7                	div    %edi
    28f4:	48 8b ca             	mov    %rdx,%rcx
    28f7:	48 8b d7             	mov    %rdi,%rdx
    28fa:	8b d1                	mov    %ecx,%edx
    28fc:	89 55 f8             	mov    %edx,-0x8(%rbp)
    28ff:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2906:	8f c5                	pop    %rbp
    2908:	c3                   	ret
    }
    // TODO: Implement i64 hash
    fn hash(num: i32) -> i32 {
    2909:	ff f5                	push   %rbp
    290b:	48 8b ec             	mov    %rsp,%rbp
    290e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if table.size() == 0
    2915:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    291c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2920:	48 8b c9             	mov    %rcx,%rcx
    2923:	ba 10 00 00 00       	mov    $0x10,%edx
    2928:	48 03 ca             	add    %rdx,%rcx
    292b:	48 89 0c 24          	mov    %rcx,(%rsp)
    292f:	e8 3a df ff ff       	call   86e <main+0x86e>
    2934:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    293b:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
    293f:	48 63 c9             	movslq %ecx,%rcx
    2942:	ff f1                	push   %rcx
    2944:	b9 00 00 00 00       	mov    $0x0,%ecx
    2949:	8f c2                	pop    %rdx
    294b:	3b d1                	cmp    %ecx,%edx
    294d:	40 0f 94 c2          	rex sete %dl
    2951:	48 0f b6 d2          	movzbq %dl,%rdx
    2955:	48 83 fa 00          	cmp    $0x0,%rdx
    2959:	0f 84 12 00 00 00    	je     2971 <main+0x2971>
            return 0;
    295f:	b9 00 00 00 00       	mov    $0x0,%ecx
    2964:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    2967:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    296e:	8f c5                	pop    %rbp
    2970:	c3                   	ret
        // https://www.shadertoy.com/view/WttXWX
        x: u32 = num;
    2971:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2974:	48 63 c9             	movslq %ecx,%rcx
    2977:	8b d1                	mov    %ecx,%edx
    2979:	89 55 f0             	mov    %edx,-0x10(%rbp)
        x ^= x >> 17;
    297c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    297f:	ff f1                	push   %rcx
    2981:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2984:	ff f1                	push   %rcx
    2986:	b9 11 00 00 00       	mov    $0x11,%ecx
    298b:	8f c2                	pop    %rdx
    298d:	48 d3 ea             	shr    %cl,%rdx
    2990:	8f c1                	pop    %rcx
    2992:	33 ca                	xor    %edx,%ecx
    2994:	ff f1                	push   %rcx
    2996:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    299d:	48 03 cd             	add    %rbp,%rcx
    29a0:	8f c2                	pop    %rdx
    29a2:	89 11                	mov    %edx,(%rcx)
        x *= 0xed5ad4bbu;
    29a4:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    29a7:	ff f1                	push   %rcx
    29a9:	b9 bb d4 5a ed       	mov    $0xed5ad4bb,%ecx
    29ae:	8f c2                	pop    %rdx
    29b0:	48 8b c2             	mov    %rdx,%rax
    29b3:	f7 e1                	mul    %ecx
    29b5:	48 8b d0             	mov    %rax,%rdx
    29b8:	ff f2                	push   %rdx
    29ba:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    29c1:	48 03 cd             	add    %rbp,%rcx
    29c4:	8f c2                	pop    %rdx
    29c6:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 11;
    29c8:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    29cb:	ff f1                	push   %rcx
    29cd:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    29d0:	ff f1                	push   %rcx
    29d2:	b9 0b 00 00 00       	mov    $0xb,%ecx
    29d7:	8f c2                	pop    %rdx
    29d9:	48 d3 ea             	shr    %cl,%rdx
    29dc:	8f c1                	pop    %rcx
    29de:	33 ca                	xor    %edx,%ecx
    29e0:	ff f1                	push   %rcx
    29e2:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    29e9:	48 03 cd             	add    %rbp,%rcx
    29ec:	8f c2                	pop    %rdx
    29ee:	89 11                	mov    %edx,(%rcx)
        x *= 0xac4c1b51u;
    29f0:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    29f3:	ff f1                	push   %rcx
    29f5:	b9 51 1b 4c ac       	mov    $0xac4c1b51,%ecx
    29fa:	8f c2                	pop    %rdx
    29fc:	48 8b c2             	mov    %rdx,%rax
    29ff:	f7 e1                	mul    %ecx
    2a01:	48 8b d0             	mov    %rax,%rdx
    2a04:	ff f2                	push   %rdx
    2a06:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2a0d:	48 03 cd             	add    %rbp,%rcx
    2a10:	8f c2                	pop    %rdx
    2a12:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 15;
    2a14:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a17:	ff f1                	push   %rcx
    2a19:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a1c:	ff f1                	push   %rcx
    2a1e:	b9 0f 00 00 00       	mov    $0xf,%ecx
    2a23:	8f c2                	pop    %rdx
    2a25:	48 d3 ea             	shr    %cl,%rdx
    2a28:	8f c1                	pop    %rcx
    2a2a:	33 ca                	xor    %edx,%ecx
    2a2c:	ff f1                	push   %rcx
    2a2e:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2a35:	48 03 cd             	add    %rbp,%rcx
    2a38:	8f c2                	pop    %rdx
    2a3a:	89 11                	mov    %edx,(%rcx)
        x *= 0x31848babu;
    2a3c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a3f:	ff f1                	push   %rcx
    2a41:	b9 ab 8b 84 31       	mov    $0x31848bab,%ecx
    2a46:	8f c2                	pop    %rdx
    2a48:	48 8b c2             	mov    %rdx,%rax
    2a4b:	f7 e1                	mul    %ecx
    2a4d:	48 8b d0             	mov    %rax,%rdx
    2a50:	ff f2                	push   %rdx
    2a52:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2a59:	48 03 cd             	add    %rbp,%rcx
    2a5c:	8f c2                	pop    %rdx
    2a5e:	89 11                	mov    %edx,(%rcx)
        x ^= x >> 14;
    2a60:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a63:	ff f1                	push   %rcx
    2a65:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a68:	ff f1                	push   %rcx
    2a6a:	b9 0e 00 00 00       	mov    $0xe,%ecx
    2a6f:	8f c2                	pop    %rdx
    2a71:	48 d3 ea             	shr    %cl,%rdx
    2a74:	8f c1                	pop    %rcx
    2a76:	33 ca                	xor    %edx,%ecx
    2a78:	ff f1                	push   %rcx
    2a7a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    2a81:	48 03 cd             	add    %rbp,%rcx
    2a84:	8f c2                	pop    %rdx
    2a86:	89 11                	mov    %edx,(%rcx)
        return x % cast<u32>table.size();
    2a88:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2a8b:	ff f1                	push   %rcx
    2a8d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    2a94:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2a98:	48 8b c9             	mov    %rcx,%rcx
    2a9b:	ba 10 00 00 00       	mov    $0x10,%edx
    2aa0:	48 03 ca             	add    %rdx,%rcx
    2aa3:	48 89 0c 24          	mov    %rcx,(%rsp)
    2aa7:	e8 c2 dd ff ff       	call   86e <main+0x86e>
    2aac:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2ab3:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    2ab7:	48 63 c9             	movslq %ecx,%rcx
    2aba:	8b d1                	mov    %ecx,%edx
    2abc:	8f c1                	pop    %rcx
    2abe:	48 8b fa             	mov    %rdx,%rdi
    2ac1:	48 8b c1             	mov    %rcx,%rax
    2ac4:	48 33 d2             	xor    %rdx,%rdx
    2ac7:	f7 f7                	div    %edi
    2ac9:	48 8b ca             	mov    %rdx,%rcx
    2acc:	48 8b d7             	mov    %rdi,%rdx
    2acf:	8b d1                	mov    %ecx,%edx
    2ad1:	89 55 f8             	mov    %edx,-0x8(%rbp)
    2ad4:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2adb:	8f c5                	pop    %rbp
    2add:	c3                   	ret
    // not named size() because memory isn't contiguous like an array
    fn getCount() -> i32 {
        return count;
    }
    // internal function
    fn find_chain_unsafe(key: Key) -> MapChain<Key,Val>* {
    2ade:	ff f5                	push   %rbp
    2ae0:	48 8b ec             	mov    %rsp,%rbp
    2ae3:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        slot := hash(key);
    2aea:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2af1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2af5:	48 8b c9             	mov    %rcx,%rcx
    2af8:	ff f1                	push   %rcx
    2afa:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    2afe:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    2b03:	8f c1                	pop    %rcx
    2b05:	48 89 0c 24          	mov    %rcx,(%rsp)
    2b09:	e8 1a fc ff ff       	call   2728 <main+0x2728>
    2b0e:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2b15:	8b 4c 24 d0          	mov    -0x30(%rsp),%ecx
    2b19:	48 63 c9             	movslq %ecx,%rcx
    2b1c:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        if slot >= table.len
    2b1f:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2b22:	ff f1                	push   %rcx
    2b24:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2b28:	48 8b c9             	mov    %rcx,%rcx
    2b2b:	ba 10 00 00 00       	mov    $0x10,%edx
    2b30:	48 03 ca             	add    %rdx,%rcx
    2b33:	ba 0c 00 00 00       	mov    $0xc,%edx
    2b38:	48 03 ca             	add    %rdx,%rcx
    2b3b:	8b 11                	mov    (%rcx),%edx
    2b3d:	8f c1                	pop    %rcx
    2b3f:	3b ca                	cmp    %edx,%ecx
    2b41:	40 0f 9d c1          	rex setge %cl
    2b45:	48 0f b6 c9          	movzbq %cl,%rcx
    2b49:	48 83 f9 00          	cmp    $0x0,%rcx
    2b4d:	0f 84 13 00 00 00    	je     2b66 <main+0x2b66>
            return null;
    2b53:	b9 00 00 00 00       	mov    $0x0,%ecx
    2b58:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2b5c:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2b63:	8f c5                	pop    %rbp
    2b65:	c3                   	ret
        index := table.get(slot);
    2b66:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2b6d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2b71:	48 8b c9             	mov    %rcx,%rcx
    2b74:	ba 10 00 00 00       	mov    $0x10,%edx
    2b79:	48 03 ca             	add    %rdx,%rcx
    2b7c:	ff f1                	push   %rcx
    2b7e:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2b81:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    2b85:	8f c1                	pop    %rcx
    2b87:	48 89 0c 24          	mov    %rcx,(%rsp)
    2b8b:	e8 b9 dd ff ff       	call   949 <main+0x949>
    2b90:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2b97:	8b 4c 24 d0          	mov    -0x30(%rsp),%ecx
    2b9b:	48 63 c9             	movslq %ecx,%rcx
    2b9e:	89 4d e8             	mov    %ecx,-0x18(%rbp)
        
        if index == 0
    2ba1:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    2ba4:	ff f1                	push   %rcx
    2ba6:	b9 00 00 00 00       	mov    $0x0,%ecx
    2bab:	8f c2                	pop    %rdx
    2bad:	3b d1                	cmp    %ecx,%edx
    2baf:	40 0f 94 c2          	rex sete %dl
    2bb3:	48 0f b6 d2          	movzbq %dl,%rdx
    2bb7:	48 83 fa 00          	cmp    $0x0,%rdx
    2bbb:	0f 84 13 00 00 00    	je     2bd4 <main+0x2bd4>
            return null;
    2bc1:	b9 00 00 00 00       	mov    $0x0,%ecx
    2bc6:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2bca:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2bd1:	8f c5                	pop    %rbp
    2bd3:	c3                   	ret
        while {
            chain := chains.get_unsafe(index-1);
    2bd4:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2bdb:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2bdf:	48 8b c9             	mov    %rcx,%rcx
    2be2:	ba 00 00 00 00       	mov    $0x0,%edx
    2be7:	48 03 ca             	add    %rdx,%rcx
    2bea:	ff f1                	push   %rcx
    2bec:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    2bef:	ff f1                	push   %rcx
    2bf1:	b9 01 00 00 00       	mov    $0x1,%ecx
    2bf6:	8f c2                	pop    %rdx
    2bf8:	2b d1                	sub    %ecx,%edx
    2bfa:	89 54 24 10          	mov    %edx,0x10(%rsp)
    2bfe:	8f c1                	pop    %rcx
    2c00:	48 89 0c 24          	mov    %rcx,(%rsp)
    2c04:	e8 bb dd ff ff       	call   9c4 <main+0x9c4>
    2c09:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2c10:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    2c15:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !chain
    2c19:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2c1d:	48 85 c9             	test   %rcx,%rcx
    2c20:	40 0f 94 c1          	rex sete %cl
    2c24:	48 0f b6 c9          	movzbq %cl,%rcx
    2c28:	48 83 f9 00          	cmp    $0x0,%rcx
    2c2c:	0f 84 13 00 00 00    	je     2c45 <main+0x2c45>
                return null;
    2c32:	b9 00 00 00 00       	mov    $0x0,%ecx
    2c37:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2c3b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2c42:	8f c5                	pop    %rbp
    2c44:	c3                   	ret
            if !chain.unused && chain.key == key {
    2c45:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2c4c:	48 03 cd             	add    %rbp,%rcx
    2c4f:	48 8b 11             	mov    (%rcx),%rdx
    2c52:	b9 0c 00 00 00       	mov    $0xc,%ecx
    2c57:	48 03 d1             	add    %rcx,%rdx
    2c5a:	48 8a 0a             	rex.W mov (%rdx),%cl
    2c5d:	48 0f b6 c9          	movzbq %cl,%rcx
    2c61:	48 85 c9             	test   %rcx,%rcx
    2c64:	40 0f 94 c1          	rex sete %cl
    2c68:	48 0f b6 c9          	movzbq %cl,%rcx
    2c6c:	ff f1                	push   %rcx
    2c6e:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2c75:	48 03 cd             	add    %rbp,%rcx
    2c78:	48 8b 11             	mov    (%rcx),%rdx
    2c7b:	48 8b 0a             	mov    (%rdx),%rcx
    2c7e:	ff f1                	push   %rcx
    2c80:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    2c84:	8f c2                	pop    %rdx
    2c86:	48 3b d1             	cmp    %rcx,%rdx
    2c89:	40 0f 94 c2          	rex sete %dl
    2c8d:	48 0f b6 d2          	movzbq %dl,%rdx
    2c91:	8f c1                	pop    %rcx
    2c93:	48 85 c9             	test   %rcx,%rcx
    2c96:	74 0a                	je     2ca2 <main+0x2ca2>
    2c98:	48 85 d2             	test   %rdx,%rdx
    2c9b:	74 05                	je     2ca2 <main+0x2ca2>
    2c9d:	c6 c1 01             	mov    $0x1,%cl
    2ca0:	eb 03                	jmp    2ca5 <main+0x2ca5>
    2ca2:	c6 c1 00             	mov    $0x0,%cl
    2ca5:	48 0f b6 c9          	movzbq %cl,%rcx
    2ca9:	48 83 f9 00          	cmp    $0x0,%rcx
    2cad:	0f 84 12 00 00 00    	je     2cc5 <main+0x2cc5>
                return chain;
    2cb3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2cb7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2cbb:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2cc2:	8f c5                	pop    %rbp
    2cc4:	c3                   	ret
            }
            if chain.next == MAP_CHAIN_INDEX_NULL
    2cc5:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2ccc:	48 03 cd             	add    %rbp,%rcx
    2ccf:	48 8b 11             	mov    (%rcx),%rdx
    2cd2:	b9 08 00 00 00       	mov    $0x8,%ecx
    2cd7:	48 03 d1             	add    %rcx,%rdx
    2cda:	8b 0a                	mov    (%rdx),%ecx
    2cdc:	ff f1                	push   %rcx
    2cde:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ce3:	8f c2                	pop    %rdx
    2ce5:	3b d1                	cmp    %ecx,%edx
    2ce7:	40 0f 94 c2          	rex sete %dl
    2ceb:	48 0f b6 d2          	movzbq %dl,%rdx
    2cef:	48 83 fa 00          	cmp    $0x0,%rdx
    2cf3:	0f 84 13 00 00 00    	je     2d0c <main+0x2d0c>
                return null;
    2cf9:	b9 00 00 00 00       	mov    $0x0,%ecx
    2cfe:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2d02:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2d09:	8f c5                	pop    %rbp
    2d0b:	c3                   	ret
            index = chain.next;
    2d0c:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2d13:	48 03 cd             	add    %rbp,%rcx
    2d16:	48 8b 11             	mov    (%rcx),%rdx
    2d19:	b9 08 00 00 00       	mov    $0x8,%ecx
    2d1e:	48 03 d1             	add    %rcx,%rdx
    2d21:	8b 0a                	mov    (%rdx),%ecx
    2d23:	ff f1                	push   %rcx
    2d25:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    2d2c:	48 03 cd             	add    %rbp,%rcx
    2d2f:	8f c2                	pop    %rdx
    2d31:	89 11                	mov    %edx,(%rcx)
    2d33:	e9 9c fe ff ff       	jmp    2bd4 <main+0x2bd4>
        }
        return null;
    2d38:	b9 00 00 00 00       	mov    $0x0,%ecx
    2d3d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2d41:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2d48:	8f c5                	pop    %rbp
    2d4a:	c3                   	ret
    fn find_chain_unsafe(key: Key) -> MapChain<Key,Val>* {
    2d4b:	ff f5                	push   %rbp
    2d4d:	48 8b ec             	mov    %rsp,%rbp
    2d50:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
        slot := hash(key);
    2d57:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2d5e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2d62:	48 8b c9             	mov    %rcx,%rcx
    2d65:	ff f1                	push   %rcx
    2d67:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2d6a:	8b c9                	mov    %ecx,%ecx
    2d6c:	8b d1                	mov    %ecx,%edx
    2d6e:	89 54 24 10          	mov    %edx,0x10(%rsp)
    2d72:	8f c1                	pop    %rcx
    2d74:	48 89 0c 24          	mov    %rcx,(%rsp)
    2d78:	e8 8c fb ff ff       	call   2909 <main+0x2909>
    2d7d:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2d84:	8b 4c 24 d0          	mov    -0x30(%rsp),%ecx
    2d88:	48 63 c9             	movslq %ecx,%rcx
    2d8b:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        if slot >= table.len
    2d8e:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2d91:	ff f1                	push   %rcx
    2d93:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2d97:	48 8b c9             	mov    %rcx,%rcx
    2d9a:	ba 10 00 00 00       	mov    $0x10,%edx
    2d9f:	48 03 ca             	add    %rdx,%rcx
    2da2:	ba 0c 00 00 00       	mov    $0xc,%edx
    2da7:	48 03 ca             	add    %rdx,%rcx
    2daa:	8b 11                	mov    (%rcx),%edx
    2dac:	8f c1                	pop    %rcx
    2dae:	3b ca                	cmp    %edx,%ecx
    2db0:	40 0f 9d c1          	rex setge %cl
    2db4:	48 0f b6 c9          	movzbq %cl,%rcx
    2db8:	48 83 f9 00          	cmp    $0x0,%rcx
    2dbc:	0f 84 13 00 00 00    	je     2dd5 <main+0x2dd5>
            return null;
    2dc2:	b9 00 00 00 00       	mov    $0x0,%ecx
    2dc7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2dcb:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2dd2:	8f c5                	pop    %rbp
    2dd4:	c3                   	ret
        index := table.get(slot);
    2dd5:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2ddc:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2de0:	48 8b c9             	mov    %rcx,%rcx
    2de3:	ba 10 00 00 00       	mov    $0x10,%edx
    2de8:	48 03 ca             	add    %rdx,%rcx
    2deb:	ff f1                	push   %rcx
    2ded:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2df0:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    2df4:	8f c1                	pop    %rcx
    2df6:	48 89 0c 24          	mov    %rcx,(%rsp)
    2dfa:	e8 4a db ff ff       	call   949 <main+0x949>
    2dff:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2e06:	8b 4c 24 d0          	mov    -0x30(%rsp),%ecx
    2e0a:	48 63 c9             	movslq %ecx,%rcx
    2e0d:	89 4d e8             	mov    %ecx,-0x18(%rbp)
        if index == 0
    2e10:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    2e13:	ff f1                	push   %rcx
    2e15:	b9 00 00 00 00       	mov    $0x0,%ecx
    2e1a:	8f c2                	pop    %rdx
    2e1c:	3b d1                	cmp    %ecx,%edx
    2e1e:	40 0f 94 c2          	rex sete %dl
    2e22:	48 0f b6 d2          	movzbq %dl,%rdx
    2e26:	48 83 fa 00          	cmp    $0x0,%rdx
    2e2a:	0f 84 13 00 00 00    	je     2e43 <main+0x2e43>
            return null;
    2e30:	b9 00 00 00 00       	mov    $0x0,%ecx
    2e35:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2e39:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2e40:	8f c5                	pop    %rbp
    2e42:	c3                   	ret
            chain := chains.get_unsafe(index-1);
    2e43:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    2e4a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2e4e:	48 8b c9             	mov    %rcx,%rcx
    2e51:	ba 00 00 00 00       	mov    $0x0,%edx
    2e56:	48 03 ca             	add    %rdx,%rcx
    2e59:	ff f1                	push   %rcx
    2e5b:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    2e5e:	ff f1                	push   %rcx
    2e60:	b9 01 00 00 00       	mov    $0x1,%ecx
    2e65:	8f c2                	pop    %rdx
    2e67:	2b d1                	sub    %ecx,%edx
    2e69:	89 54 24 10          	mov    %edx,0x10(%rsp)
    2e6d:	8f c1                	pop    %rcx
    2e6f:	48 89 0c 24          	mov    %rcx,(%rsp)
    2e73:	e8 d4 db ff ff       	call   a4c <main+0xa4c>
    2e78:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    2e7f:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    2e84:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !chain
    2e88:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2e8c:	48 85 c9             	test   %rcx,%rcx
    2e8f:	40 0f 94 c1          	rex sete %cl
    2e93:	48 0f b6 c9          	movzbq %cl,%rcx
    2e97:	48 83 f9 00          	cmp    $0x0,%rcx
    2e9b:	0f 84 13 00 00 00    	je     2eb4 <main+0x2eb4>
                return null;
    2ea1:	b9 00 00 00 00       	mov    $0x0,%ecx
    2ea6:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2eaa:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2eb1:	8f c5                	pop    %rbp
    2eb3:	c3                   	ret
            if !chain.unused && chain.key == key {
    2eb4:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2ebb:	48 03 cd             	add    %rbp,%rcx
    2ebe:	48 8b 11             	mov    (%rcx),%rdx
    2ec1:	b9 08 00 00 00       	mov    $0x8,%ecx
    2ec6:	48 03 d1             	add    %rcx,%rdx
    2ec9:	48 8a 0a             	rex.W mov (%rdx),%cl
    2ecc:	48 0f b6 c9          	movzbq %cl,%rcx
    2ed0:	48 85 c9             	test   %rcx,%rcx
    2ed3:	40 0f 94 c1          	rex sete %cl
    2ed7:	48 0f b6 c9          	movzbq %cl,%rcx
    2edb:	ff f1                	push   %rcx
    2edd:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2ee4:	48 03 cd             	add    %rbp,%rcx
    2ee7:	48 8b 11             	mov    (%rcx),%rdx
    2eea:	8b 0a                	mov    (%rdx),%ecx
    2eec:	ff f1                	push   %rcx
    2eee:	8b 4d 18             	mov    0x18(%rbp),%ecx
    2ef1:	8b c9                	mov    %ecx,%ecx
    2ef3:	8f c2                	pop    %rdx
    2ef5:	3b d1                	cmp    %ecx,%edx
    2ef7:	40 0f 94 c2          	rex sete %dl
    2efb:	48 0f b6 d2          	movzbq %dl,%rdx
    2eff:	8f c1                	pop    %rcx
    2f01:	48 85 c9             	test   %rcx,%rcx
    2f04:	74 0a                	je     2f10 <main+0x2f10>
    2f06:	48 85 d2             	test   %rdx,%rdx
    2f09:	74 05                	je     2f10 <main+0x2f10>
    2f0b:	c6 c1 01             	mov    $0x1,%cl
    2f0e:	eb 03                	jmp    2f13 <main+0x2f13>
    2f10:	c6 c1 00             	mov    $0x0,%cl
    2f13:	48 0f b6 c9          	movzbq %cl,%rcx
    2f17:	48 83 f9 00          	cmp    $0x0,%rcx
    2f1b:	0f 84 12 00 00 00    	je     2f33 <main+0x2f33>
                return chain;
    2f21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2f25:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2f29:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2f30:	8f c5                	pop    %rbp
    2f32:	c3                   	ret
            if chain.next == MAP_CHAIN_INDEX_NULL
    2f33:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2f3a:	48 03 cd             	add    %rbp,%rcx
    2f3d:	48 8b 11             	mov    (%rcx),%rdx
    2f40:	b9 04 00 00 00       	mov    $0x4,%ecx
    2f45:	48 03 d1             	add    %rcx,%rdx
    2f48:	8b 0a                	mov    (%rdx),%ecx
    2f4a:	ff f1                	push   %rcx
    2f4c:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f51:	8f c2                	pop    %rdx
    2f53:	3b d1                	cmp    %ecx,%edx
    2f55:	40 0f 94 c2          	rex sete %dl
    2f59:	48 0f b6 d2          	movzbq %dl,%rdx
    2f5d:	48 83 fa 00          	cmp    $0x0,%rdx
    2f61:	0f 84 13 00 00 00    	je     2f7a <main+0x2f7a>
                return null;
    2f67:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f6c:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2f70:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2f77:	8f c5                	pop    %rbp
    2f79:	c3                   	ret
            index = chain.next;
    2f7a:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    2f81:	48 03 cd             	add    %rbp,%rcx
    2f84:	48 8b 11             	mov    (%rcx),%rdx
    2f87:	b9 04 00 00 00       	mov    $0x4,%ecx
    2f8c:	48 03 d1             	add    %rcx,%rdx
    2f8f:	8b 0a                	mov    (%rdx),%ecx
    2f91:	ff f1                	push   %rcx
    2f93:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    2f9a:	48 03 cd             	add    %rbp,%rcx
    2f9d:	8f c2                	pop    %rdx
    2f9f:	89 11                	mov    %edx,(%rcx)
    2fa1:	e9 9d fe ff ff       	jmp    2e43 <main+0x2e43>
        return null;
    2fa6:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fab:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    2faf:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    2fb6:	8f c5                	pop    %rbp
    2fb8:	c3                   	ret
    }
    fn set(key: Key, val: Val) -> Val* {
    2fb9:	ff f5                	push   %rbp
    2fbb:	48 8b ec             	mov    %rsp,%rbp
    2fbe:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
        // if table.size() == 0 {
        //     log("Dude, you got to map.init before map.set-ing it") // TODO: Use assert instead
        // }
        slot := hash(key);
    2fc5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    2fcc:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    2fd0:	48 8b c9             	mov    %rcx,%rcx
    2fd3:	ff f1                	push   %rcx
    2fd5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    2fd9:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    2fde:	8f c1                	pop    %rcx
    2fe0:	48 89 0c 24          	mov    %rcx,(%rsp)
    2fe4:	e8 3f f7 ff ff       	call   2728 <main+0x2728>
    2fe9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    2ff0:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    2ff4:	48 63 c9             	movslq %ecx,%rcx
    2ff7:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        if slot >= table.len {
    2ffa:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    2ffd:	ff f1                	push   %rcx
    2fff:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3003:	48 8b c9             	mov    %rcx,%rcx
    3006:	ba 10 00 00 00       	mov    $0x10,%edx
    300b:	48 03 ca             	add    %rdx,%rcx
    300e:	ba 0c 00 00 00       	mov    $0xc,%edx
    3013:	48 03 ca             	add    %rdx,%rcx
    3016:	8b 11                	mov    (%rcx),%edx
    3018:	8f c1                	pop    %rcx
    301a:	3b ca                	cmp    %edx,%ecx
    301c:	40 0f 9d c1          	rex setge %cl
    3020:	48 0f b6 c9          	movzbq %cl,%rcx
    3024:	48 83 f9 00          	cmp    $0x0,%rcx
    3028:	0f 84 91 00 00 00    	je     30bf <main+0x30bf>
            if table.len == 0
    302e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3032:	48 8b c9             	mov    %rcx,%rcx
    3035:	ba 10 00 00 00       	mov    $0x10,%edx
    303a:	48 03 ca             	add    %rdx,%rcx
    303d:	ba 0c 00 00 00       	mov    $0xc,%edx
    3042:	48 03 ca             	add    %rdx,%rcx
    3045:	8b 11                	mov    (%rcx),%edx
    3047:	ff f2                	push   %rdx
    3049:	b9 00 00 00 00       	mov    $0x0,%ecx
    304e:	8f c2                	pop    %rdx
    3050:	3b d1                	cmp    %ecx,%edx
    3052:	40 0f 94 c2          	rex sete %dl
    3056:	48 0f b6 d2          	movzbq %dl,%rdx
    305a:	48 83 fa 00          	cmp    $0x0,%rdx
    305e:	0f 84 48 00 00 00    	je     30ac <main+0x30ac>
                log("Dude, you forgot to initialize the hash map (Map.btb)")
    3064:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    306b:	b9 35 00 00 00       	mov    $0x35,%ecx
    3070:	ff f1                	push   %rcx
    3072:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 3079 <main+0x3079>
    3079:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    307e:	8f c1                	pop    %rcx
    3080:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    3085:	e8 08 10 00 00       	call   4092 <main+0x4092>
    308a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3091:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3098:	b9 0a 00 00 00       	mov    $0xa,%ecx
    309d:	88 0c 24             	mov    %cl,(%rsp)
    30a0:	e8 4c 0f 00 00       	call   3ff1 <main+0x3ff1>
    30a5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
            return null;
    30ac:	b9 00 00 00 00       	mov    $0x0,%ecx
    30b1:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    30b5:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    30bc:	8f c5                	pop    %rbp
    30be:	c3                   	ret
        }
        index := table.get(slot);
    30bf:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    30c6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    30ca:	48 8b c9             	mov    %rcx,%rcx
    30cd:	ba 10 00 00 00       	mov    $0x10,%edx
    30d2:	48 03 ca             	add    %rdx,%rcx
    30d5:	ff f1                	push   %rcx
    30d7:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    30da:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    30de:	8f c1                	pop    %rcx
    30e0:	48 89 0c 24          	mov    %rcx,(%rsp)
    30e4:	e8 60 d8 ff ff       	call   949 <main+0x949>
    30e9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    30f0:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    30f4:	48 63 c9             	movslq %ecx,%rcx
    30f7:	89 4d e8             	mov    %ecx,-0x18(%rbp)
        
        if index == 0 {
    30fa:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    30fd:	ff f1                	push   %rcx
    30ff:	b9 00 00 00 00       	mov    $0x0,%ecx
    3104:	8f c2                	pop    %rdx
    3106:	3b d1                	cmp    %ecx,%edx
    3108:	40 0f 94 c2          	rex sete %dl
    310c:	48 0f b6 d2          	movzbq %dl,%rdx
    3110:	48 83 fa 00          	cmp    $0x0,%rdx
    3114:	0f 84 04 01 00 00    	je     321e <main+0x321e>
            chain := chains.add(MapChain<Key,Val>{key = key, next = 0, unused = false, val = val});
    311a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    3121:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3125:	48 8b c9             	mov    %rcx,%rcx
    3128:	ba 00 00 00 00       	mov    $0x0,%edx
    312d:	48 03 ca             	add    %rdx,%rcx
    3130:	ff f1                	push   %rcx
    3132:	8b 4d 20             	mov    0x20(%rbp),%ecx
    3135:	48 63 c9             	movslq %ecx,%rcx
    3138:	ff f1                	push   %rcx
    313a:	b9 00 00 00 00       	mov    $0x0,%ecx
    313f:	ff f1                	push   %rcx
    3141:	b9 00 00 00 00       	mov    $0x0,%ecx
    3146:	ff f1                	push   %rcx
    3148:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    314c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    3151:	8f c1                	pop    %rcx
    3153:	89 4c 24 28          	mov    %ecx,0x28(%rsp)
    3157:	8f c1                	pop    %rcx
    3159:	88 4c 24 24          	mov    %cl,0x24(%rsp)
    315d:	8f c1                	pop    %rcx
    315f:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    3163:	8f c1                	pop    %rcx
    3165:	48 89 0c 24          	mov    %rcx,(%rsp)
    3169:	e8 ad d1 ff ff       	call   31b <main+0x31b>
    316e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    3175:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    317a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            table.ptr[slot] = chains.size(); // not size-1 because 0 is seen as null
    317e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3185:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3189:	48 8b c9             	mov    %rcx,%rcx
    318c:	ba 00 00 00 00       	mov    $0x0,%edx
    3191:	48 03 ca             	add    %rdx,%rcx
    3194:	48 89 0c 24          	mov    %rcx,(%rsp)
    3198:	e8 ae d6 ff ff       	call   84b <main+0x84b>
    319d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    31a4:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    31a8:	48 63 c9             	movslq %ecx,%rcx
    31ab:	ff f1                	push   %rcx
    31ad:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    31b1:	48 8b c9             	mov    %rcx,%rcx
    31b4:	ba 10 00 00 00       	mov    $0x10,%edx
    31b9:	48 03 ca             	add    %rdx,%rcx
    31bc:	ff f1                	push   %rcx
    31be:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    31c1:	8f c2                	pop    %rdx
    31c3:	48 8b 1a             	mov    (%rdx),%rbx
    31c6:	ba 04 00 00 00       	mov    $0x4,%edx
    31cb:	48 8b fa             	mov    %rdx,%rdi
    31ce:	48 8b c1             	mov    %rcx,%rax
    31d1:	48 f7 e7             	mul    %rdi
    31d4:	48 8b c8             	mov    %rax,%rcx
    31d7:	48 8b d7             	mov    %rdi,%rdx
    31da:	48 03 d9             	add    %rcx,%rbx
    31dd:	8f c1                	pop    %rcx
    31df:	89 0b                	mov    %ecx,(%rbx)
            count++;
    31e1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    31e5:	48 8b c9             	mov    %rcx,%rcx
    31e8:	ba 20 00 00 00       	mov    $0x20,%edx
    31ed:	48 03 ca             	add    %rdx,%rcx
    31f0:	8b 11                	mov    (%rcx),%edx
    31f2:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    31f9:	89 11                	mov    %edx,(%rcx)
            return &chain.val;
    31fb:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3202:	48 03 cd             	add    %rbp,%rcx
    3205:	48 8b 11             	mov    (%rcx),%rdx
    3208:	b9 10 00 00 00       	mov    $0x10,%ecx
    320d:	48 03 d1             	add    %rcx,%rdx
    3210:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3214:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    321b:	8f c5                	pop    %rbp
    321d:	c3                   	ret
        }
        while {
            chain := chains.get_unsafe(index-1); // -1 because 0 is null
    321e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3225:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3229:	48 8b c9             	mov    %rcx,%rcx
    322c:	ba 00 00 00 00       	mov    $0x0,%edx
    3231:	48 03 ca             	add    %rdx,%rcx
    3234:	ff f1                	push   %rcx
    3236:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    3239:	ff f1                	push   %rcx
    323b:	b9 01 00 00 00       	mov    $0x1,%ecx
    3240:	8f c2                	pop    %rdx
    3242:	2b d1                	sub    %ecx,%edx
    3244:	89 54 24 10          	mov    %edx,0x10(%rsp)
    3248:	8f c1                	pop    %rcx
    324a:	48 89 0c 24          	mov    %rcx,(%rsp)
    324e:	e8 71 d7 ff ff       	call   9c4 <main+0x9c4>
    3253:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    325a:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    325f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !chain
    3263:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    3267:	48 85 c9             	test   %rcx,%rcx
    326a:	40 0f 94 c1          	rex sete %cl
    326e:	48 0f b6 c9          	movzbq %cl,%rcx
    3272:	48 83 f9 00          	cmp    $0x0,%rcx
    3276:	0f 84 13 00 00 00    	je     328f <main+0x328f>
                return null; // TODO: Bug, assert instead
    327c:	b9 00 00 00 00       	mov    $0x0,%ecx
    3281:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    3285:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    328c:	8f c5                	pop    %rbp
    328e:	c3                   	ret
            if chain.unused {
    328f:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3296:	48 03 cd             	add    %rbp,%rcx
    3299:	48 8b 11             	mov    (%rcx),%rdx
    329c:	b9 0c 00 00 00       	mov    $0xc,%ecx
    32a1:	48 03 d1             	add    %rcx,%rdx
    32a4:	48 8a 0a             	rex.W mov (%rdx),%cl
    32a7:	48 0f b6 c9          	movzbq %cl,%rcx
    32ab:	48 83 f9 00          	cmp    $0x0,%rcx
    32af:	0f 84 76 00 00 00    	je     332b <main+0x332b>
                chain.key = key;
    32b5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    32b9:	ff f1                	push   %rcx
    32bb:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    32c2:	48 03 cd             	add    %rbp,%rcx
    32c5:	48 8b 11             	mov    (%rcx),%rdx
    32c8:	8f c1                	pop    %rcx
    32ca:	48 89 0a             	mov    %rcx,(%rdx)
                chain.val = val;
    32cd:	8b 4d 20             	mov    0x20(%rbp),%ecx
    32d0:	48 63 c9             	movslq %ecx,%rcx
    32d3:	ff f1                	push   %rcx
    32d5:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    32dc:	48 03 cd             	add    %rbp,%rcx
    32df:	48 8b 11             	mov    (%rcx),%rdx
    32e2:	b9 10 00 00 00       	mov    $0x10,%ecx
    32e7:	48 03 d1             	add    %rcx,%rdx
    32ea:	8f c1                	pop    %rcx
    32ec:	89 0a                	mov    %ecx,(%rdx)
                count++;
    32ee:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    32f2:	48 8b c9             	mov    %rcx,%rcx
    32f5:	ba 20 00 00 00       	mov    $0x20,%edx
    32fa:	48 03 ca             	add    %rdx,%rcx
    32fd:	8b 11                	mov    (%rcx),%edx
    32ff:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    3306:	89 11                	mov    %edx,(%rcx)
                return &chain.val;
    3308:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    330f:	48 03 cd             	add    %rbp,%rcx
    3312:	48 8b 11             	mov    (%rcx),%rdx
    3315:	b9 10 00 00 00       	mov    $0x10,%ecx
    331a:	48 03 d1             	add    %rcx,%rdx
    331d:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3321:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3328:	8f c5                	pop    %rbp
    332a:	c3                   	ret
            }
            if chain.key == key {
    332b:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3332:	48 03 cd             	add    %rbp,%rcx
    3335:	48 8b 11             	mov    (%rcx),%rdx
    3338:	48 8b 0a             	mov    (%rdx),%rcx
    333b:	ff f1                	push   %rcx
    333d:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    3341:	8f c2                	pop    %rdx
    3343:	48 3b d1             	cmp    %rcx,%rdx
    3346:	40 0f 94 c2          	rex sete %dl
    334a:	48 0f b6 d2          	movzbq %dl,%rdx
    334e:	48 83 fa 00          	cmp    $0x0,%rdx
    3352:	0f 84 5d 00 00 00    	je     33b5 <main+0x33b5>
                destruct(&chain.val)
    3358:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    335f:	48 03 cd             	add    %rbp,%rcx
    3362:	48 8b 11             	mov    (%rcx),%rdx
    3365:	b9 10 00 00 00       	mov    $0x10,%ecx
    336a:	48 03 d1             	add    %rcx,%rdx
    336d:	33 c9                	xor    %ecx,%ecx
    336f:	89 0a                	mov    %ecx,(%rdx)
                chain.val = val;
    3371:	8b 4d 20             	mov    0x20(%rbp),%ecx
    3374:	48 63 c9             	movslq %ecx,%rcx
    3377:	ff f1                	push   %rcx
    3379:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3380:	48 03 cd             	add    %rbp,%rcx
    3383:	48 8b 11             	mov    (%rcx),%rdx
    3386:	b9 10 00 00 00       	mov    $0x10,%ecx
    338b:	48 03 d1             	add    %rcx,%rdx
    338e:	8f c1                	pop    %rcx
    3390:	89 0a                	mov    %ecx,(%rdx)
                return &chain.val;
    3392:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3399:	48 03 cd             	add    %rbp,%rcx
    339c:	48 8b 11             	mov    (%rcx),%rdx
    339f:	b9 10 00 00 00       	mov    $0x10,%ecx
    33a4:	48 03 d1             	add    %rcx,%rdx
    33a7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    33ab:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    33b2:	8f c5                	pop    %rbp
    33b4:	c3                   	ret
            }
            if chain.next == MAP_CHAIN_INDEX_NULL {
    33b5:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    33bc:	48 03 cd             	add    %rbp,%rcx
    33bf:	48 8b 11             	mov    (%rcx),%rdx
    33c2:	b9 08 00 00 00       	mov    $0x8,%ecx
    33c7:	48 03 d1             	add    %rcx,%rdx
    33ca:	8b 0a                	mov    (%rdx),%ecx
    33cc:	ff f1                	push   %rcx
    33ce:	b9 00 00 00 00       	mov    $0x0,%ecx
    33d3:	8f c2                	pop    %rdx
    33d5:	3b d1                	cmp    %ecx,%edx
    33d7:	40 0f 94 c2          	rex sete %dl
    33db:	48 0f b6 d2          	movzbq %dl,%rdx
    33df:	48 83 fa 00          	cmp    $0x0,%rdx
    33e3:	0f 84 f4 00 00 00    	je     34dd <main+0x34dd>
                chain.next = chains.size()+1; // not size because 0 is seen as null
    33e9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    33f0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    33f4:	48 8b c9             	mov    %rcx,%rcx
    33f7:	ba 00 00 00 00       	mov    $0x0,%edx
    33fc:	48 03 ca             	add    %rdx,%rcx
    33ff:	48 89 0c 24          	mov    %rcx,(%rsp)
    3403:	e8 43 d4 ff ff       	call   84b <main+0x84b>
    3408:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    340f:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    3413:	48 63 c9             	movslq %ecx,%rcx
    3416:	ff f1                	push   %rcx
    3418:	b9 01 00 00 00       	mov    $0x1,%ecx
    341d:	8f c2                	pop    %rdx
    341f:	03 d1                	add    %ecx,%edx
    3421:	ff f2                	push   %rdx
    3423:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    342a:	48 03 cd             	add    %rbp,%rcx
    342d:	48 8b 11             	mov    (%rcx),%rdx
    3430:	b9 08 00 00 00       	mov    $0x8,%ecx
    3435:	48 03 d1             	add    %rcx,%rdx
    3438:	8f c1                	pop    %rcx
    343a:	89 0a                	mov    %ecx,(%rdx)
                chain2 := chains.add(MapChain<Key,Val>{
    343c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    3443:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3447:	48 8b c9             	mov    %rcx,%rcx
    344a:	ba 00 00 00 00       	mov    $0x0,%edx
    344f:	48 03 ca             	add    %rdx,%rcx
    3452:	ff f1                	push   %rcx
    3454:	8b 4d 20             	mov    0x20(%rbp),%ecx
    3457:	48 63 c9             	movslq %ecx,%rcx
    345a:	ff f1                	push   %rcx
    345c:	b9 00 00 00 00       	mov    $0x0,%ecx
    3461:	ff f1                	push   %rcx
    3463:	b9 00 00 00 00       	mov    $0x0,%ecx
    3468:	ff f1                	push   %rcx
    346a:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    346e:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    3473:	8f c1                	pop    %rcx
    3475:	89 4c 24 28          	mov    %ecx,0x28(%rsp)
    3479:	8f c1                	pop    %rcx
    347b:	88 4c 24 24          	mov    %cl,0x24(%rsp)
    347f:	8f c1                	pop    %rcx
    3481:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    3485:	8f c1                	pop    %rcx
    3487:	48 89 0c 24          	mov    %rcx,(%rsp)
    348b:	e8 8b ce ff ff       	call   31b <main+0x31b>
    3490:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    3497:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    349c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
                    key = key, next = 0, unused = false, val = val
                });
                count++;
    34a0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    34a4:	48 8b c9             	mov    %rcx,%rcx
    34a7:	ba 20 00 00 00       	mov    $0x20,%edx
    34ac:	48 03 ca             	add    %rdx,%rcx
    34af:	8b 11                	mov    (%rcx),%edx
    34b1:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    34b8:	89 11                	mov    %edx,(%rcx)
                return &chain2.val;
    34ba:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    34c1:	48 03 cd             	add    %rbp,%rcx
    34c4:	48 8b 11             	mov    (%rcx),%rdx
    34c7:	b9 10 00 00 00       	mov    $0x10,%ecx
    34cc:	48 03 d1             	add    %rcx,%rdx
    34cf:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    34d3:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    34da:	8f c5                	pop    %rbp
    34dc:	c3                   	ret
            }
            index = chain.next;
    34dd:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    34e4:	48 03 cd             	add    %rbp,%rcx
    34e7:	48 8b 11             	mov    (%rcx),%rdx
    34ea:	b9 08 00 00 00       	mov    $0x8,%ecx
    34ef:	48 03 d1             	add    %rcx,%rdx
    34f2:	8b 0a                	mov    (%rdx),%ecx
    34f4:	ff f1                	push   %rcx
    34f6:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    34fd:	48 03 cd             	add    %rbp,%rcx
    3500:	8f c2                	pop    %rdx
    3502:	89 11                	mov    %edx,(%rcx)
    3504:	e9 15 fd ff ff       	jmp    321e <main+0x321e>
        }
        // UNREACHABLE
        return null;
    3509:	b9 00 00 00 00       	mov    $0x0,%ecx
    350e:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    3512:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3519:	8f c5                	pop    %rbp
    351b:	c3                   	ret
    fn set(key: Key, val: Val) -> Val* {
    351c:	ff f5                	push   %rbp
    351e:	48 8b ec             	mov    %rsp,%rbp
    3521:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
        slot := hash(key);
    3528:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    352f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3533:	48 8b c9             	mov    %rcx,%rcx
    3536:	ff f1                	push   %rcx
    3538:	8b 4d 18             	mov    0x18(%rbp),%ecx
    353b:	8b c9                	mov    %ecx,%ecx
    353d:	8b d1                	mov    %ecx,%edx
    353f:	89 54 24 10          	mov    %edx,0x10(%rsp)
    3543:	8f c1                	pop    %rcx
    3545:	48 89 0c 24          	mov    %rcx,(%rsp)
    3549:	e8 bb f3 ff ff       	call   2909 <main+0x2909>
    354e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3555:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    3559:	48 63 c9             	movslq %ecx,%rcx
    355c:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        if slot >= table.len {
    355f:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    3562:	ff f1                	push   %rcx
    3564:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3568:	48 8b c9             	mov    %rcx,%rcx
    356b:	ba 10 00 00 00       	mov    $0x10,%edx
    3570:	48 03 ca             	add    %rdx,%rcx
    3573:	ba 0c 00 00 00       	mov    $0xc,%edx
    3578:	48 03 ca             	add    %rdx,%rcx
    357b:	8b 11                	mov    (%rcx),%edx
    357d:	8f c1                	pop    %rcx
    357f:	3b ca                	cmp    %edx,%ecx
    3581:	40 0f 9d c1          	rex setge %cl
    3585:	48 0f b6 c9          	movzbq %cl,%rcx
    3589:	48 83 f9 00          	cmp    $0x0,%rcx
    358d:	0f 84 91 00 00 00    	je     3624 <main+0x3624>
            if table.len == 0
    3593:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3597:	48 8b c9             	mov    %rcx,%rcx
    359a:	ba 10 00 00 00       	mov    $0x10,%edx
    359f:	48 03 ca             	add    %rdx,%rcx
    35a2:	ba 0c 00 00 00       	mov    $0xc,%edx
    35a7:	48 03 ca             	add    %rdx,%rcx
    35aa:	8b 11                	mov    (%rcx),%edx
    35ac:	ff f2                	push   %rdx
    35ae:	b9 00 00 00 00       	mov    $0x0,%ecx
    35b3:	8f c2                	pop    %rdx
    35b5:	3b d1                	cmp    %ecx,%edx
    35b7:	40 0f 94 c2          	rex sete %dl
    35bb:	48 0f b6 d2          	movzbq %dl,%rdx
    35bf:	48 83 fa 00          	cmp    $0x0,%rdx
    35c3:	0f 84 48 00 00 00    	je     3611 <main+0x3611>
                log("Dude, you forgot to initialize the hash map (Map.btb)")
    35c9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    35d0:	b9 35 00 00 00       	mov    $0x35,%ecx
    35d5:	ff f1                	push   %rcx
    35d7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 35de <main+0x35de>
    35de:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    35e3:	8f c1                	pop    %rcx
    35e5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    35ea:	e8 a3 0a 00 00       	call   4092 <main+0x4092>
    35ef:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    35f6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    35fd:	b9 0a 00 00 00       	mov    $0xa,%ecx
    3602:	88 0c 24             	mov    %cl,(%rsp)
    3605:	e8 e7 09 00 00       	call   3ff1 <main+0x3ff1>
    360a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
            return null;
    3611:	b9 00 00 00 00       	mov    $0x0,%ecx
    3616:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    361a:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3621:	8f c5                	pop    %rbp
    3623:	c3                   	ret
        index := table.get(slot);
    3624:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    362b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    362f:	48 8b c9             	mov    %rcx,%rcx
    3632:	ba 10 00 00 00       	mov    $0x10,%edx
    3637:	48 03 ca             	add    %rdx,%rcx
    363a:	ff f1                	push   %rcx
    363c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    363f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    3643:	8f c1                	pop    %rcx
    3645:	48 89 0c 24          	mov    %rcx,(%rsp)
    3649:	e8 fb d2 ff ff       	call   949 <main+0x949>
    364e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3655:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    3659:	48 63 c9             	movslq %ecx,%rcx
    365c:	89 4d e8             	mov    %ecx,-0x18(%rbp)
        if index == 0 {
    365f:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    3662:	ff f1                	push   %rcx
    3664:	b9 00 00 00 00       	mov    $0x0,%ecx
    3669:	8f c2                	pop    %rdx
    366b:	3b d1                	cmp    %ecx,%edx
    366d:	40 0f 94 c2          	rex sete %dl
    3671:	48 0f b6 d2          	movzbq %dl,%rdx
    3675:	48 83 fa 00          	cmp    $0x0,%rdx
    3679:	0f 84 95 01 00 00    	je     3814 <main+0x3814>
            chain := chains.add(MapChain<Key,Val>{key = key, next = 0, unused = false, val = val});
    367f:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
    3686:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    368a:	48 8b c9             	mov    %rcx,%rcx
    368d:	ba 00 00 00 00       	mov    $0x0,%edx
    3692:	48 03 ca             	add    %rdx,%rcx
    3695:	ff f1                	push   %rcx
    3697:	8b 4d 48             	mov    0x48(%rbp),%ecx
    369a:	48 63 c9             	movslq %ecx,%rcx
    369d:	ff f1                	push   %rcx
    369f:	8b 4d 44             	mov    0x44(%rbp),%ecx
    36a2:	48 63 c9             	movslq %ecx,%rcx
    36a5:	ff f1                	push   %rcx
    36a7:	8b 4d 40             	mov    0x40(%rbp),%ecx
    36aa:	48 63 c9             	movslq %ecx,%rcx
    36ad:	ff f1                	push   %rcx
    36af:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
    36b3:	ff f1                	push   %rcx
    36b5:	8b 4d 34             	mov    0x34(%rbp),%ecx
    36b8:	48 63 c9             	movslq %ecx,%rcx
    36bb:	ff f1                	push   %rcx
    36bd:	8b 4d 30             	mov    0x30(%rbp),%ecx
    36c0:	48 63 c9             	movslq %ecx,%rcx
    36c3:	ff f1                	push   %rcx
    36c5:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    36c9:	ff f1                	push   %rcx
    36cb:	8b 4d 24             	mov    0x24(%rbp),%ecx
    36ce:	48 63 c9             	movslq %ecx,%rcx
    36d1:	ff f1                	push   %rcx
    36d3:	48 8a 4d 23          	rex.W mov 0x23(%rbp),%cl
    36d7:	48 0f b6 c9          	movzbq %cl,%rcx
    36db:	ff f1                	push   %rcx
    36dd:	48 8a 4d 22          	rex.W mov 0x22(%rbp),%cl
    36e1:	48 0f b6 c9          	movzbq %cl,%rcx
    36e5:	ff f1                	push   %rcx
    36e7:	66 8b 4d 20          	mov    0x20(%rbp),%cx
    36eb:	48 0f b7 c9          	movzwq %cx,%rcx
    36ef:	ff f1                	push   %rcx
    36f1:	b9 00 00 00 00       	mov    $0x0,%ecx
    36f6:	ff f1                	push   %rcx
    36f8:	b9 00 00 00 00       	mov    $0x0,%ecx
    36fd:	ff f1                	push   %rcx
    36ff:	8b 4d 18             	mov    0x18(%rbp),%ecx
    3702:	8b c9                	mov    %ecx,%ecx
    3704:	89 4c 24 78          	mov    %ecx,0x78(%rsp)
    3708:	8f c1                	pop    %rcx
    370a:	89 4c 24 74          	mov    %ecx,0x74(%rsp)
    370e:	8f c1                	pop    %rcx
    3710:	88 4c 24 70          	mov    %cl,0x70(%rsp)
    3714:	8f c1                	pop    %rcx
    3716:	66 89 4c 24 70       	mov    %cx,0x70(%rsp)
    371b:	8f c1                	pop    %rcx
    371d:	88 4c 24 6a          	mov    %cl,0x6a(%rsp)
    3721:	8f c1                	pop    %rcx
    3723:	88 4c 24 63          	mov    %cl,0x63(%rsp)
    3727:	8f c1                	pop    %rcx
    3729:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
    372d:	8f c1                	pop    %rcx
    372f:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
    3734:	8f c1                	pop    %rcx
    3736:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    373a:	8f c1                	pop    %rcx
    373c:	89 4c 24 54          	mov    %ecx,0x54(%rsp)
    3740:	8f c1                	pop    %rcx
    3742:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    3747:	8f c1                	pop    %rcx
    3749:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    374d:	8f c1                	pop    %rcx
    374f:	89 4c 24 4c          	mov    %ecx,0x4c(%rsp)
    3753:	8f c1                	pop    %rcx
    3755:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    3759:	8f c1                	pop    %rcx
    375b:	48 89 0c 24          	mov    %rcx,(%rsp)
    375f:	e8 39 cd ff ff       	call   49d <main+0x49d>
    3764:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
    376b:	48 8b 4c 24 98       	mov    -0x68(%rsp),%rcx
    3770:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            table.ptr[slot] = chains.size(); // not size-1 because 0 is seen as null
    3774:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    377b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    377f:	48 8b c9             	mov    %rcx,%rcx
    3782:	ba 00 00 00 00       	mov    $0x0,%edx
    3787:	48 03 ca             	add    %rdx,%rcx
    378a:	48 89 0c 24          	mov    %rcx,(%rsp)
    378e:	e8 fe d0 ff ff       	call   891 <main+0x891>
    3793:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    379a:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    379e:	48 63 c9             	movslq %ecx,%rcx
    37a1:	ff f1                	push   %rcx
    37a3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    37a7:	48 8b c9             	mov    %rcx,%rcx
    37aa:	ba 10 00 00 00       	mov    $0x10,%edx
    37af:	48 03 ca             	add    %rdx,%rcx
    37b2:	ff f1                	push   %rcx
    37b4:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    37b7:	8f c2                	pop    %rdx
    37b9:	48 8b 1a             	mov    (%rdx),%rbx
    37bc:	ba 04 00 00 00       	mov    $0x4,%edx
    37c1:	48 8b fa             	mov    %rdx,%rdi
    37c4:	48 8b c1             	mov    %rcx,%rax
    37c7:	48 f7 e7             	mul    %rdi
    37ca:	48 8b c8             	mov    %rax,%rcx
    37cd:	48 8b d7             	mov    %rdi,%rdx
    37d0:	48 03 d9             	add    %rcx,%rbx
    37d3:	8f c1                	pop    %rcx
    37d5:	89 0b                	mov    %ecx,(%rbx)
            count++;
    37d7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    37db:	48 8b c9             	mov    %rcx,%rcx
    37de:	ba 20 00 00 00       	mov    $0x20,%edx
    37e3:	48 03 ca             	add    %rdx,%rcx
    37e6:	8b 11                	mov    (%rcx),%edx
    37e8:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    37ef:	89 11                	mov    %edx,(%rcx)
            return &chain.val;
    37f1:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    37f8:	48 03 cd             	add    %rbp,%rcx
    37fb:	48 8b 11             	mov    (%rcx),%rdx
    37fe:	b9 10 00 00 00       	mov    $0x10,%ecx
    3803:	48 03 d1             	add    %rcx,%rdx
    3806:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    380a:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3811:	8f c5                	pop    %rbp
    3813:	c3                   	ret
            chain := chains.get_unsafe(index-1); // -1 because 0 is null
    3814:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    381b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    381f:	48 8b c9             	mov    %rcx,%rcx
    3822:	ba 00 00 00 00       	mov    $0x0,%edx
    3827:	48 03 ca             	add    %rdx,%rcx
    382a:	ff f1                	push   %rcx
    382c:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    382f:	ff f1                	push   %rcx
    3831:	b9 01 00 00 00       	mov    $0x1,%ecx
    3836:	8f c2                	pop    %rdx
    3838:	2b d1                	sub    %ecx,%edx
    383a:	89 54 24 10          	mov    %edx,0x10(%rsp)
    383e:	8f c1                	pop    %rcx
    3840:	48 89 0c 24          	mov    %rcx,(%rsp)
    3844:	e8 03 d2 ff ff       	call   a4c <main+0xa4c>
    3849:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3850:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    3855:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
            if !chain
    3859:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    385d:	48 85 c9             	test   %rcx,%rcx
    3860:	40 0f 94 c1          	rex sete %cl
    3864:	48 0f b6 c9          	movzbq %cl,%rcx
    3868:	48 83 f9 00          	cmp    $0x0,%rcx
    386c:	0f 84 13 00 00 00    	je     3885 <main+0x3885>
                return null; // TODO: Bug, assert instead
    3872:	b9 00 00 00 00       	mov    $0x0,%ecx
    3877:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    387b:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3882:	8f c5                	pop    %rbp
    3884:	c3                   	ret
            if chain.unused {
    3885:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    388c:	48 03 cd             	add    %rbp,%rcx
    388f:	48 8b 11             	mov    (%rcx),%rdx
    3892:	b9 08 00 00 00       	mov    $0x8,%ecx
    3897:	48 03 d1             	add    %rcx,%rdx
    389a:	48 8a 0a             	rex.W mov (%rdx),%cl
    389d:	48 0f b6 c9          	movzbq %cl,%rcx
    38a1:	48 83 f9 00          	cmp    $0x0,%rcx
    38a5:	0f 84 fd 00 00 00    	je     39a8 <main+0x39a8>
                chain.key = key;
    38ab:	8b 4d 18             	mov    0x18(%rbp),%ecx
    38ae:	8b c9                	mov    %ecx,%ecx
    38b0:	ff f1                	push   %rcx
    38b2:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    38b9:	48 03 cd             	add    %rbp,%rcx
    38bc:	48 8b 11             	mov    (%rcx),%rdx
    38bf:	8f c1                	pop    %rcx
    38c1:	89 0a                	mov    %ecx,(%rdx)
                chain.val = val;
    38c3:	8b 4d 48             	mov    0x48(%rbp),%ecx
    38c6:	48 63 c9             	movslq %ecx,%rcx
    38c9:	ff f1                	push   %rcx
    38cb:	8b 4d 44             	mov    0x44(%rbp),%ecx
    38ce:	48 63 c9             	movslq %ecx,%rcx
    38d1:	ff f1                	push   %rcx
    38d3:	8b 4d 40             	mov    0x40(%rbp),%ecx
    38d6:	48 63 c9             	movslq %ecx,%rcx
    38d9:	ff f1                	push   %rcx
    38db:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
    38df:	ff f1                	push   %rcx
    38e1:	8b 4d 34             	mov    0x34(%rbp),%ecx
    38e4:	48 63 c9             	movslq %ecx,%rcx
    38e7:	ff f1                	push   %rcx
    38e9:	8b 4d 30             	mov    0x30(%rbp),%ecx
    38ec:	48 63 c9             	movslq %ecx,%rcx
    38ef:	ff f1                	push   %rcx
    38f1:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    38f5:	ff f1                	push   %rcx
    38f7:	8b 4d 24             	mov    0x24(%rbp),%ecx
    38fa:	48 63 c9             	movslq %ecx,%rcx
    38fd:	ff f1                	push   %rcx
    38ff:	48 8a 4d 23          	rex.W mov 0x23(%rbp),%cl
    3903:	48 0f b6 c9          	movzbq %cl,%rcx
    3907:	ff f1                	push   %rcx
    3909:	48 8a 4d 22          	rex.W mov 0x22(%rbp),%cl
    390d:	48 0f b6 c9          	movzbq %cl,%rcx
    3911:	ff f1                	push   %rcx
    3913:	66 8b 4d 20          	mov    0x20(%rbp),%cx
    3917:	48 0f b7 c9          	movzwq %cx,%rcx
    391b:	ff f1                	push   %rcx
    391d:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3924:	48 03 cd             	add    %rbp,%rcx
    3927:	48 8b 11             	mov    (%rcx),%rdx
    392a:	b9 10 00 00 00       	mov    $0x10,%ecx
    392f:	48 03 d1             	add    %rcx,%rdx
    3932:	8f c1                	pop    %rcx
    3934:	66 89 0a             	mov    %cx,(%rdx)
    3937:	8f c1                	pop    %rcx
    3939:	88 4a 02             	mov    %cl,0x2(%rdx)
    393c:	8f c1                	pop    %rcx
    393e:	88 4a 03             	mov    %cl,0x3(%rdx)
    3941:	8f c1                	pop    %rcx
    3943:	89 4a 04             	mov    %ecx,0x4(%rdx)
    3946:	8f c1                	pop    %rcx
    3948:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    394c:	8f c1                	pop    %rcx
    394e:	89 4a 10             	mov    %ecx,0x10(%rdx)
    3951:	8f c1                	pop    %rcx
    3953:	89 4a 14             	mov    %ecx,0x14(%rdx)
    3956:	8f c1                	pop    %rcx
    3958:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
    395c:	8f c1                	pop    %rcx
    395e:	89 4a 20             	mov    %ecx,0x20(%rdx)
    3961:	8f c1                	pop    %rcx
    3963:	89 4a 24             	mov    %ecx,0x24(%rdx)
    3966:	8f c1                	pop    %rcx
    3968:	89 4a 28             	mov    %ecx,0x28(%rdx)
                count++;
    396b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    396f:	48 8b c9             	mov    %rcx,%rcx
    3972:	ba 20 00 00 00       	mov    $0x20,%edx
    3977:	48 03 ca             	add    %rdx,%rcx
    397a:	8b 11                	mov    (%rcx),%edx
    397c:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    3983:	89 11                	mov    %edx,(%rcx)
                return &chain.val;
    3985:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    398c:	48 03 cd             	add    %rbp,%rcx
    398f:	48 8b 11             	mov    (%rcx),%rdx
    3992:	b9 10 00 00 00       	mov    $0x10,%ecx
    3997:	48 03 d1             	add    %rcx,%rdx
    399a:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    399e:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    39a5:	8f c5                	pop    %rbp
    39a7:	c3                   	ret
            if chain.key == key {
    39a8:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    39af:	48 03 cd             	add    %rbp,%rcx
    39b2:	48 8b 11             	mov    (%rcx),%rdx
    39b5:	8b 0a                	mov    (%rdx),%ecx
    39b7:	ff f1                	push   %rcx
    39b9:	8b 4d 18             	mov    0x18(%rbp),%ecx
    39bc:	8b c9                	mov    %ecx,%ecx
    39be:	8f c2                	pop    %rdx
    39c0:	3b d1                	cmp    %ecx,%edx
    39c2:	40 0f 94 c2          	rex sete %dl
    39c6:	48 0f b6 d2          	movzbq %dl,%rdx
    39ca:	48 83 fa 00          	cmp    $0x0,%rdx
    39ce:	0f 84 02 01 00 00    	je     3ad6 <main+0x3ad6>
                destruct(&chain.val)
    39d4:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    39db:	48 03 cd             	add    %rbp,%rcx
    39de:	48 8b 11             	mov    (%rcx),%rdx
    39e1:	b9 10 00 00 00       	mov    $0x10,%ecx
    39e6:	48 03 d1             	add    %rcx,%rdx
    39e9:	b9 30 00 00 00       	mov    $0x30,%ecx
    39ee:	ff f2                	push   %rdx
    39f0:	ff f1                	push   %rcx
    39f2:	48 01 d1             	add    %rdx,%rcx
    39f5:	48 3b ca             	cmp    %rdx,%rcx
    39f8:	74 0d                	je     3a07 <main+0x3a07>
    39fa:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    3a01:	48 83 c2 08          	add    $0x8,%rdx
    3a05:	eb ee                	jmp    39f5 <main+0x39f5>
    3a07:	8f c1                	pop    %rcx
    3a09:	8f c2                	pop    %rdx
                chain.val = val;
    3a0b:	8b 4d 48             	mov    0x48(%rbp),%ecx
    3a0e:	48 63 c9             	movslq %ecx,%rcx
    3a11:	ff f1                	push   %rcx
    3a13:	8b 4d 44             	mov    0x44(%rbp),%ecx
    3a16:	48 63 c9             	movslq %ecx,%rcx
    3a19:	ff f1                	push   %rcx
    3a1b:	8b 4d 40             	mov    0x40(%rbp),%ecx
    3a1e:	48 63 c9             	movslq %ecx,%rcx
    3a21:	ff f1                	push   %rcx
    3a23:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
    3a27:	ff f1                	push   %rcx
    3a29:	8b 4d 34             	mov    0x34(%rbp),%ecx
    3a2c:	48 63 c9             	movslq %ecx,%rcx
    3a2f:	ff f1                	push   %rcx
    3a31:	8b 4d 30             	mov    0x30(%rbp),%ecx
    3a34:	48 63 c9             	movslq %ecx,%rcx
    3a37:	ff f1                	push   %rcx
    3a39:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    3a3d:	ff f1                	push   %rcx
    3a3f:	8b 4d 24             	mov    0x24(%rbp),%ecx
    3a42:	48 63 c9             	movslq %ecx,%rcx
    3a45:	ff f1                	push   %rcx
    3a47:	48 8a 4d 23          	rex.W mov 0x23(%rbp),%cl
    3a4b:	48 0f b6 c9          	movzbq %cl,%rcx
    3a4f:	ff f1                	push   %rcx
    3a51:	48 8a 4d 22          	rex.W mov 0x22(%rbp),%cl
    3a55:	48 0f b6 c9          	movzbq %cl,%rcx
    3a59:	ff f1                	push   %rcx
    3a5b:	66 8b 4d 20          	mov    0x20(%rbp),%cx
    3a5f:	48 0f b7 c9          	movzwq %cx,%rcx
    3a63:	ff f1                	push   %rcx
    3a65:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3a6c:	48 03 cd             	add    %rbp,%rcx
    3a6f:	48 8b 11             	mov    (%rcx),%rdx
    3a72:	b9 10 00 00 00       	mov    $0x10,%ecx
    3a77:	48 03 d1             	add    %rcx,%rdx
    3a7a:	8f c1                	pop    %rcx
    3a7c:	66 89 0a             	mov    %cx,(%rdx)
    3a7f:	8f c1                	pop    %rcx
    3a81:	88 4a 02             	mov    %cl,0x2(%rdx)
    3a84:	8f c1                	pop    %rcx
    3a86:	88 4a 03             	mov    %cl,0x3(%rdx)
    3a89:	8f c1                	pop    %rcx
    3a8b:	89 4a 04             	mov    %ecx,0x4(%rdx)
    3a8e:	8f c1                	pop    %rcx
    3a90:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    3a94:	8f c1                	pop    %rcx
    3a96:	89 4a 10             	mov    %ecx,0x10(%rdx)
    3a99:	8f c1                	pop    %rcx
    3a9b:	89 4a 14             	mov    %ecx,0x14(%rdx)
    3a9e:	8f c1                	pop    %rcx
    3aa0:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
    3aa4:	8f c1                	pop    %rcx
    3aa6:	89 4a 20             	mov    %ecx,0x20(%rdx)
    3aa9:	8f c1                	pop    %rcx
    3aab:	89 4a 24             	mov    %ecx,0x24(%rdx)
    3aae:	8f c1                	pop    %rcx
    3ab0:	89 4a 28             	mov    %ecx,0x28(%rdx)
                return &chain.val;
    3ab3:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3aba:	48 03 cd             	add    %rbp,%rcx
    3abd:	48 8b 11             	mov    (%rcx),%rdx
    3ac0:	b9 10 00 00 00       	mov    $0x10,%ecx
    3ac5:	48 03 d1             	add    %rcx,%rdx
    3ac8:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3acc:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3ad3:	8f c5                	pop    %rbp
    3ad5:	c3                   	ret
            if chain.next == MAP_CHAIN_INDEX_NULL {
    3ad6:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3add:	48 03 cd             	add    %rbp,%rcx
    3ae0:	48 8b 11             	mov    (%rcx),%rdx
    3ae3:	b9 04 00 00 00       	mov    $0x4,%ecx
    3ae8:	48 03 d1             	add    %rcx,%rdx
    3aeb:	8b 0a                	mov    (%rdx),%ecx
    3aed:	ff f1                	push   %rcx
    3aef:	b9 00 00 00 00       	mov    $0x0,%ecx
    3af4:	8f c2                	pop    %rdx
    3af6:	3b d1                	cmp    %ecx,%edx
    3af8:	40 0f 94 c2          	rex sete %dl
    3afc:	48 0f b6 d2          	movzbq %dl,%rdx
    3b00:	48 83 fa 00          	cmp    $0x0,%rdx
    3b04:	0f 84 85 01 00 00    	je     3c8f <main+0x3c8f>
                chain.next = chains.size()+1; // not size because 0 is seen as null
    3b0a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3b11:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3b15:	48 8b c9             	mov    %rcx,%rcx
    3b18:	ba 00 00 00 00       	mov    $0x0,%edx
    3b1d:	48 03 ca             	add    %rdx,%rcx
    3b20:	48 89 0c 24          	mov    %rcx,(%rsp)
    3b24:	e8 68 cd ff ff       	call   891 <main+0x891>
    3b29:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3b30:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    3b34:	48 63 c9             	movslq %ecx,%rcx
    3b37:	ff f1                	push   %rcx
    3b39:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b3e:	8f c2                	pop    %rdx
    3b40:	03 d1                	add    %ecx,%edx
    3b42:	ff f2                	push   %rdx
    3b44:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3b4b:	48 03 cd             	add    %rbp,%rcx
    3b4e:	48 8b 11             	mov    (%rcx),%rdx
    3b51:	b9 04 00 00 00       	mov    $0x4,%ecx
    3b56:	48 03 d1             	add    %rcx,%rdx
    3b59:	8f c1                	pop    %rcx
    3b5b:	89 0a                	mov    %ecx,(%rdx)
                chain2 := chains.add(MapChain<Key,Val>{
    3b5d:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
    3b64:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3b68:	48 8b c9             	mov    %rcx,%rcx
    3b6b:	ba 00 00 00 00       	mov    $0x0,%edx
    3b70:	48 03 ca             	add    %rdx,%rcx
    3b73:	ff f1                	push   %rcx
    3b75:	8b 4d 48             	mov    0x48(%rbp),%ecx
    3b78:	48 63 c9             	movslq %ecx,%rcx
    3b7b:	ff f1                	push   %rcx
    3b7d:	8b 4d 44             	mov    0x44(%rbp),%ecx
    3b80:	48 63 c9             	movslq %ecx,%rcx
    3b83:	ff f1                	push   %rcx
    3b85:	8b 4d 40             	mov    0x40(%rbp),%ecx
    3b88:	48 63 c9             	movslq %ecx,%rcx
    3b8b:	ff f1                	push   %rcx
    3b8d:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
    3b91:	ff f1                	push   %rcx
    3b93:	8b 4d 34             	mov    0x34(%rbp),%ecx
    3b96:	48 63 c9             	movslq %ecx,%rcx
    3b99:	ff f1                	push   %rcx
    3b9b:	8b 4d 30             	mov    0x30(%rbp),%ecx
    3b9e:	48 63 c9             	movslq %ecx,%rcx
    3ba1:	ff f1                	push   %rcx
    3ba3:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    3ba7:	ff f1                	push   %rcx
    3ba9:	8b 4d 24             	mov    0x24(%rbp),%ecx
    3bac:	48 63 c9             	movslq %ecx,%rcx
    3baf:	ff f1                	push   %rcx
    3bb1:	48 8a 4d 23          	rex.W mov 0x23(%rbp),%cl
    3bb5:	48 0f b6 c9          	movzbq %cl,%rcx
    3bb9:	ff f1                	push   %rcx
    3bbb:	48 8a 4d 22          	rex.W mov 0x22(%rbp),%cl
    3bbf:	48 0f b6 c9          	movzbq %cl,%rcx
    3bc3:	ff f1                	push   %rcx
    3bc5:	66 8b 4d 20          	mov    0x20(%rbp),%cx
    3bc9:	48 0f b7 c9          	movzwq %cx,%rcx
    3bcd:	ff f1                	push   %rcx
    3bcf:	b9 00 00 00 00       	mov    $0x0,%ecx
    3bd4:	ff f1                	push   %rcx
    3bd6:	b9 00 00 00 00       	mov    $0x0,%ecx
    3bdb:	ff f1                	push   %rcx
    3bdd:	8b 4d 18             	mov    0x18(%rbp),%ecx
    3be0:	8b c9                	mov    %ecx,%ecx
    3be2:	89 4c 24 78          	mov    %ecx,0x78(%rsp)
    3be6:	8f c1                	pop    %rcx
    3be8:	89 4c 24 74          	mov    %ecx,0x74(%rsp)
    3bec:	8f c1                	pop    %rcx
    3bee:	88 4c 24 70          	mov    %cl,0x70(%rsp)
    3bf2:	8f c1                	pop    %rcx
    3bf4:	66 89 4c 24 70       	mov    %cx,0x70(%rsp)
    3bf9:	8f c1                	pop    %rcx
    3bfb:	88 4c 24 6a          	mov    %cl,0x6a(%rsp)
    3bff:	8f c1                	pop    %rcx
    3c01:	88 4c 24 63          	mov    %cl,0x63(%rsp)
    3c05:	8f c1                	pop    %rcx
    3c07:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
    3c0b:	8f c1                	pop    %rcx
    3c0d:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
    3c12:	8f c1                	pop    %rcx
    3c14:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    3c18:	8f c1                	pop    %rcx
    3c1a:	89 4c 24 54          	mov    %ecx,0x54(%rsp)
    3c1e:	8f c1                	pop    %rcx
    3c20:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    3c25:	8f c1                	pop    %rcx
    3c27:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    3c2b:	8f c1                	pop    %rcx
    3c2d:	89 4c 24 4c          	mov    %ecx,0x4c(%rsp)
    3c31:	8f c1                	pop    %rcx
    3c33:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    3c37:	8f c1                	pop    %rcx
    3c39:	48 89 0c 24          	mov    %rcx,(%rsp)
    3c3d:	e8 5b c8 ff ff       	call   49d <main+0x49d>
    3c42:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
    3c49:	48 8b 4c 24 98       	mov    -0x68(%rsp),%rcx
    3c4e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
                count++;
    3c52:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3c56:	48 8b c9             	mov    %rcx,%rcx
    3c59:	ba 20 00 00 00       	mov    $0x20,%edx
    3c5e:	48 03 ca             	add    %rdx,%rcx
    3c61:	8b 11                	mov    (%rcx),%edx
    3c63:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    3c6a:	89 11                	mov    %edx,(%rcx)
                return &chain2.val;
    3c6c:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    3c73:	48 03 cd             	add    %rbp,%rcx
    3c76:	48 8b 11             	mov    (%rcx),%rdx
    3c79:	b9 10 00 00 00       	mov    $0x10,%ecx
    3c7e:	48 03 d1             	add    %rcx,%rdx
    3c81:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3c85:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3c8c:	8f c5                	pop    %rbp
    3c8e:	c3                   	ret
            index = chain.next;
    3c8f:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    3c96:	48 03 cd             	add    %rbp,%rcx
    3c99:	48 8b 11             	mov    (%rcx),%rdx
    3c9c:	b9 04 00 00 00       	mov    $0x4,%ecx
    3ca1:	48 03 d1             	add    %rcx,%rdx
    3ca4:	8b 0a                	mov    (%rdx),%ecx
    3ca6:	ff f1                	push   %rcx
    3ca8:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    3caf:	48 03 cd             	add    %rbp,%rcx
    3cb2:	8f c2                	pop    %rdx
    3cb4:	89 11                	mov    %edx,(%rcx)
    3cb6:	e9 59 fb ff ff       	jmp    3814 <main+0x3814>
        return null;
    3cbb:	b9 00 00 00 00       	mov    $0x0,%ecx
    3cc0:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    3cc4:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    3ccb:	8f c5                	pop    %rbp
    3ccd:	c3                   	ret
        chain := find_chain_unsafe(key);
        if chain
            return chain.val;
        return Val{};
    }
    fn find(key: Key) -> Val* {
    3cce:	ff f5                	push   %rbp
    3cd0:	48 8b ec             	mov    %rsp,%rbp
    3cd3:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        chain := find_chain_unsafe(key);
    3cda:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    3ce1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3ce5:	48 8b c9             	mov    %rcx,%rcx
    3ce8:	ff f1                	push   %rcx
    3cea:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    3cee:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    3cf3:	8f c1                	pop    %rcx
    3cf5:	48 89 0c 24          	mov    %rcx,(%rsp)
    3cf9:	e8 e0 ed ff ff       	call   2ade <main+0x2ade>
    3cfe:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3d05:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    3d0a:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        if chain
    3d0e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3d12:	ba 00 00 00 00       	mov    $0x0,%edx
    3d17:	48 3b ca             	cmp    %rdx,%rcx
    3d1a:	40 0f 95 c1          	rex setne %cl
    3d1e:	48 0f b6 c9          	movzbq %cl,%rcx
    3d22:	48 83 f9 00          	cmp    $0x0,%rcx
    3d26:	0f 84 23 00 00 00    	je     3d4f <main+0x3d4f>
            return &chain.val;
    3d2c:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    3d33:	48 03 cd             	add    %rbp,%rcx
    3d36:	48 8b 11             	mov    (%rcx),%rdx
    3d39:	b9 10 00 00 00       	mov    $0x10,%ecx
    3d3e:	48 03 d1             	add    %rcx,%rdx
    3d41:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3d45:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3d4c:	8f c5                	pop    %rbp
    3d4e:	c3                   	ret
        return null;
    3d4f:	b9 00 00 00 00       	mov    $0x0,%ecx
    3d54:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    3d58:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3d5f:	8f c5                	pop    %rbp
    3d61:	c3                   	ret
    fn find(key: Key) -> Val* {
    3d62:	ff f5                	push   %rbp
    3d64:	48 8b ec             	mov    %rsp,%rbp
    3d67:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        chain := find_chain_unsafe(key);
    3d6e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    3d75:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3d79:	48 8b c9             	mov    %rcx,%rcx
    3d7c:	ff f1                	push   %rcx
    3d7e:	8b 4d 18             	mov    0x18(%rbp),%ecx
    3d81:	8b c9                	mov    %ecx,%ecx
    3d83:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    3d87:	8f c1                	pop    %rcx
    3d89:	48 89 0c 24          	mov    %rcx,(%rsp)
    3d8d:	e8 b9 ef ff ff       	call   2d4b <main+0x2d4b>
    3d92:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3d99:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    3d9e:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        if chain
    3da2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3da6:	ba 00 00 00 00       	mov    $0x0,%edx
    3dab:	48 3b ca             	cmp    %rdx,%rcx
    3dae:	40 0f 95 c1          	rex setne %cl
    3db2:	48 0f b6 c9          	movzbq %cl,%rcx
    3db6:	48 83 f9 00          	cmp    $0x0,%rcx
    3dba:	0f 84 23 00 00 00    	je     3de3 <main+0x3de3>
            return &chain.val;
    3dc0:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    3dc7:	48 03 cd             	add    %rbp,%rcx
    3dca:	48 8b 11             	mov    (%rcx),%rdx
    3dcd:	b9 10 00 00 00       	mov    $0x10,%ecx
    3dd2:	48 03 d1             	add    %rcx,%rdx
    3dd5:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    3dd9:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3de0:	8f c5                	pop    %rbp
    3de2:	c3                   	ret
        return null;
    3de3:	b9 00 00 00 00       	mov    $0x0,%ecx
    3de8:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    3dec:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    3df3:	8f c5                	pop    %rbp
    3df5:	c3                   	ret
fn std_print(value: u64){
    s: StringBuilder
    s.append(value)
    prints(s)
}
fn std_print(value: i64){
    3df6:	ff f5                	push   %rbp
    3df8:	48 8b ec             	mov    %rsp,%rbp
    3dfb:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    s: StringBuilder
    3e02:	b9 10 00 00 00       	mov    $0x10,%ecx
    3e07:	48 ba f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rdx
    3e0e:	ff ff ff 
    3e11:	48 03 d5             	add    %rbp,%rdx
    3e14:	48 83 c2 00          	add    $0x0,%rdx
    3e18:	ff f2                	push   %rdx
    3e1a:	ff f1                	push   %rcx
    3e1c:	48 01 d1             	add    %rdx,%rcx
    3e1f:	48 3b ca             	cmp    %rdx,%rcx
    3e22:	74 0d                	je     3e31 <main+0x3e31>
    3e24:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    3e2b:	48 83 c2 08          	add    $0x8,%rdx
    3e2f:	eb ee                	jmp    3e1f <main+0x3e1f>
    3e31:	8f c1                	pop    %rcx
    3e33:	8f c2                	pop    %rdx
    s.append(value)
    3e35:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3e3c:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    3e43:	48 03 cd             	add    %rbp,%rcx
    3e46:	ff f1                	push   %rcx
    3e48:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3e4c:	48 8b c9             	mov    %rcx,%rcx
    3e4f:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    3e54:	8f c1                	pop    %rcx
    3e56:	48 89 0c 24          	mov    %rcx,(%rsp)
    3e5a:	e8 84 0c 00 00       	call   4ae3 <main+0x4ae3>
    3e5f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    prints(s)
    3e66:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3e6d:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    3e70:	ff f1                	push   %rcx
    3e72:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    3e75:	ff f1                	push   %rcx
    3e77:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3e7b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    3e80:	8f c1                	pop    %rcx
    3e82:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    3e86:	8f c1                	pop    %rcx
    3e88:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    3e8c:	e8 b5 03 00 00       	call   4246 <main+0x4246>
    3e91:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3e98:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    3e9d:	48 8b c9             	mov    %rcx,%rcx
    3ea0:	ff f1                	push   %rcx
    3ea2:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    3ea7:	8f c2                	pop    %rdx
    3ea9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3eb0:	48 8b f1             	mov    %rcx,%rsi
    3eb3:	48 8b fa             	mov    %rdx,%rdi
    3eb6:	48 83 ec 38          	sub    $0x38,%rsp
    3eba:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
    3ebf:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 3ec5 <main+0x3ec5>
    3ec5:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    3ecc:	00 00 
    3ece:	4d 31 c9             	xor    %r9,%r9
    3ed1:	49 89 f8             	mov    %rdi,%r8
    3ed4:	48 89 f2             	mov    %rsi,%rdx
    3ed7:	48 89 c1             	mov    %rax,%rcx
    3eda:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 3ee0 <main+0x3ee0>
    3ee0:	48 83 c4 38          	add    $0x38,%rsp
    3ee4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3eeb:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3ef2:	8f c5                	pop    %rbp
    3ef4:	c3                   	ret
fn std_print(value: f64, max_decimals: i32 = 3){
    s: StringBuilder
    s.append(value, max_decimals)
    prints(s)
}
fn std_print(value: void*) {
    3ef5:	ff f5                	push   %rbp
    3ef7:	48 8b ec             	mov    %rsp,%rbp
    3efa:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    s: StringBuilder
    3f01:	b9 10 00 00 00       	mov    $0x10,%ecx
    3f06:	48 ba f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rdx
    3f0d:	ff ff ff 
    3f10:	48 03 d5             	add    %rbp,%rdx
    3f13:	48 83 c2 00          	add    $0x0,%rdx
    3f17:	ff f2                	push   %rdx
    3f19:	ff f1                	push   %rcx
    3f1b:	48 01 d1             	add    %rdx,%rcx
    3f1e:	48 3b ca             	cmp    %rdx,%rcx
    3f21:	74 0d                	je     3f30 <main+0x3f30>
    3f23:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    3f2a:	48 83 c2 08          	add    $0x8,%rdx
    3f2e:	eb ee                	jmp    3f1e <main+0x3f1e>
    3f30:	8f c1                	pop    %rcx
    3f32:	8f c2                	pop    %rdx
    s.append(value)
    3f34:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3f3b:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    3f42:	48 03 cd             	add    %rbp,%rcx
    3f45:	ff f1                	push   %rcx
    3f47:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    3f4b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    3f50:	8f c1                	pop    %rcx
    3f52:	48 89 0c 24          	mov    %rcx,(%rsp)
    3f56:	e8 1b 0f 00 00       	call   4e76 <main+0x4e76>
    3f5b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    prints(s)
    3f62:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3f69:	8b 4d fc             	mov    -0x4(%rbp),%ecx
    3f6c:	ff f1                	push   %rcx
    3f6e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    3f71:	ff f1                	push   %rcx
    3f73:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3f77:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    3f7c:	8f c1                	pop    %rcx
    3f7e:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    3f82:	8f c1                	pop    %rcx
    3f84:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    3f88:	e8 b9 02 00 00       	call   4246 <main+0x4246>
    3f8d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3f94:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    3f99:	48 8b c9             	mov    %rcx,%rcx
    3f9c:	ff f1                	push   %rcx
    3f9e:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    3fa3:	8f c2                	pop    %rdx
    3fa5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    3fac:	48 8b f1             	mov    %rcx,%rsi
    3faf:	48 8b fa             	mov    %rdx,%rdi
    3fb2:	48 83 ec 38          	sub    $0x38,%rsp
    3fb6:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
    3fbb:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 3fc1 <main+0x3fc1>
    3fc1:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    3fc8:	00 00 
    3fca:	4d 31 c9             	xor    %r9,%r9
    3fcd:	49 89 f8             	mov    %rdi,%r8
    3fd0:	48 89 f2             	mov    %rsi,%rdx
    3fd3:	48 89 c1             	mov    %rax,%rcx
    3fd6:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 3fdc <main+0x3fdc>
    3fdc:	48 83 c4 38          	add    $0x38,%rsp
    3fe0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3fe7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    3fee:	8f c5                	pop    %rbp
    3ff0:	c3                   	ret
}
fn std_print(t: char){
    3ff1:	ff f5                	push   %rbp
    3ff3:	48 8b ec             	mov    %rsp,%rbp
    // printc(t);
    prints(Slice<char>{&t, 1})
    3ff6:	b9 01 00 00 00       	mov    $0x1,%ecx
    3ffb:	48 63 d1             	movslq %ecx,%rdx
    3ffe:	ff f2                	push   %rdx
    4000:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4007:	48 03 cd             	add    %rbp,%rcx
    400a:	8f c2                	pop    %rdx
    400c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4013:	48 8b f1             	mov    %rcx,%rsi
    4016:	48 8b fa             	mov    %rdx,%rdi
    4019:	48 83 ec 38          	sub    $0x38,%rsp
    401d:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
    4022:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 4028 <main+0x4028>
    4028:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    402f:	00 00 
    4031:	4d 31 c9             	xor    %r9,%r9
    4034:	49 89 f8             	mov    %rdi,%r8
    4037:	48 89 f2             	mov    %rsi,%rdx
    403a:	48 89 c1             	mov    %rax,%rcx
    403d:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 4043 <main+0x4043>
    4043:	48 83 c4 38          	add    $0x38,%rsp
    4047:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    if(t == '\n')
    404e:	48 8a 4d 10          	rex.W mov 0x10(%rbp),%cl
    4052:	48 0f b6 c9          	movzbq %cl,%rcx
    4056:	ff f1                	push   %rcx
    4058:	b9 0a 00 00 00       	mov    $0xa,%ecx
    405d:	8f c2                	pop    %rdx
    405f:	40 3a d1             	rex cmp %cl,%dl
    4062:	40 0f 94 c2          	rex sete %dl
    4066:	48 0f b6 d2          	movzbq %dl,%rdx
    406a:	48 83 fa 00          	cmp    $0x0,%rdx
    406e:	0f 84 1b 00 00 00    	je     408f <main+0x408f>
        std_print(LOG_NO_COLOR)
    4074:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    407b:	b9 00 00 00 00       	mov    $0x0,%ecx
    4080:	88 0c 24             	mov    %cl,(%rsp)
    4083:	e8 0b 01 00 00       	call   4193 <main+0x4193>
    4088:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    408f:	8f c5                	pop    %rbp
    4091:	c3                   	ret
    if t
        prints("true");
    else
        prints("false");
}
fn std_print(t: char[]){
    4092:	ff f5                	push   %rbp
    4094:	48 8b ec             	mov    %rsp,%rbp
    prints(t);
    4097:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    409b:	48 8b c9             	mov    %rcx,%rcx
    409e:	ff f1                	push   %rcx
    40a0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    40a4:	8f c2                	pop    %rdx
    40a6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    40ad:	48 8b f1             	mov    %rcx,%rsi
    40b0:	48 8b fa             	mov    %rdx,%rdi
    40b3:	48 83 ec 38          	sub    $0x38,%rsp
    40b7:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
    40bc:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 40c2 <main+0x40c2>
    40c2:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    40c9:	00 00 
    40cb:	4d 31 c9             	xor    %r9,%r9
    40ce:	49 89 f8             	mov    %rdi,%r8
    40d1:	48 89 f2             	mov    %rsi,%rdx
    40d4:	48 89 c1             	mov    %rax,%rcx
    40d7:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 40dd <main+0x40dd>
    40dd:	48 83 c4 38          	add    $0x38,%rsp
    40e1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    if t.len > 0 {
    40e8:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    40ef:	48 03 cd             	add    %rbp,%rcx
    40f2:	ba 08 00 00 00       	mov    $0x8,%edx
    40f7:	48 03 ca             	add    %rdx,%rcx
    40fa:	48 8b 11             	mov    (%rcx),%rdx
    40fd:	ff f2                	push   %rdx
    40ff:	b9 00 00 00 00       	mov    $0x0,%ecx
    4104:	8f c2                	pop    %rdx
    4106:	48 63 d9             	movslq %ecx,%rbx
    4109:	48 3b d3             	cmp    %rbx,%rdx
    410c:	40 0f 9f c2          	rex setg %dl
    4110:	48 0f b6 d2          	movzbq %dl,%rdx
    4114:	48 83 fa 00          	cmp    $0x0,%rdx
    4118:	0f 84 72 00 00 00    	je     4190 <main+0x4190>
        if t[t.len-1] == '\n'
    411e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4122:	ff f1                	push   %rcx
    4124:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    412b:	48 03 cd             	add    %rbp,%rcx
    412e:	ba 08 00 00 00       	mov    $0x8,%edx
    4133:	48 03 ca             	add    %rdx,%rcx
    4136:	48 8b 11             	mov    (%rcx),%rdx
    4139:	ff f2                	push   %rdx
    413b:	b9 01 00 00 00       	mov    $0x1,%ecx
    4140:	8f c2                	pop    %rdx
    4142:	48 63 d9             	movslq %ecx,%rbx
    4145:	48 2b d3             	sub    %rbx,%rdx
    4148:	48 8b ca             	mov    %rdx,%rcx
    414b:	8f c2                	pop    %rdx
    414d:	48 03 d1             	add    %rcx,%rdx
    4150:	48 8a 0a             	rex.W mov (%rdx),%cl
    4153:	48 0f b6 c9          	movzbq %cl,%rcx
    4157:	ff f1                	push   %rcx
    4159:	b9 0a 00 00 00       	mov    $0xa,%ecx
    415e:	8f c2                	pop    %rdx
    4160:	40 3a d1             	rex cmp %cl,%dl
    4163:	40 0f 94 c2          	rex sete %dl
    4167:	48 0f b6 d2          	movzbq %dl,%rdx
    416b:	48 83 fa 00          	cmp    $0x0,%rdx
    416f:	0f 84 1b 00 00 00    	je     4190 <main+0x4190>
            std_print(LOG_NO_COLOR)
    4175:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    417c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4181:	88 0c 24             	mov    %cl,(%rsp)
    4184:	e8 0a 00 00 00       	call   4193 <main+0x4193>
    4189:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    4190:	8f c5                	pop    %rbp
    4192:	c3                   	ret
    LOG__YELLOW = 0xE0,
    LOG__WHITE = 0xF0,
    LOG_NO_COLOR = 0x00,
};

fn std_print(value: LogColor) {
    4193:	ff f5                	push   %rbp
    4195:	48 8b ec             	mov    %rsp,%rbp
    4198:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    #if OS_WINDOWS
        if(value == LOG_NO_COLOR)
    419f:	48 8a 4d 10          	rex.W mov 0x10(%rbp),%cl
    41a3:	48 0f b6 c9          	movzbq %cl,%rcx
    41a7:	ff f1                	push   %rcx
    41a9:	b9 00 00 00 00       	mov    $0x0,%ecx
    41ae:	8f c2                	pop    %rdx
    41b0:	40 3a d1             	rex cmp %cl,%dl
    41b3:	40 0f 94 c2          	rex sete %dl
    41b7:	48 0f b6 d2          	movzbq %dl,%rdx
    41bb:	48 83 fa 00          	cmp    $0x0,%rdx
    41bf:	0f 84 15 00 00 00    	je     41da <main+0x41da>
            value = LOG_SILVER
    41c5:	b9 07 00 00 00       	mov    $0x7,%ecx
    41ca:	ff f1                	push   %rcx
    41cc:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    41d3:	48 03 cd             	add    %rbp,%rcx
    41d6:	8f c2                	pop    %rdx
    41d8:	88 11                	mov    %dl,(%rcx)
        m_consoleHandle := GetStdHandle(STD_OUTPUT_HANDLE);
    41da:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    41e1:	b9 f5 ff ff ff       	mov    $0xfffffff5,%ecx
    41e6:	8b d1                	mov    %ecx,%edx
    41e8:	89 14 24             	mov    %edx,(%rsp)
    41eb:	33 c9                	xor    %ecx,%ecx
    41ed:	8b 0c 24             	mov    (%rsp),%ecx
    41f0:	e8 00 00 00 00       	call   41f5 <main+0x41f5>
    41f5:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    41fc:	48 8b c8             	mov    %rax,%rcx
    41ff:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
		// 	if (m_consoleHandle == NULL)
		// 		return;
		// }
		// TODO: don't set color if already set? difficult if you have a variable of last color and a different 
		//		function sets color without changing the variable.
		SetConsoleTextAttribute(m_consoleHandle, value);
    4203:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    420a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    420e:	ff f1                	push   %rcx
    4210:	48 8a 4d 10          	rex.W mov 0x10(%rbp),%cl
    4214:	48 0f b6 c9          	movzbq %cl,%rcx
    4218:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
    421d:	8f c1                	pop    %rcx
    421f:	48 89 0c 24          	mov    %rcx,(%rsp)
    4223:	33 c9                	xor    %ecx,%ecx
    4225:	48 8b 0c 24          	mov    (%rsp),%rcx
    4229:	33 d2                	xor    %edx,%edx
    422b:	66 8b 54 24 08       	mov    0x8(%rsp),%dx
    4230:	e8 00 00 00 00       	call   4235 <main+0x4235>
    4235:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    423c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    4243:	8f c5                	pop    %rbp
    4245:	c3                   	ret
        s: StringBuilder
        s.append(sliced())
        return s
    }
}
operator cast(b: StringBuilder) -> Slice<char> {
    4246:	ff f5                	push   %rbp
    4248:	48 8b ec             	mov    %rsp,%rbp
    424b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    return b.sliced()
    4252:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4259:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4260:	48 03 cd             	add    %rbp,%rcx
    4263:	48 89 0c 24          	mov    %rcx,(%rsp)
    4267:	e8 01 06 00 00       	call   486d <main+0x486d>
    426c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    4273:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    4278:	48 8b c9             	mov    %rcx,%rcx
    427b:	ff f1                	push   %rcx
    427d:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    4282:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    4286:	8f c1                	pop    %rcx
    4288:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    428c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    4293:	8f c5                	pop    %rbp
    4295:	c3                   	ret
}
// returns -1 if not found
// returns the index to the first character of pattern found in the text.
// if not reverse, then first match is returned, otherwise, last match is returned
SLICE_OVERLOADS(find, pattern, text, i32)
fn find(pattern: char[], text: char[], reverse: bool = false) -> i32 {
    4296:	ff f5                	push   %rbp
    4298:	48 8b ec             	mov    %rsp,%rbp
    429b:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    if text.len < pattern.len || pattern.len == 0
    42a2:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
    42a9:	48 03 cd             	add    %rbp,%rcx
    42ac:	ba 08 00 00 00       	mov    $0x8,%edx
    42b1:	48 03 ca             	add    %rdx,%rcx
    42b4:	48 8b 11             	mov    (%rcx),%rdx
    42b7:	ff f2                	push   %rdx
    42b9:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    42c0:	48 03 cd             	add    %rbp,%rcx
    42c3:	ba 08 00 00 00       	mov    $0x8,%edx
    42c8:	48 03 ca             	add    %rdx,%rcx
    42cb:	48 8b 11             	mov    (%rcx),%rdx
    42ce:	8f c1                	pop    %rcx
    42d0:	48 3b ca             	cmp    %rdx,%rcx
    42d3:	40 0f 9c c1          	rex setl %cl
    42d7:	48 0f b6 c9          	movzbq %cl,%rcx
    42db:	ff f1                	push   %rcx
    42dd:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    42e4:	48 03 cd             	add    %rbp,%rcx
    42e7:	ba 08 00 00 00       	mov    $0x8,%edx
    42ec:	48 03 ca             	add    %rdx,%rcx
    42ef:	48 8b 11             	mov    (%rcx),%rdx
    42f2:	ff f2                	push   %rdx
    42f4:	b9 00 00 00 00       	mov    $0x0,%ecx
    42f9:	8f c2                	pop    %rdx
    42fb:	48 63 d9             	movslq %ecx,%rbx
    42fe:	48 3b d3             	cmp    %rbx,%rdx
    4301:	40 0f 94 c2          	rex sete %dl
    4305:	48 0f b6 d2          	movzbq %dl,%rdx
    4309:	8f c1                	pop    %rcx
    430b:	48 85 c9             	test   %rcx,%rcx
    430e:	75 0a                	jne    431a <main+0x431a>
    4310:	48 85 d2             	test   %rdx,%rdx
    4313:	75 05                	jne    431a <main+0x431a>
    4315:	c6 c1 00             	mov    $0x0,%cl
    4318:	eb 07                	jmp    4321 <main+0x4321>
    431a:	c6 c1 01             	mov    $0x1,%cl
    431d:	48 0f b6 c9          	movzbq %cl,%rcx
    4321:	48 83 f9 00          	cmp    $0x0,%rcx
    4325:	0f 84 12 00 00 00    	je     433d <main+0x433d>
        return -1;
    432b:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    4330:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    4333:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    433a:	8f c5                	pop    %rbp
    433c:	c3                   	ret
    if !reverse {
    433d:	48 8a 4d 30          	rex.W mov 0x30(%rbp),%cl
    4341:	48 0f b6 c9          	movzbq %cl,%rcx
    4345:	48 85 c9             	test   %rcx,%rcx
    4348:	40 0f 94 c1          	rex sete %cl
    434c:	48 0f b6 c9          	movzbq %cl,%rcx
    4350:	48 83 f9 00          	cmp    $0x0,%rcx
    4354:	0f 84 52 01 00 00    	je     44ac <main+0x44ac>
        correct := 0;
    435a:	b9 00 00 00 00       	mov    $0x0,%ecx
    435f:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        for text {
    4362:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffffffff,%rcx
    4369:	ff ff ff 
    436c:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    4370:	32 c9                	xor    %cl,%cl
    4372:	88 4d e0             	mov    %cl,-0x20(%rbp)
    4375:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    4379:	48 8b c9             	mov    %rcx,%rcx
    437c:	ff f1                	push   %rcx
    437e:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
    4382:	8f c2                	pop    %rdx
    4384:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
    4388:	48 81 c3 01 00 00 00 	add    $0x1,%rbx
    438f:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
    4393:	48 3b d3             	cmp    %rbx,%rdx
    4396:	40 0f 9f c2          	rex setg %dl
    439a:	48 0f b6 d2          	movzbq %dl,%rdx
    439e:	48 83 fa 00          	cmp    $0x0,%rdx
    43a2:	0f 84 ff 00 00 00    	je     44a7 <main+0x44a7>
    43a8:	48 8b d3             	mov    %rbx,%rdx
    43ab:	48 03 ca             	add    %rdx,%rcx
    43ae:	48 c7 c2 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rdx
    43b5:	48 03 d5             	add    %rbp,%rdx
    43b8:	48 8a 19             	rex.W mov (%rcx),%bl
    43bb:	48 0f b6 db          	movzbq %bl,%rbx
    43bf:	88 1a                	mov    %bl,(%rdx)
            if it == pattern.ptr[correct] {
    43c1:	48 8a 4d e0          	rex.W mov -0x20(%rbp),%cl
    43c5:	48 0f b6 c9          	movzbq %cl,%rcx
    43c9:	ff f1                	push   %rcx
    43cb:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    43d2:	48 03 cd             	add    %rbp,%rcx
    43d5:	48 8b 11             	mov    (%rcx),%rdx
    43d8:	ff f2                	push   %rdx
    43da:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    43dd:	8f c2                	pop    %rdx
    43df:	48 03 d1             	add    %rcx,%rdx
    43e2:	48 8a 0a             	rex.W mov (%rdx),%cl
    43e5:	48 0f b6 c9          	movzbq %cl,%rcx
    43e9:	8f c2                	pop    %rdx
    43eb:	40 3a d1             	rex cmp %cl,%dl
    43ee:	40 0f 94 c2          	rex sete %dl
    43f2:	48 0f b6 d2          	movzbq %dl,%rdx
    43f6:	48 83 fa 00          	cmp    $0x0,%rdx
    43fa:	0f 84 8d 00 00 00    	je     448d <main+0x448d>
                correct++;
    4400:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    4407:	48 03 cd             	add    %rbp,%rcx
    440a:	8b 11                	mov    (%rcx),%edx
    440c:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    4413:	89 11                	mov    %edx,(%rcx)
                if correct == pattern.len
    4415:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    4418:	ff f1                	push   %rcx
    441a:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4421:	48 03 cd             	add    %rbp,%rcx
    4424:	ba 08 00 00 00       	mov    $0x8,%edx
    4429:	48 03 ca             	add    %rdx,%rcx
    442c:	48 8b 11             	mov    (%rcx),%rdx
    442f:	8f c1                	pop    %rcx
    4431:	48 63 d9             	movslq %ecx,%rbx
    4434:	48 3b da             	cmp    %rdx,%rbx
    4437:	40 0f 94 c3          	rex sete %bl
    443b:	48 0f b6 db          	movzbq %bl,%rbx
    443f:	48 83 fb 00          	cmp    $0x0,%rbx
    4443:	0f 84 3f 00 00 00    	je     4488 <main+0x4488>
                    return nr - pattern.len + 1
    4449:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    444d:	ff f1                	push   %rcx
    444f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4456:	48 03 cd             	add    %rbp,%rcx
    4459:	ba 08 00 00 00       	mov    $0x8,%edx
    445e:	48 03 ca             	add    %rdx,%rcx
    4461:	48 8b 11             	mov    (%rcx),%rdx
    4464:	8f c1                	pop    %rcx
    4466:	48 2b ca             	sub    %rdx,%rcx
    4469:	ff f1                	push   %rcx
    446b:	b9 01 00 00 00       	mov    $0x1,%ecx
    4470:	8f c2                	pop    %rdx
    4472:	48 63 d9             	movslq %ecx,%rbx
    4475:	48 03 d3             	add    %rbx,%rdx
    4478:	48 8b ca             	mov    %rdx,%rcx
    447b:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    447e:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    4485:	8f c5                	pop    %rbp
    4487:	c3                   	ret
    4488:	e9 15 00 00 00       	jmp    44a2 <main+0x44a2>
            } else {
                correct = 0;
    448d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4492:	ff f1                	push   %rcx
    4494:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    449b:	48 03 cd             	add    %rbp,%rcx
    449e:	8f c2                	pop    %rdx
    44a0:	89 11                	mov    %edx,(%rcx)
    44a2:	e9 ce fe ff ff       	jmp    4375 <main+0x4375>
    44a7:	e9 58 01 00 00       	jmp    4604 <main+0x4604>
            }
        }
    } else {
        correct := pattern.len-1;
    44ac:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    44b3:	48 03 cd             	add    %rbp,%rcx
    44b6:	ba 08 00 00 00       	mov    $0x8,%edx
    44bb:	48 03 ca             	add    %rdx,%rcx
    44be:	48 8b 11             	mov    (%rcx),%rdx
    44c1:	ff f2                	push   %rdx
    44c3:	b9 01 00 00 00       	mov    $0x1,%ecx
    44c8:	8f c2                	pop    %rdx
    44ca:	48 63 d9             	movslq %ecx,%rbx
    44cd:	48 2b d3             	sub    %rbx,%rdx
    44d0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
        for @reverse text {
    44d4:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    44d8:	48 8b c9             	mov    %rcx,%rcx
    44db:	ff f1                	push   %rcx
    44dd:	8f c1                	pop    %rcx
    44df:	48 0f b6 d1          	movzbq %cl,%rdx
    44e3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    44e7:	32 c9                	xor    %cl,%cl
    44e9:	88 4d e0             	mov    %cl,-0x20(%rbp)
    44ec:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
    44f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    44f4:	48 81 ea 01 00 00 00 	sub    $0x1,%rdx
    44fb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    44ff:	bb 00 00 00 00       	mov    $0x0,%ebx
    4504:	48 3b da             	cmp    %rdx,%rbx
    4507:	40 0f 9e c3          	rex setle %bl
    450b:	48 0f b6 db          	movzbq %bl,%rbx
    450f:	48 83 fb 00          	cmp    $0x0,%rbx
    4513:	0f 84 eb 00 00 00    	je     4604 <main+0x4604>
    4519:	48 8b da             	mov    %rdx,%rbx
    451c:	48 03 cb             	add    %rbx,%rcx
    451f:	48 c7 c2 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rdx
    4526:	48 03 d5             	add    %rbp,%rdx
    4529:	48 8a 19             	rex.W mov (%rcx),%bl
    452c:	48 0f b6 db          	movzbq %bl,%rbx
    4530:	88 1a                	mov    %bl,(%rdx)
            if it == pattern.ptr[correct] {
    4532:	48 8a 4d e0          	rex.W mov -0x20(%rbp),%cl
    4536:	48 0f b6 c9          	movzbq %cl,%rcx
    453a:	ff f1                	push   %rcx
    453c:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4543:	48 03 cd             	add    %rbp,%rcx
    4546:	48 8b 11             	mov    (%rcx),%rdx
    4549:	ff f2                	push   %rdx
    454b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    454f:	48 8b d1             	mov    %rcx,%rdx
    4552:	8f c1                	pop    %rcx
    4554:	48 03 ca             	add    %rdx,%rcx
    4557:	48 8a 11             	rex.W mov (%rcx),%dl
    455a:	48 0f b6 d2          	movzbq %dl,%rdx
    455e:	8f c1                	pop    %rcx
    4560:	40 3a ca             	rex cmp %dl,%cl
    4563:	40 0f 94 c1          	rex sete %cl
    4567:	48 0f b6 c9          	movzbq %cl,%rcx
    456b:	48 83 f9 00          	cmp    $0x0,%rcx
    456f:	0f 84 55 00 00 00    	je     45ca <main+0x45ca>
                correct--;
    4575:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    457c:	48 03 cd             	add    %rbp,%rcx
    457f:	48 8b 11             	mov    (%rcx),%rdx
    4582:	48 81 ea 01 00 00 00 	sub    $0x1,%rdx
    4589:	48 89 11             	mov    %rdx,(%rcx)
                if correct == -1
    458c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    4590:	ff f1                	push   %rcx
    4592:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    4597:	8f c2                	pop    %rdx
    4599:	48 63 d9             	movslq %ecx,%rbx
    459c:	48 3b d3             	cmp    %rbx,%rdx
    459f:	40 0f 94 c2          	rex sete %dl
    45a3:	48 0f b6 d2          	movzbq %dl,%rdx
    45a7:	48 83 fa 00          	cmp    $0x0,%rdx
    45ab:	0f 84 14 00 00 00    	je     45c5 <main+0x45c5>
                    return nr
    45b1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    45b5:	48 8b d1             	mov    %rcx,%rdx
    45b8:	89 55 f8             	mov    %edx,-0x8(%rbp)
    45bb:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    45c2:	8f c5                	pop    %rbp
    45c4:	c3                   	ret
    45c5:	e9 35 00 00 00       	jmp    45ff <main+0x45ff>
            } else {
                correct = pattern.len-1;
    45ca:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    45d1:	48 03 cd             	add    %rbp,%rcx
    45d4:	ba 08 00 00 00       	mov    $0x8,%edx
    45d9:	48 03 ca             	add    %rdx,%rcx
    45dc:	48 8b 11             	mov    (%rcx),%rdx
    45df:	ff f2                	push   %rdx
    45e1:	b9 01 00 00 00       	mov    $0x1,%ecx
    45e6:	8f c2                	pop    %rdx
    45e8:	48 63 d9             	movslq %ecx,%rbx
    45eb:	48 2b d3             	sub    %rbx,%rdx
    45ee:	ff f2                	push   %rdx
    45f0:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    45f7:	48 03 cd             	add    %rbp,%rcx
    45fa:	8f c2                	pop    %rdx
    45fc:	48 89 11             	mov    %rdx,(%rcx)
    45ff:	e9 e8 fe ff ff       	jmp    44ec <main+0x44ec>
            }
        }
    }
    return -1;
    4604:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    4609:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    460c:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    4613:	8f c5                	pop    %rbp
    4615:	c3                   	ret
}
fn substring(text: char*, start: i32, end: i32 = -1) -> char[] {
    return substring(Slice<char>{text,strlen(text)}, start, end)
}
// end is exclusive
fn substring(text: char[], start: i32, end: i32 = -1) -> char[] {
    4616:	ff f5                	push   %rbp
    4618:	48 8b ec             	mov    %rsp,%rbp
    461b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    if start >= text.len
    4622:	8b 4d 20             	mov    0x20(%rbp),%ecx
    4625:	48 63 c9             	movslq %ecx,%rcx
    4628:	ff f1                	push   %rcx
    462a:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4631:	48 03 cd             	add    %rbp,%rcx
    4634:	ba 08 00 00 00       	mov    $0x8,%edx
    4639:	48 03 ca             	add    %rdx,%rcx
    463c:	48 8b 11             	mov    (%rcx),%rdx
    463f:	8f c1                	pop    %rcx
    4641:	48 63 d9             	movslq %ecx,%rbx
    4644:	48 3b da             	cmp    %rdx,%rbx
    4647:	40 0f 9d c3          	rex setge %bl
    464b:	48 0f b6 db          	movzbq %bl,%rbx
    464f:	48 83 fb 00          	cmp    $0x0,%rbx
    4653:	0f 84 1c 00 00 00    	je     4675 <main+0x4675>
        return Slice<char>{}
    4659:	48 33 db             	xor    %rbx,%rbx
    465c:	ff f3                	push   %rbx
    465e:	48 33 db             	xor    %rbx,%rbx
    4661:	48 89 5d f0          	mov    %rbx,-0x10(%rbp)
    4665:	8f c1                	pop    %rcx
    4667:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    466b:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    4672:	8f c5                	pop    %rbp
    4674:	c3                   	ret
    if end > text.len
    4675:	8b 4d 24             	mov    0x24(%rbp),%ecx
    4678:	48 63 c9             	movslq %ecx,%rcx
    467b:	ff f1                	push   %rcx
    467d:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4684:	48 03 cd             	add    %rbp,%rcx
    4687:	ba 08 00 00 00       	mov    $0x8,%edx
    468c:	48 03 ca             	add    %rdx,%rcx
    468f:	48 8b 11             	mov    (%rcx),%rdx
    4692:	8f c1                	pop    %rcx
    4694:	48 63 d9             	movslq %ecx,%rbx
    4697:	48 3b da             	cmp    %rdx,%rbx
    469a:	40 0f 9f c3          	rex setg %bl
    469e:	48 0f b6 db          	movzbq %bl,%rbx
    46a2:	48 83 fb 00          	cmp    $0x0,%rbx
    46a6:	0f 84 28 00 00 00    	je     46d4 <main+0x46d4>
        end = text.len
    46ac:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    46b3:	48 03 cd             	add    %rbp,%rcx
    46b6:	ba 08 00 00 00       	mov    $0x8,%edx
    46bb:	48 03 ca             	add    %rdx,%rcx
    46be:	48 8b 11             	mov    (%rcx),%rdx
    46c1:	ff f2                	push   %rdx
    46c3:	48 c7 c1 24 00 00 00 	mov    $0x24,%rcx
    46ca:	48 03 cd             	add    %rbp,%rcx
    46cd:	8f c2                	pop    %rdx
    46cf:	48 8b da             	mov    %rdx,%rbx
    46d2:	89 19                	mov    %ebx,(%rcx)
    if start < 0
    46d4:	8b 4d 20             	mov    0x20(%rbp),%ecx
    46d7:	48 63 c9             	movslq %ecx,%rcx
    46da:	ff f1                	push   %rcx
    46dc:	b9 00 00 00 00       	mov    $0x0,%ecx
    46e1:	8f c2                	pop    %rdx
    46e3:	3b d1                	cmp    %ecx,%edx
    46e5:	40 0f 9c c2          	rex setl %dl
    46e9:	48 0f b6 d2          	movzbq %dl,%rdx
    46ed:	48 83 fa 00          	cmp    $0x0,%rdx
    46f1:	0f 84 15 00 00 00    	je     470c <main+0x470c>
        start = 0
    46f7:	b9 00 00 00 00       	mov    $0x0,%ecx
    46fc:	ff f1                	push   %rcx
    46fe:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
    4705:	48 03 cd             	add    %rbp,%rcx
    4708:	8f c2                	pop    %rdx
    470a:	89 11                	mov    %edx,(%rcx)
    if end < 0
    470c:	8b 4d 24             	mov    0x24(%rbp),%ecx
    470f:	48 63 c9             	movslq %ecx,%rcx
    4712:	ff f1                	push   %rcx
    4714:	b9 00 00 00 00       	mov    $0x0,%ecx
    4719:	8f c2                	pop    %rdx
    471b:	3b d1                	cmp    %ecx,%edx
    471d:	40 0f 9c c2          	rex setl %dl
    4721:	48 0f b6 d2          	movzbq %dl,%rdx
    4725:	48 83 fa 00          	cmp    $0x0,%rdx
    4729:	0f 84 55 00 00 00    	je     4784 <main+0x4784>
        return Slice<char>{text.ptr + start, text.len - start}
    472f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    4736:	48 03 cd             	add    %rbp,%rcx
    4739:	ba 08 00 00 00       	mov    $0x8,%edx
    473e:	48 03 ca             	add    %rdx,%rcx
    4741:	48 8b 11             	mov    (%rcx),%rdx
    4744:	ff f2                	push   %rdx
    4746:	8b 4d 20             	mov    0x20(%rbp),%ecx
    4749:	48 63 c9             	movslq %ecx,%rcx
    474c:	8f c2                	pop    %rdx
    474e:	48 63 d9             	movslq %ecx,%rbx
    4751:	48 2b d3             	sub    %rbx,%rdx
    4754:	ff f2                	push   %rdx
    4756:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    475d:	48 03 cd             	add    %rbp,%rcx
    4760:	48 8b 11             	mov    (%rcx),%rdx
    4763:	ff f2                	push   %rdx
    4765:	8b 4d 20             	mov    0x20(%rbp),%ecx
    4768:	48 63 c9             	movslq %ecx,%rcx
    476b:	8f c2                	pop    %rdx
    476d:	48 03 d1             	add    %rcx,%rdx
    4770:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    4774:	8f c1                	pop    %rcx
    4776:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    477a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    4781:	8f c5                	pop    %rbp
    4783:	c3                   	ret
    return Slice<char>{text.ptr + start, end - start}
    4784:	8b 4d 24             	mov    0x24(%rbp),%ecx
    4787:	48 63 c9             	movslq %ecx,%rcx
    478a:	ff f1                	push   %rcx
    478c:	8b 4d 20             	mov    0x20(%rbp),%ecx
    478f:	48 63 c9             	movslq %ecx,%rcx
    4792:	8f c2                	pop    %rdx
    4794:	2b d1                	sub    %ecx,%edx
    4796:	48 63 ca             	movslq %edx,%rcx
    4799:	ff f1                	push   %rcx
    479b:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    47a2:	48 03 cd             	add    %rbp,%rcx
    47a5:	48 8b 11             	mov    (%rcx),%rdx
    47a8:	ff f2                	push   %rdx
    47aa:	8b 4d 20             	mov    0x20(%rbp),%ecx
    47ad:	48 63 c9             	movslq %ecx,%rcx
    47b0:	8f c2                	pop    %rdx
    47b2:	48 03 d1             	add    %rcx,%rdx
    47b5:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    47b9:	8f c1                	pop    %rcx
    47bb:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    47bf:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    47c6:	8f c5                	pop    %rbp
    47c8:	c3                   	ret
    fn cleanup(free_stuff: bool = true) {
    47c9:	ff f5                	push   %rbp
    47cb:	48 8b ec             	mov    %rsp,%rbp
        if !free_stuff {
    47ce:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
    47d2:	48 0f b6 c9          	movzbq %cl,%rcx
    47d6:	48 85 c9             	test   %rcx,%rcx
    47d9:	40 0f 94 c1          	rex sete %cl
    47dd:	48 0f b6 c9          	movzbq %cl,%rcx
    47e1:	48 83 f9 00          	cmp    $0x0,%rcx
    47e5:	0f 84 54 00 00 00    	je     483f <main+0x483f>
            ptr = null
    47eb:	b9 00 00 00 00       	mov    $0x0,%ecx
    47f0:	ff f1                	push   %rcx
    47f2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    47f6:	48 8b c9             	mov    %rcx,%rcx
    47f9:	ba 00 00 00 00       	mov    $0x0,%edx
    47fe:	48 03 ca             	add    %rdx,%rcx
    4801:	8f c2                	pop    %rdx
    4803:	48 89 11             	mov    %rdx,(%rcx)
            len = 0
    4806:	b9 00 00 00 00       	mov    $0x0,%ecx
    480b:	ff f1                	push   %rcx
    480d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4811:	48 8b c9             	mov    %rcx,%rcx
    4814:	ba 08 00 00 00       	mov    $0x8,%edx
    4819:	48 03 ca             	add    %rdx,%rcx
    481c:	8f c2                	pop    %rdx
    481e:	89 11                	mov    %edx,(%rcx)
            max = 0
    4820:	b9 00 00 00 00       	mov    $0x0,%ecx
    4825:	ff f1                	push   %rcx
    4827:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    482b:	48 8b c9             	mov    %rcx,%rcx
    482e:	ba 0c 00 00 00       	mov    $0xc,%edx
    4833:	48 03 ca             	add    %rdx,%rcx
    4836:	8f c2                	pop    %rdx
    4838:	89 11                	mov    %edx,(%rcx)
    483a:	e9 2b 00 00 00       	jmp    486a <main+0x486a>
            reserve(0)
    483f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4846:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    484a:	48 8b c9             	mov    %rcx,%rcx
    484d:	ff f1                	push   %rcx
    484f:	b9 00 00 00 00       	mov    $0x0,%ecx
    4854:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    4858:	8f c1                	pop    %rcx
    485a:	48 89 0c 24          	mov    %rcx,(%rsp)
    485e:	e8 38 08 00 00       	call   509b <main+0x509b>
    4863:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    486a:	8f c5                	pop    %rbp
    486c:	c3                   	ret
    fn sliced() -> Slice<char> {
    486d:	ff f5                	push   %rbp
    486f:	48 8b ec             	mov    %rsp,%rbp
    4872:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
        return Slice<char>{ptr, len};
    4879:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    487d:	48 8b c9             	mov    %rcx,%rcx
    4880:	8b 51 08             	mov    0x8(%rcx),%edx
    4883:	48 63 ca             	movslq %edx,%rcx
    4886:	ff f1                	push   %rcx
    4888:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    488c:	48 8b c9             	mov    %rcx,%rcx
    488f:	48 8b 11             	mov    (%rcx),%rdx
    4892:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    4896:	8f c1                	pop    %rcx
    4898:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    489c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    48a3:	8f c5                	pop    %rbp
    48a5:	c3                   	ret
    fn append(value: char) {
    48a6:	ff f5                	push   %rbp
    48a8:	48 8b ec             	mov    %rsp,%rbp
        append(Slice<char>{&value, 1})
    48ab:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    48b2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    48b6:	48 8b c9             	mov    %rcx,%rcx
    48b9:	ff f1                	push   %rcx
    48bb:	b9 01 00 00 00       	mov    $0x1,%ecx
    48c0:	48 63 d1             	movslq %ecx,%rdx
    48c3:	ff f2                	push   %rdx
    48c5:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    48cc:	48 03 cd             	add    %rbp,%rcx
    48cf:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    48d4:	8f c1                	pop    %rcx
    48d6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    48db:	8f c1                	pop    %rcx
    48dd:	48 89 0c 24          	mov    %rcx,(%rsp)
    48e1:	e8 0a 00 00 00       	call   48f0 <main+0x48f0>
    48e6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    48ed:	8f c5                	pop    %rbp
    48ef:	c3                   	ret
    fn append(str: char[]) {
    48f0:	ff f5                	push   %rbp
    48f2:	48 8b ec             	mov    %rsp,%rbp
        if str.len == 0
    48f5:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    48fc:	48 03 cd             	add    %rbp,%rcx
    48ff:	ba 08 00 00 00       	mov    $0x8,%edx
    4904:	48 03 ca             	add    %rdx,%rcx
    4907:	48 8b 11             	mov    (%rcx),%rdx
    490a:	ff f2                	push   %rdx
    490c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4911:	8f c2                	pop    %rdx
    4913:	48 63 d9             	movslq %ecx,%rbx
    4916:	48 3b d3             	cmp    %rbx,%rdx
    4919:	40 0f 94 c2          	rex sete %dl
    491d:	48 0f b6 d2          	movzbq %dl,%rdx
    4921:	48 83 fa 00          	cmp    $0x0,%rdx
    4925:	0f 84 03 00 00 00    	je     492e <main+0x492e>
            return;
    492b:	8f c5                	pop    %rbp
    492d:	c3                   	ret
        if len + str.len > max {
    492e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4932:	48 8b c9             	mov    %rcx,%rcx
    4935:	8b 51 08             	mov    0x8(%rcx),%edx
    4938:	ff f2                	push   %rdx
    493a:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4941:	48 03 cd             	add    %rbp,%rcx
    4944:	ba 08 00 00 00       	mov    $0x8,%edx
    4949:	48 03 ca             	add    %rdx,%rcx
    494c:	48 8b 11             	mov    (%rcx),%rdx
    494f:	8f c1                	pop    %rcx
    4951:	48 63 d9             	movslq %ecx,%rbx
    4954:	48 03 da             	add    %rdx,%rbx
    4957:	ff f3                	push   %rbx
    4959:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    495d:	48 8b c9             	mov    %rcx,%rcx
    4960:	8b 51 0c             	mov    0xc(%rcx),%edx
    4963:	8f c1                	pop    %rcx
    4965:	48 63 da             	movslq %edx,%rbx
    4968:	48 3b cb             	cmp    %rbx,%rcx
    496b:	40 0f 9f c1          	rex setg %cl
    496f:	48 0f b6 c9          	movzbq %cl,%rcx
    4973:	48 83 f9 00          	cmp    $0x0,%rcx
    4977:	0f 84 8e 00 00 00    	je     4a0b <main+0x4a0b>
            if !reserve(str.len + 10 + max * 2) {
    497d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4984:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4988:	48 8b c9             	mov    %rcx,%rcx
    498b:	ff f1                	push   %rcx
    498d:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4994:	48 03 cd             	add    %rbp,%rcx
    4997:	ba 08 00 00 00       	mov    $0x8,%edx
    499c:	48 03 ca             	add    %rdx,%rcx
    499f:	48 8b 11             	mov    (%rcx),%rdx
    49a2:	ff f2                	push   %rdx
    49a4:	b9 0a 00 00 00       	mov    $0xa,%ecx
    49a9:	8f c2                	pop    %rdx
    49ab:	48 63 d9             	movslq %ecx,%rbx
    49ae:	48 03 d3             	add    %rbx,%rdx
    49b1:	ff f2                	push   %rdx
    49b3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    49b7:	48 8b c9             	mov    %rcx,%rcx
    49ba:	8b 51 0c             	mov    0xc(%rcx),%edx
    49bd:	ff f2                	push   %rdx
    49bf:	b9 02 00 00 00       	mov    $0x2,%ecx
    49c4:	8f c2                	pop    %rdx
    49c6:	0f af d1             	imul   %ecx,%edx
    49c9:	8f c1                	pop    %rcx
    49cb:	48 63 da             	movslq %edx,%rbx
    49ce:	48 03 cb             	add    %rbx,%rcx
    49d1:	48 8b d1             	mov    %rcx,%rdx
    49d4:	89 54 24 10          	mov    %edx,0x10(%rsp)
    49d8:	8f c1                	pop    %rcx
    49da:	48 89 0c 24          	mov    %rcx,(%rsp)
    49de:	e8 b8 06 00 00       	call   509b <main+0x509b>
    49e3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    49ea:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
    49ef:	48 0f b6 c9          	movzbq %cl,%rcx
    49f3:	48 85 c9             	test   %rcx,%rcx
    49f6:	40 0f 94 c1          	rex sete %cl
    49fa:	48 0f b6 c9          	movzbq %cl,%rcx
    49fe:	48 83 f9 00          	cmp    $0x0,%rcx
    4a02:	0f 84 03 00 00 00    	je     4a0b <main+0x4a0b>
                return;
    4a08:	8f c5                	pop    %rbp
    4a0a:	c3                   	ret
        memcpy(ptr + len, str.ptr, str.len);
    4a0b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4a0f:	48 8b c9             	mov    %rcx,%rcx
    4a12:	48 8b 11             	mov    (%rcx),%rdx
    4a15:	ff f2                	push   %rdx
    4a17:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4a1b:	48 8b c9             	mov    %rcx,%rcx
    4a1e:	8b 51 08             	mov    0x8(%rcx),%edx
    4a21:	8f c1                	pop    %rcx
    4a23:	48 03 ca             	add    %rdx,%rcx
    4a26:	ff f1                	push   %rcx
    4a28:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4a2f:	48 03 cd             	add    %rbp,%rcx
    4a32:	48 8b 11             	mov    (%rcx),%rdx
    4a35:	ff f2                	push   %rdx
    4a37:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4a3e:	48 03 cd             	add    %rbp,%rcx
    4a41:	ba 08 00 00 00       	mov    $0x8,%edx
    4a46:	48 03 ca             	add    %rdx,%rcx
    4a49:	48 8b 11             	mov    (%rcx),%rdx
    4a4c:	8f c1                	pop    %rcx
    4a4e:	8f c3                	pop    %rbx
    4a50:	ff f3                	push   %rbx
    4a52:	ff f1                	push   %rcx
    4a54:	ff f2                	push   %rdx
    4a56:	48 03 d3             	add    %rbx,%rdx
    4a59:	48 3b da             	cmp    %rdx,%rbx
    4a5c:	74 0d                	je     4a6b <main+0x4a6b>
    4a5e:	48 8a 01             	rex.W mov (%rcx),%al
    4a61:	88 03                	mov    %al,(%rbx)
    4a63:	48 ff c3             	inc    %rbx
    4a66:	48 ff c1             	inc    %rcx
    4a69:	eb ee                	jmp    4a59 <main+0x4a59>
    4a6b:	8f c2                	pop    %rdx
    4a6d:	8f c1                	pop    %rcx
    4a6f:	8f c3                	pop    %rbx
        len += str.len;
    4a71:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4a75:	48 8b c9             	mov    %rcx,%rcx
    4a78:	8b 51 08             	mov    0x8(%rcx),%edx
    4a7b:	ff f2                	push   %rdx
    4a7d:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4a84:	48 03 cd             	add    %rbp,%rcx
    4a87:	ba 08 00 00 00       	mov    $0x8,%edx
    4a8c:	48 03 ca             	add    %rdx,%rcx
    4a8f:	48 8b 11             	mov    (%rcx),%rdx
    4a92:	8f c1                	pop    %rcx
    4a94:	48 63 d9             	movslq %ecx,%rbx
    4a97:	48 03 da             	add    %rdx,%rbx
    4a9a:	ff f3                	push   %rbx
    4a9c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4aa0:	48 8b c9             	mov    %rcx,%rcx
    4aa3:	ba 08 00 00 00       	mov    $0x8,%edx
    4aa8:	48 03 ca             	add    %rdx,%rcx
    4aab:	8f c2                	pop    %rdx
    4aad:	48 8b da             	mov    %rdx,%rbx
    4ab0:	89 19                	mov    %ebx,(%rcx)
        ptr[len] = '\0';
    4ab2:	b9 00 00 00 00       	mov    $0x0,%ecx
    4ab7:	ff f1                	push   %rcx
    4ab9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4abd:	48 8b c9             	mov    %rcx,%rcx
    4ac0:	ba 00 00 00 00       	mov    $0x0,%edx
    4ac5:	48 03 ca             	add    %rdx,%rcx
    4ac8:	ff f1                	push   %rcx
    4aca:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4ace:	48 8b c9             	mov    %rcx,%rcx
    4ad1:	8b 51 08             	mov    0x8(%rcx),%edx
    4ad4:	8f c1                	pop    %rcx
    4ad6:	48 8b 19             	mov    (%rcx),%rbx
    4ad9:	48 03 da             	add    %rdx,%rbx
    4adc:	8f c1                	pop    %rcx
    4ade:	88 0b                	mov    %cl,(%rbx)
    4ae0:	8f c5                	pop    %rbp
    4ae2:	c3                   	ret
    fn append(value: i64) -> i32 {
    4ae3:	ff f5                	push   %rbp
    4ae5:	48 8b ec             	mov    %rsp,%rbp
    4ae8:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
        if len + 21 > max {
    4aef:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4af3:	48 8b c9             	mov    %rcx,%rcx
    4af6:	8b 51 08             	mov    0x8(%rcx),%edx
    4af9:	ff f2                	push   %rdx
    4afb:	b9 15 00 00 00       	mov    $0x15,%ecx
    4b00:	8f c2                	pop    %rdx
    4b02:	03 d1                	add    %ecx,%edx
    4b04:	ff f2                	push   %rdx
    4b06:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4b0a:	48 8b c9             	mov    %rcx,%rcx
    4b0d:	8b 51 0c             	mov    0xc(%rcx),%edx
    4b10:	8f c1                	pop    %rcx
    4b12:	3b ca                	cmp    %edx,%ecx
    4b14:	40 0f 9f c1          	rex setg %cl
    4b18:	48 0f b6 c9          	movzbq %cl,%rcx
    4b1c:	48 83 f9 00          	cmp    $0x0,%rcx
    4b20:	0f 84 3b 00 00 00    	je     4b61 <main+0x4b61>
            reserve(len + 21);
    4b26:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4b2d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4b31:	48 8b c9             	mov    %rcx,%rcx
    4b34:	ff f1                	push   %rcx
    4b36:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4b3a:	48 8b c9             	mov    %rcx,%rcx
    4b3d:	8b 51 08             	mov    0x8(%rcx),%edx
    4b40:	ff f2                	push   %rdx
    4b42:	b9 15 00 00 00       	mov    $0x15,%ecx
    4b47:	8f c2                	pop    %rdx
    4b49:	03 d1                	add    %ecx,%edx
    4b4b:	89 54 24 10          	mov    %edx,0x10(%rsp)
    4b4f:	8f c1                	pop    %rcx
    4b51:	48 89 0c 24          	mov    %rcx,(%rsp)
    4b55:	e8 41 05 00 00       	call   509b <main+0x509b>
    4b5a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        start := len;
    4b61:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4b65:	48 8b c9             	mov    %rcx,%rcx
    4b68:	8b 51 08             	mov    0x8(%rcx),%edx
    4b6b:	89 55 f0             	mov    %edx,-0x10(%rbp)
        if value == 0 {
    4b6e:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4b72:	48 8b c9             	mov    %rcx,%rcx
    4b75:	ff f1                	push   %rcx
    4b77:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b7c:	8f c2                	pop    %rdx
    4b7e:	48 63 d9             	movslq %ecx,%rbx
    4b81:	48 3b d3             	cmp    %rbx,%rdx
    4b84:	40 0f 94 c2          	rex sete %dl
    4b88:	48 0f b6 d2          	movzbq %dl,%rdx
    4b8c:	48 83 fa 00          	cmp    $0x0,%rdx
    4b90:	0f 84 4b 00 00 00    	je     4be1 <main+0x4be1>
            append('0')
    4b96:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4b9d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4ba1:	48 8b c9             	mov    %rcx,%rcx
    4ba4:	ff f1                	push   %rcx
    4ba6:	b9 30 00 00 00       	mov    $0x30,%ecx
    4bab:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    4baf:	8f c1                	pop    %rcx
    4bb1:	48 89 0c 24          	mov    %rcx,(%rsp)
    4bb5:	e8 ec fc ff ff       	call   48a6 <main+0x48a6>
    4bba:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
            return len - start;
    4bc1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4bc5:	48 8b c9             	mov    %rcx,%rcx
    4bc8:	8b 51 08             	mov    0x8(%rcx),%edx
    4bcb:	ff f2                	push   %rdx
    4bcd:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    4bd0:	8f c2                	pop    %rdx
    4bd2:	2b d1                	sub    %ecx,%edx
    4bd4:	89 55 f8             	mov    %edx,-0x8(%rbp)
    4bd7:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
    4bde:	8f c5                	pop    %rbp
    4be0:	c3                   	ret
        if value < 0 {
    4be1:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4be5:	48 8b c9             	mov    %rcx,%rcx
    4be8:	ff f1                	push   %rcx
    4bea:	b9 00 00 00 00       	mov    $0x0,%ecx
    4bef:	8f c2                	pop    %rdx
    4bf1:	48 63 d9             	movslq %ecx,%rbx
    4bf4:	48 3b d3             	cmp    %rbx,%rdx
    4bf7:	40 0f 9c c2          	rex setl %dl
    4bfb:	48 0f b6 d2          	movzbq %dl,%rdx
    4bff:	48 83 fa 00          	cmp    $0x0,%rdx
    4c03:	0f 84 49 00 00 00    	je     4c52 <main+0x4c52>
            value = -value;
    4c09:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4c0d:	48 8b c9             	mov    %rcx,%rcx
    4c10:	48 33 d2             	xor    %rdx,%rdx
    4c13:	48 2b d1             	sub    %rcx,%rdx
    4c16:	ff f2                	push   %rdx
    4c18:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4c1f:	48 03 cd             	add    %rbp,%rcx
    4c22:	8f c2                	pop    %rdx
    4c24:	48 89 11             	mov    %rdx,(%rcx)
            append('-')
    4c27:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    4c2e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4c32:	48 8b c9             	mov    %rcx,%rcx
    4c35:	ff f1                	push   %rcx
    4c37:	b9 2d 00 00 00       	mov    $0x2d,%ecx
    4c3c:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    4c40:	8f c1                	pop    %rcx
    4c42:	48 89 0c 24          	mov    %rcx,(%rsp)
    4c46:	e8 5b fc ff ff       	call   48a6 <main+0x48a6>
    4c4b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        str: char[21];
    4c52:	b9 18 00 00 00       	mov    $0x18,%ecx
    4c57:	48 ba d8 ff ff ff ff 	movabs $0xffffffffffffffd8,%rdx
    4c5e:	ff ff ff 
    4c61:	48 03 d5             	add    %rbp,%rdx
    4c64:	48 83 c2 00          	add    $0x0,%rdx
    4c68:	ff f2                	push   %rdx
    4c6a:	ff f1                	push   %rcx
    4c6c:	48 01 d1             	add    %rdx,%rcx
    4c6f:	48 3b ca             	cmp    %rdx,%rcx
    4c72:	74 0d                	je     4c81 <main+0x4c81>
    4c74:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    4c7b:	48 83 c2 08          	add    $0x8,%rdx
    4c7f:	eb ee                	jmp    4c6f <main+0x4c6f>
    4c81:	8f c1                	pop    %rcx
    4c83:	8f c2                	pop    %rdx
    4c85:	b9 15 00 00 00       	mov    $0x15,%ecx
    4c8a:	ff f1                	push   %rcx
    4c8c:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    4c93:	48 03 cd             	add    %rbp,%rcx
    4c96:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    4c9a:	8f c1                	pop    %rcx
    4c9c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
        used := 20;
    4ca0:	b9 14 00 00 00       	mov    $0x14,%ecx
    4ca5:	89 4d c0             	mov    %ecx,-0x40(%rbp)
        while value > 0 && used > 0 {
    4ca8:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4cac:	48 8b c9             	mov    %rcx,%rcx
    4caf:	ff f1                	push   %rcx
    4cb1:	b9 00 00 00 00       	mov    $0x0,%ecx
    4cb6:	8f c2                	pop    %rdx
    4cb8:	48 63 d9             	movslq %ecx,%rbx
    4cbb:	48 3b d3             	cmp    %rbx,%rdx
    4cbe:	40 0f 9f c2          	rex setg %dl
    4cc2:	48 0f b6 d2          	movzbq %dl,%rdx
    4cc6:	ff f2                	push   %rdx
    4cc8:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    4ccb:	ff f1                	push   %rcx
    4ccd:	b9 00 00 00 00       	mov    $0x0,%ecx
    4cd2:	8f c2                	pop    %rdx
    4cd4:	3b d1                	cmp    %ecx,%edx
    4cd6:	40 0f 9f c2          	rex setg %dl
    4cda:	48 0f b6 d2          	movzbq %dl,%rdx
    4cde:	8f c1                	pop    %rcx
    4ce0:	48 85 c9             	test   %rcx,%rcx
    4ce3:	74 0a                	je     4cef <main+0x4cef>
    4ce5:	48 85 d2             	test   %rdx,%rdx
    4ce8:	74 05                	je     4cef <main+0x4cef>
    4cea:	c6 c1 01             	mov    $0x1,%cl
    4ced:	eb 03                	jmp    4cf2 <main+0x4cf2>
    4cef:	c6 c1 00             	mov    $0x0,%cl
    4cf2:	48 0f b6 c9          	movzbq %cl,%rcx
    4cf6:	48 83 f9 00          	cmp    $0x0,%rcx
    4cfa:	0f 84 a5 00 00 00    	je     4da5 <main+0x4da5>
            num := value % 10;
    4d00:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4d04:	48 8b c9             	mov    %rcx,%rcx
    4d07:	ff f1                	push   %rcx
    4d09:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4d0e:	8f c2                	pop    %rdx
    4d10:	48 63 d9             	movslq %ecx,%rbx
    4d13:	48 8b c2             	mov    %rdx,%rax
    4d16:	48 99                	cqto
    4d18:	48 f7 fb             	idiv   %rbx
    4d1b:	48 83 fa 00          	cmp    $0x0,%rdx
    4d1f:	7d 03                	jge    4d24 <main+0x4d24>
    4d21:	48 03 d3             	add    %rbx,%rdx
    4d24:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
            value = value / 10;
    4d28:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4d2c:	48 8b c9             	mov    %rcx,%rcx
    4d2f:	ff f1                	push   %rcx
    4d31:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4d36:	8f c2                	pop    %rdx
    4d38:	48 63 d9             	movslq %ecx,%rbx
    4d3b:	48 8b c2             	mov    %rdx,%rax
    4d3e:	48 99                	cqto
    4d40:	48 f7 fb             	idiv   %rbx
    4d43:	48 8b d0             	mov    %rax,%rdx
    4d46:	ff f2                	push   %rdx
    4d48:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    4d4f:	48 03 cd             	add    %rbp,%rcx
    4d52:	8f c2                	pop    %rdx
    4d54:	48 89 11             	mov    %rdx,(%rcx)
            str.ptr[used] = num + '0';
    4d57:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    4d5b:	ff f1                	push   %rcx
    4d5d:	b9 30 00 00 00       	mov    $0x30,%ecx
    4d62:	8f c2                	pop    %rdx
    4d64:	48 0f b6 da          	movzbq %dl,%rbx
    4d68:	48 0f b6 d1          	movzbq %cl,%rdx
    4d6c:	02 da                	add    %dl,%bl
    4d6e:	ff f3                	push   %rbx
    4d70:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    4d77:	48 03 cd             	add    %rbp,%rcx
    4d7a:	ff f1                	push   %rcx
    4d7c:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    4d7f:	8f c2                	pop    %rdx
    4d81:	48 8b 1a             	mov    (%rdx),%rbx
    4d84:	48 03 d9             	add    %rcx,%rbx
    4d87:	8f c1                	pop    %rcx
    4d89:	88 0b                	mov    %cl,(%rbx)
            used--;
    4d8b:	48 c7 c1 c0 ff ff ff 	mov    $0xffffffffffffffc0,%rcx
    4d92:	48 03 cd             	add    %rbp,%rcx
    4d95:	8b 11                	mov    (%rcx),%edx
    4d97:	48 81 ea 01 00 00 00 	sub    $0x1,%rdx
    4d9e:	89 11                	mov    %edx,(%rcx)
    4da0:	e9 03 ff ff ff       	jmp    4ca8 <main+0x4ca8>
        str.ptr += used + 1;
    4da5:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    4dac:	48 03 cd             	add    %rbp,%rcx
    4daf:	48 8b 11             	mov    (%rcx),%rdx
    4db2:	ff f2                	push   %rdx
    4db4:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    4db7:	ff f1                	push   %rcx
    4db9:	b9 01 00 00 00       	mov    $0x1,%ecx
    4dbe:	8f c2                	pop    %rdx
    4dc0:	03 d1                	add    %ecx,%edx
    4dc2:	8f c1                	pop    %rcx
    4dc4:	48 03 ca             	add    %rdx,%rcx
    4dc7:	ff f1                	push   %rcx
    4dc9:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    4dd0:	48 03 cd             	add    %rbp,%rcx
    4dd3:	8f c2                	pop    %rdx
    4dd5:	48 89 11             	mov    %rdx,(%rcx)
        str.len -= used + 1;
    4dd8:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    4ddf:	48 03 cd             	add    %rbp,%rcx
    4de2:	ba 08 00 00 00       	mov    $0x8,%edx
    4de7:	48 03 ca             	add    %rdx,%rcx
    4dea:	48 8b 11             	mov    (%rcx),%rdx
    4ded:	ff f2                	push   %rdx
    4def:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    4df2:	ff f1                	push   %rcx
    4df4:	b9 01 00 00 00       	mov    $0x1,%ecx
    4df9:	8f c2                	pop    %rdx
    4dfb:	03 d1                	add    %ecx,%edx
    4dfd:	8f c1                	pop    %rcx
    4dff:	48 63 da             	movslq %edx,%rbx
    4e02:	48 2b cb             	sub    %rbx,%rcx
    4e05:	ff f1                	push   %rcx
    4e07:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    4e0e:	48 03 cd             	add    %rbp,%rcx
    4e11:	ba 08 00 00 00       	mov    $0x8,%edx
    4e16:	48 03 ca             	add    %rdx,%rcx
    4e19:	8f c2                	pop    %rdx
    4e1b:	48 89 11             	mov    %rdx,(%rcx)
        append(str)
    4e1e:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    4e25:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4e29:	48 8b c9             	mov    %rcx,%rcx
    4e2c:	ff f1                	push   %rcx
    4e2e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    4e32:	ff f1                	push   %rcx
    4e34:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    4e38:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    4e3d:	8f c1                	pop    %rcx
    4e3f:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    4e44:	8f c1                	pop    %rcx
    4e46:	48 89 0c 24          	mov    %rcx,(%rsp)
    4e4a:	e8 a1 fa ff ff       	call   48f0 <main+0x48f0>
    4e4f:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        return len - start;
    4e56:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4e5a:	48 8b c9             	mov    %rcx,%rcx
    4e5d:	8b 51 08             	mov    0x8(%rcx),%edx
    4e60:	ff f2                	push   %rdx
    4e62:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    4e65:	8f c2                	pop    %rdx
    4e67:	2b d1                	sub    %ecx,%edx
    4e69:	89 55 f8             	mov    %edx,-0x8(%rbp)
    4e6c:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
    4e73:	8f c5                	pop    %rbp
    4e75:	c3                   	ret
    fn append(value: void*) {
    4e76:	ff f5                	push   %rbp
    4e78:	48 8b ec             	mov    %rsp,%rbp
    4e7b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        append('0')
    4e82:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    4e89:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4e8d:	48 8b c9             	mov    %rcx,%rcx
    4e90:	ff f1                	push   %rcx
    4e92:	b9 30 00 00 00       	mov    $0x30,%ecx
    4e97:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    4e9b:	8f c1                	pop    %rcx
    4e9d:	48 89 0c 24          	mov    %rcx,(%rsp)
    4ea1:	e8 00 fa ff ff       	call   48a6 <main+0x48a6>
    4ea6:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        append('x')
    4ead:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    4eb4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4eb8:	48 8b c9             	mov    %rcx,%rcx
    4ebb:	ff f1                	push   %rcx
    4ebd:	b9 78 00 00 00       	mov    $0x78,%ecx
    4ec2:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    4ec6:	8f c1                	pop    %rcx
    4ec8:	48 89 0c 24          	mov    %rcx,(%rsp)
    4ecc:	e8 d5 f9 ff ff       	call   48a6 <main+0x48a6>
    4ed1:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        zeros: bool = true;
    4ed8:	b9 01 00 00 00       	mov    $0x1,%ecx
    4edd:	88 4d f8             	mov    %cl,-0x8(%rbp)
        for @rev 0..16 {
    4ee0:	b9 10 00 00 00       	mov    $0x10,%ecx
    4ee5:	ff f1                	push   %rcx
    4ee7:	8f c1                	pop    %rcx
    4ee9:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    4eec:	b9 00 00 00 00       	mov    $0x0,%ecx
    4ef1:	ff f1                	push   %rcx
    4ef3:	8f c1                	pop    %rcx
    4ef5:	8b 55 f0             	mov    -0x10(%rbp),%edx
    4ef8:	48 81 ea 01 00 00 00 	sub    $0x1,%rdx
    4eff:	89 55 f0             	mov    %edx,-0x10(%rbp)
    4f02:	3b d1                	cmp    %ecx,%edx
    4f04:	40 0f 9d c2          	rex setge %dl
    4f08:	48 0f b6 d2          	movzbq %dl,%rdx
    4f0c:	48 83 fa 00          	cmp    $0x0,%rdx
    4f10:	0f 84 3e 01 00 00    	je     5054 <main+0x5054>
            hex := (cast<u64>value >> cast<u64>(4*nr)) & cast<u64>0xF;
    4f16:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    4f1a:	ff f1                	push   %rcx
    4f1c:	b9 04 00 00 00       	mov    $0x4,%ecx
    4f21:	ff f1                	push   %rcx
    4f23:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    4f26:	8f c2                	pop    %rdx
    4f28:	0f af d1             	imul   %ecx,%edx
    4f2b:	8b ca                	mov    %edx,%ecx
    4f2d:	8f c2                	pop    %rdx
    4f2f:	48 d3 ea             	shr    %cl,%rdx
    4f32:	ff f2                	push   %rdx
    4f34:	b9 0f 00 00 00       	mov    $0xf,%ecx
    4f39:	8b d1                	mov    %ecx,%edx
    4f3b:	8f c1                	pop    %rcx
    4f3d:	48 23 ca             	and    %rdx,%rcx
    4f40:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
            if hex != 0  zeros = false
    4f44:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4f48:	ff f1                	push   %rcx
    4f4a:	b9 00 00 00 00       	mov    $0x0,%ecx
    4f4f:	8f c2                	pop    %rdx
    4f51:	48 8b da             	mov    %rdx,%rbx
    4f54:	48 63 d1             	movslq %ecx,%rdx
    4f57:	48 3b da             	cmp    %rdx,%rbx
    4f5a:	40 0f 95 c3          	rex setne %bl
    4f5e:	48 0f b6 db          	movzbq %bl,%rbx
    4f62:	48 83 fb 00          	cmp    $0x0,%rbx
    4f66:	0f 84 15 00 00 00    	je     4f81 <main+0x4f81>
    4f6c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4f71:	ff f1                	push   %rcx
    4f73:	48 c7 c1 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rcx
    4f7a:	48 03 cd             	add    %rbp,%rcx
    4f7d:	8f c2                	pop    %rdx
    4f7f:	88 11                	mov    %dl,(%rcx)
            if !zeros {
    4f81:	48 8a 4d f8          	rex.W mov -0x8(%rbp),%cl
    4f85:	48 0f b6 c9          	movzbq %cl,%rcx
    4f89:	48 85 c9             	test   %rcx,%rcx
    4f8c:	40 0f 94 c1          	rex sete %cl
    4f90:	48 0f b6 c9          	movzbq %cl,%rcx
    4f94:	48 83 f9 00          	cmp    $0x0,%rcx
    4f98:	0f 84 b1 00 00 00    	je     504f <main+0x504f>
                if hex < 10u
    4f9e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4fa2:	ff f1                	push   %rcx
    4fa4:	b9 0a 00 00 00       	mov    $0xa,%ecx
    4fa9:	8f c2                	pop    %rdx
    4fab:	48 8b d9             	mov    %rcx,%rbx
    4fae:	48 3b d3             	cmp    %rbx,%rdx
    4fb1:	40 0f 92 c2          	rex setb %dl
    4fb5:	48 0f b6 d2          	movzbq %dl,%rdx
    4fb9:	48 83 fa 00          	cmp    $0x0,%rdx
    4fbd:	0f 84 3d 00 00 00    	je     5000 <main+0x5000>
                    append('0'+hex)
    4fc3:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    4fca:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    4fce:	48 8b c9             	mov    %rcx,%rcx
    4fd1:	ff f1                	push   %rcx
    4fd3:	b9 30 00 00 00       	mov    $0x30,%ecx
    4fd8:	ff f1                	push   %rcx
    4fda:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4fde:	8f c2                	pop    %rdx
    4fe0:	48 8b d9             	mov    %rcx,%rbx
    4fe3:	02 d3                	add    %bl,%dl
    4fe5:	88 54 24 10          	mov    %dl,0x10(%rsp)
    4fe9:	8f c1                	pop    %rcx
    4feb:	48 89 0c 24          	mov    %rcx,(%rsp)
    4fef:	e8 b2 f8 ff ff       	call   48a6 <main+0x48a6>
    4ff4:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    4ffb:	e9 4f 00 00 00       	jmp    504f <main+0x504f>
                    append('a' + hex - 10)
    5000:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5007:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    500b:	48 8b c9             	mov    %rcx,%rcx
    500e:	ff f1                	push   %rcx
    5010:	b9 61 00 00 00       	mov    $0x61,%ecx
    5015:	ff f1                	push   %rcx
    5017:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    501b:	ff f1                	push   %rcx
    501d:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5022:	8f c2                	pop    %rdx
    5024:	48 8b da             	mov    %rdx,%rbx
    5027:	48 63 d1             	movslq %ecx,%rdx
    502a:	48 2b da             	sub    %rdx,%rbx
    502d:	8f c1                	pop    %rcx
    502f:	48 0f b6 d1          	movzbq %cl,%rdx
    5033:	48 0f b6 cb          	movzbq %bl,%rcx
    5037:	02 d1                	add    %cl,%dl
    5039:	88 54 24 10          	mov    %dl,0x10(%rsp)
    503d:	8f c1                	pop    %rcx
    503f:	48 89 0c 24          	mov    %rcx,(%rsp)
    5043:	e8 5e f8 ff ff       	call   48a6 <main+0x48a6>
    5048:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    504f:	e9 98 fe ff ff       	jmp    4eec <main+0x4eec>
        if zeros
    5054:	48 8a 4d f8          	rex.W mov -0x8(%rbp),%cl
    5058:	48 0f b6 c9          	movzbq %cl,%rcx
    505c:	48 83 f9 00          	cmp    $0x0,%rcx
    5060:	0f 84 2b 00 00 00    	je     5091 <main+0x5091>
            append('0'); // we want at least one zero
    5066:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    506d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5071:	48 8b c9             	mov    %rcx,%rcx
    5074:	ff f1                	push   %rcx
    5076:	b9 30 00 00 00       	mov    $0x30,%ecx
    507b:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    507f:	8f c1                	pop    %rcx
    5081:	48 89 0c 24          	mov    %rcx,(%rsp)
    5085:	e8 1c f8 ff ff       	call   48a6 <main+0x48a6>
    508a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5091:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5098:	8f c5                	pop    %rbp
    509a:	c3                   	ret
    fn reserve(newMax: i32) -> bool {
    509b:	ff f5                	push   %rbp
    509d:	48 8b ec             	mov    %rsp,%rbp
    50a0:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if(newMax==0){
    50a7:	8b 4d 18             	mov    0x18(%rbp),%ecx
    50aa:	48 63 c9             	movslq %ecx,%rcx
    50ad:	ff f1                	push   %rcx
    50af:	b9 00 00 00 00       	mov    $0x0,%ecx
    50b4:	8f c2                	pop    %rdx
    50b6:	3b d1                	cmp    %ecx,%edx
    50b8:	40 0f 94 c2          	rex sete %dl
    50bc:	48 0f b6 d2          	movzbq %dl,%rdx
    50c0:	48 83 fa 00          	cmp    $0x0,%rdx
    50c4:	0f 84 ca 00 00 00    	je     5194 <main+0x5194>
            if(max!=0){
    50ca:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    50ce:	48 8b c9             	mov    %rcx,%rcx
    50d1:	8b 51 0c             	mov    0xc(%rcx),%edx
    50d4:	ff f2                	push   %rdx
    50d6:	b9 00 00 00 00       	mov    $0x0,%ecx
    50db:	8f c2                	pop    %rdx
    50dd:	3b d1                	cmp    %ecx,%edx
    50df:	40 0f 95 c2          	rex setne %dl
    50e3:	48 0f b6 d2          	movzbq %dl,%rdx
    50e7:	48 83 fa 00          	cmp    $0x0,%rdx
    50eb:	0f 84 42 00 00 00    	je     5133 <main+0x5133>
                Free(ptr, max + 1);
    50f1:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    50f8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    50fc:	48 8b c9             	mov    %rcx,%rcx
    50ff:	48 8b 11             	mov    (%rcx),%rdx
    5102:	ff f2                	push   %rdx
    5104:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5108:	48 8b c9             	mov    %rcx,%rcx
    510b:	8b 51 0c             	mov    0xc(%rcx),%edx
    510e:	ff f2                	push   %rdx
    5110:	b9 01 00 00 00       	mov    $0x1,%ecx
    5115:	8f c2                	pop    %rdx
    5117:	03 d1                	add    %ecx,%edx
    5119:	48 63 ca             	movslq %edx,%rcx
    511c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    5121:	8f c1                	pop    %rcx
    5123:	48 89 0c 24          	mov    %rcx,(%rsp)
    5127:	e8 25 29 00 00       	call   7a51 <main+0x7a51>
    512c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
            ptr = null;
    5133:	b9 00 00 00 00       	mov    $0x0,%ecx
    5138:	ff f1                	push   %rcx
    513a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    513e:	48 8b c9             	mov    %rcx,%rcx
    5141:	ba 00 00 00 00       	mov    $0x0,%edx
    5146:	48 03 ca             	add    %rdx,%rcx
    5149:	8f c2                	pop    %rdx
    514b:	48 89 11             	mov    %rdx,(%rcx)
            max = 0;
    514e:	b9 00 00 00 00       	mov    $0x0,%ecx
    5153:	ff f1                	push   %rcx
    5155:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5159:	48 8b c9             	mov    %rcx,%rcx
    515c:	ba 0c 00 00 00       	mov    $0xc,%edx
    5161:	48 03 ca             	add    %rdx,%rcx
    5164:	8f c2                	pop    %rdx
    5166:	89 11                	mov    %edx,(%rcx)
            len = 0;
    5168:	b9 00 00 00 00       	mov    $0x0,%ecx
    516d:	ff f1                	push   %rcx
    516f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5173:	48 8b c9             	mov    %rcx,%rcx
    5176:	ba 08 00 00 00       	mov    $0x8,%edx
    517b:	48 03 ca             	add    %rdx,%rcx
    517e:	8f c2                	pop    %rdx
    5180:	89 11                	mov    %edx,(%rcx)
            return true;
    5182:	b9 01 00 00 00       	mov    $0x1,%ecx
    5187:	88 4d f8             	mov    %cl,-0x8(%rbp)
    518a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5191:	8f c5                	pop    %rbp
    5193:	c3                   	ret
        if(!ptr){
    5194:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5198:	48 8b c9             	mov    %rcx,%rcx
    519b:	48 8b 11             	mov    (%rcx),%rdx
    519e:	48 85 d2             	test   %rdx,%rdx
    51a1:	40 0f 94 c2          	rex sete %dl
    51a5:	48 0f b6 d2          	movzbq %dl,%rdx
    51a9:	48 83 fa 00          	cmp    $0x0,%rdx
    51ad:	0f 84 c6 00 00 00    	je     5279 <main+0x5279>
            ptr = Allocate(newMax + 1);
    51b3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    51ba:	8b 4d 18             	mov    0x18(%rbp),%ecx
    51bd:	48 63 c9             	movslq %ecx,%rcx
    51c0:	ff f1                	push   %rcx
    51c2:	b9 01 00 00 00       	mov    $0x1,%ecx
    51c7:	8f c2                	pop    %rdx
    51c9:	03 d1                	add    %ecx,%edx
    51cb:	48 63 ca             	movslq %edx,%rcx
    51ce:	48 89 0c 24          	mov    %rcx,(%rsp)
    51d2:	e8 c4 27 00 00       	call   799b <main+0x799b>
    51d7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    51de:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    51e3:	ff f1                	push   %rcx
    51e5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    51e9:	48 8b c9             	mov    %rcx,%rcx
    51ec:	ba 00 00 00 00       	mov    $0x0,%edx
    51f1:	48 03 ca             	add    %rdx,%rcx
    51f4:	8f c2                	pop    %rdx
    51f6:	48 89 11             	mov    %rdx,(%rcx)
            *ptr = '\0';
    51f9:	b9 00 00 00 00       	mov    $0x0,%ecx
    51fe:	ff f1                	push   %rcx
    5200:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5204:	48 8b c9             	mov    %rcx,%rcx
    5207:	ba 00 00 00 00       	mov    $0x0,%edx
    520c:	48 03 ca             	add    %rdx,%rcx
    520f:	48 8b 11             	mov    (%rcx),%rdx
    5212:	8f c1                	pop    %rcx
    5214:	88 0a                	mov    %cl,(%rdx)
            if(!ptr)
    5216:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    521a:	48 8b c9             	mov    %rcx,%rcx
    521d:	48 8b 11             	mov    (%rcx),%rdx
    5220:	48 85 d2             	test   %rdx,%rdx
    5223:	40 0f 94 c2          	rex sete %dl
    5227:	48 0f b6 d2          	movzbq %dl,%rdx
    522b:	48 83 fa 00          	cmp    $0x0,%rdx
    522f:	0f 84 12 00 00 00    	je     5247 <main+0x5247>
                return false;
    5235:	b9 00 00 00 00       	mov    $0x0,%ecx
    523a:	88 4d f8             	mov    %cl,-0x8(%rbp)
    523d:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5244:	8f c5                	pop    %rbp
    5246:	c3                   	ret
            max = newMax;
    5247:	8b 4d 18             	mov    0x18(%rbp),%ecx
    524a:	48 63 c9             	movslq %ecx,%rcx
    524d:	ff f1                	push   %rcx
    524f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5253:	48 8b c9             	mov    %rcx,%rcx
    5256:	ba 0c 00 00 00       	mov    $0xc,%edx
    525b:	48 03 ca             	add    %rdx,%rcx
    525e:	8f c2                	pop    %rdx
    5260:	89 11                	mov    %edx,(%rcx)
            return true;
    5262:	b9 01 00 00 00       	mov    $0x1,%ecx
    5267:	88 4d f8             	mov    %cl,-0x8(%rbp)
    526a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5271:	8f c5                	pop    %rbp
    5273:	c3                   	ret
    5274:	e9 1d 01 00 00       	jmp    5396 <main+0x5396>
            newPtr: char* = Reallocate(newMax + 1, ptr, max + 1);
    5279:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5280:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5283:	48 63 c9             	movslq %ecx,%rcx
    5286:	ff f1                	push   %rcx
    5288:	b9 01 00 00 00       	mov    $0x1,%ecx
    528d:	8f c2                	pop    %rdx
    528f:	03 d1                	add    %ecx,%edx
    5291:	48 63 ca             	movslq %edx,%rcx
    5294:	ff f1                	push   %rcx
    5296:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    529a:	48 8b c9             	mov    %rcx,%rcx
    529d:	48 8b 11             	mov    (%rcx),%rdx
    52a0:	ff f2                	push   %rdx
    52a2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    52a6:	48 8b c9             	mov    %rcx,%rcx
    52a9:	8b 51 0c             	mov    0xc(%rcx),%edx
    52ac:	ff f2                	push   %rdx
    52ae:	b9 01 00 00 00       	mov    $0x1,%ecx
    52b3:	8f c2                	pop    %rdx
    52b5:	03 d1                	add    %ecx,%edx
    52b7:	48 63 ca             	movslq %edx,%rcx
    52ba:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    52bf:	8f c1                	pop    %rcx
    52c1:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    52c6:	8f c1                	pop    %rcx
    52c8:	48 89 0c 24          	mov    %rcx,(%rsp)
    52cc:	e8 26 27 00 00       	call   79f7 <main+0x79f7>
    52d1:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    52d8:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    52dd:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
            if(!newPtr)
    52e1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    52e5:	48 85 c9             	test   %rcx,%rcx
    52e8:	40 0f 94 c1          	rex sete %cl
    52ec:	48 0f b6 c9          	movzbq %cl,%rcx
    52f0:	48 83 f9 00          	cmp    $0x0,%rcx
    52f4:	0f 84 12 00 00 00    	je     530c <main+0x530c>
                return false;
    52fa:	b9 00 00 00 00       	mov    $0x0,%ecx
    52ff:	88 4d f8             	mov    %cl,-0x8(%rbp)
    5302:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5309:	8f c5                	pop    %rbp
    530b:	c3                   	ret
            ptr = newPtr;
    530c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    5310:	ff f1                	push   %rcx
    5312:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5316:	48 8b c9             	mov    %rcx,%rcx
    5319:	ba 00 00 00 00       	mov    $0x0,%edx
    531e:	48 03 ca             	add    %rdx,%rcx
    5321:	8f c2                	pop    %rdx
    5323:	48 89 11             	mov    %rdx,(%rcx)
            max = newMax;
    5326:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5329:	48 63 c9             	movslq %ecx,%rcx
    532c:	ff f1                	push   %rcx
    532e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5332:	48 8b c9             	mov    %rcx,%rcx
    5335:	ba 0c 00 00 00       	mov    $0xc,%edx
    533a:	48 03 ca             	add    %rdx,%rcx
    533d:	8f c2                	pop    %rdx
    533f:	89 11                	mov    %edx,(%rcx)
            if(len > newMax){
    5341:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5345:	48 8b c9             	mov    %rcx,%rcx
    5348:	8b 51 08             	mov    0x8(%rcx),%edx
    534b:	ff f2                	push   %rdx
    534d:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5350:	48 63 c9             	movslq %ecx,%rcx
    5353:	8f c2                	pop    %rdx
    5355:	3b d1                	cmp    %ecx,%edx
    5357:	40 0f 9f c2          	rex setg %dl
    535b:	48 0f b6 d2          	movzbq %dl,%rdx
    535f:	48 83 fa 00          	cmp    $0x0,%rdx
    5363:	0f 84 1b 00 00 00    	je     5384 <main+0x5384>
                len = newMax;
    5369:	8b 4d 18             	mov    0x18(%rbp),%ecx
    536c:	48 63 c9             	movslq %ecx,%rcx
    536f:	ff f1                	push   %rcx
    5371:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5375:	48 8b c9             	mov    %rcx,%rcx
    5378:	ba 08 00 00 00       	mov    $0x8,%edx
    537d:	48 03 ca             	add    %rdx,%rcx
    5380:	8f c2                	pop    %rdx
    5382:	89 11                	mov    %edx,(%rcx)
            return true;
    5384:	b9 01 00 00 00       	mov    $0x1,%ecx
    5389:	88 4d f8             	mov    %cl,-0x8(%rbp)
    538c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5393:	8f c5                	pop    %rbp
    5395:	c3                   	ret
        return false;
    5396:	b9 00 00 00 00       	mov    $0x0,%ecx
    539b:	88 4d f8             	mov    %cl,-0x8(%rbp)
    539e:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    53a5:	8f c5                	pop    %rbp
    53a7:	c3                   	ret
    return Slice<lang_TypeMember>{
        &lang_members.ptr[lang_typeInfos.ptr[index].members.beg],
        lang_typeInfos.ptr[index].members.end - lang_typeInfos.ptr[index].members.beg
    };
}
fn lang_typesize(id: lang_TypeId) -> u16 {
    53a8:	ff f5                	push   %rbp
    53aa:	48 8b ec             	mov    %rsp,%rbp
    53ad:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    if id.ptr_level != 0  return 8;
    53b4:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    53bb:	48 03 cd             	add    %rbp,%rcx
    53be:	ba 03 00 00 00       	mov    $0x3,%edx
    53c3:	48 03 ca             	add    %rdx,%rcx
    53c6:	48 8a 11             	rex.W mov (%rcx),%dl
    53c9:	48 0f b6 d2          	movzbq %dl,%rdx
    53cd:	ff f2                	push   %rdx
    53cf:	b9 00 00 00 00       	mov    $0x0,%ecx
    53d4:	8f c2                	pop    %rdx
    53d6:	48 0f b6 da          	movzbq %dl,%rbx
    53da:	3b d9                	cmp    %ecx,%ebx
    53dc:	40 0f 95 c3          	rex setne %bl
    53e0:	48 0f b6 db          	movzbq %bl,%rbx
    53e4:	48 83 fb 00          	cmp    $0x0,%rbx
    53e8:	0f 84 17 00 00 00    	je     5405 <main+0x5405>
    53ee:	b9 08 00 00 00       	mov    $0x8,%ecx
    53f3:	48 0f b7 d1          	movzwq %cx,%rdx
    53f7:	66 89 55 f8          	mov    %dx,-0x8(%rbp)
    53fb:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5402:	8f c5                	pop    %rbp
    5404:	c3                   	ret
    index := id.index();
    5405:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    540c:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    5413:	48 03 cd             	add    %rbp,%rcx
    5416:	48 89 0c 24          	mov    %rcx,(%rsp)
    541a:	e8 55 00 00 00       	call   5474 <main+0x5474>
    541f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    5426:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
    542a:	8b c9                	mov    %ecx,%ecx
    542c:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    return lang_typeInfos.ptr[index].size;
    542f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5436 <main+0x5436>
    5436:	ff f1                	push   %rcx
    5438:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    543b:	8f c2                	pop    %rdx
    543d:	48 8b 1a             	mov    (%rdx),%rbx
    5440:	ba 14 00 00 00       	mov    $0x14,%edx
    5445:	48 8b fa             	mov    %rdx,%rdi
    5448:	48 8b c1             	mov    %rcx,%rax
    544b:	48 f7 e7             	mul    %rdi
    544e:	48 8b c8             	mov    %rax,%rcx
    5451:	48 8b d7             	mov    %rdi,%rdx
    5454:	48 03 d9             	add    %rcx,%rbx
    5457:	b9 02 00 00 00       	mov    $0x2,%ecx
    545c:	48 03 d9             	add    %rcx,%rbx
    545f:	66 8b 0b             	mov    (%rbx),%cx
    5462:	48 0f b7 c9          	movzwq %cx,%rcx
    5466:	66 89 4d f8          	mov    %cx,-0x8(%rbp)
    546a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5471:	8f c5                	pop    %rbp
    5473:	c3                   	ret
    fn index() -> u32 { return cast<u32>index0 | (cast<u32>index1 << 16); }
    5474:	ff f5                	push   %rbp
    5476:	48 8b ec             	mov    %rsp,%rbp
    5479:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    5480:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5484:	48 8b c9             	mov    %rcx,%rcx
    5487:	66 8b 11             	mov    (%rcx),%dx
    548a:	48 0f b7 d2          	movzwq %dx,%rdx
    548e:	48 0f b7 ca          	movzwq %dx,%rcx
    5492:	ff f1                	push   %rcx
    5494:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5498:	48 8b c9             	mov    %rcx,%rcx
    549b:	48 8a 51 02          	rex.W mov 0x2(%rcx),%dl
    549f:	48 0f b6 d2          	movzbq %dl,%rdx
    54a3:	48 0f b6 ca          	movzbq %dl,%rcx
    54a7:	ff f1                	push   %rcx
    54a9:	b9 10 00 00 00       	mov    $0x10,%ecx
    54ae:	8f c2                	pop    %rdx
    54b0:	48 d3 e2             	shl    %cl,%rdx
    54b3:	8f c1                	pop    %rcx
    54b5:	0b ca                	or     %edx,%ecx
    54b7:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    54ba:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    54c1:	8f c5                	pop    %rbp
    54c3:	c3                   	ret
struct BucketArray_Bucket {
    m_data: u8*;
    m_amountOfUsedSpots: i32;
    m_max: i32; // the max is the same for every bucket, removing this field won't save memory. Bucket will still be 16 bytes. So we might as well store the max
				// m_max is not the same as valuesPerBucket, valuesPerBucket is an amount while m_max is size in bytes
    fn getValue(index: i32, elementSize: i32, valuesPerBucket: i32) -> void* {
    54c4:	ff f5                	push   %rbp
    54c6:	48 8b ec             	mov    %rsp,%rbp
    54c9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    //return (Value*)(memory.data+ vpf/8+index*sizeof(Value));
        return (m_data + valuesPerBucket + index * elementSize);
    54d0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    54d4:	48 8b c9             	mov    %rcx,%rcx
    54d7:	48 8b 11             	mov    (%rcx),%rdx
    54da:	ff f2                	push   %rdx
    54dc:	8b 4d 20             	mov    0x20(%rbp),%ecx
    54df:	48 63 c9             	movslq %ecx,%rcx
    54e2:	8f c2                	pop    %rdx
    54e4:	48 03 d1             	add    %rcx,%rdx
    54e7:	ff f2                	push   %rdx
    54e9:	8b 4d 18             	mov    0x18(%rbp),%ecx
    54ec:	48 63 c9             	movslq %ecx,%rcx
    54ef:	ff f1                	push   %rcx
    54f1:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
    54f4:	48 63 c9             	movslq %ecx,%rcx
    54f7:	8f c2                	pop    %rdx
    54f9:	0f af d1             	imul   %ecx,%edx
    54fc:	8f c1                	pop    %rcx
    54fe:	48 03 ca             	add    %rdx,%rcx
    5501:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    5505:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    550c:	8f c5                	pop    %rbp
    550e:	c3                   	ret
    }
    fn getBool(index: i32) -> bool {
    550f:	ff f5                	push   %rbp
    5511:	48 8b ec             	mov    %rsp,%rbp
    5514:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        //u32 i = index / 8;
        //u32 j = index % 8;
        //char byte = memory.data[i];
        //char bit = byte&(1<<j);
        return *(m_data + index);
    551b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    551f:	48 8b c9             	mov    %rcx,%rcx
    5522:	48 8b 11             	mov    (%rcx),%rdx
    5525:	ff f2                	push   %rdx
    5527:	8b 4d 18             	mov    0x18(%rbp),%ecx
    552a:	48 63 c9             	movslq %ecx,%rcx
    552d:	8f c2                	pop    %rdx
    552f:	48 03 d1             	add    %rcx,%rdx
    5532:	48 8a 0a             	rex.W mov (%rdx),%cl
    5535:	48 0f b6 c9          	movzbq %cl,%rcx
    5539:	48 0f be d1          	movsbq %cl,%rdx
    553d:	88 55 f8             	mov    %dl,-0x8(%rbp)
    5540:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    5547:	8f c5                	pop    %rbp
    5549:	c3                   	ret
    }
    fn setBool(index: i32, yes: bool) {
    554a:	ff f5                	push   %rbp
    554c:	48 8b ec             	mov    %rsp,%rbp
        //if (yes) {
        //	memory.data[i] = memory.data[i] | (1 << j);
        //} else {
        //	memory.data[i] = memory.data[i] & (~(1 << j));
        //}
        *(m_data + index) = yes;
    554f:	48 8a 4d 1c          	rex.W mov 0x1c(%rbp),%cl
    5553:	48 0f b6 c9          	movzbq %cl,%rcx
    5557:	ff f1                	push   %rcx
    5559:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    555d:	48 8b c9             	mov    %rcx,%rcx
    5560:	48 8b 11             	mov    (%rcx),%rdx
    5563:	ff f2                	push   %rdx
    5565:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5568:	48 63 c9             	movslq %ecx,%rcx
    556b:	8f c2                	pop    %rdx
    556d:	48 03 d1             	add    %rcx,%rdx
    5570:	8f c1                	pop    %rcx
    5572:	48 0f be d9          	movsbq %cl,%rbx
    5576:	88 1a                	mov    %bl,(%rdx)
    5578:	8f c5                	pop    %rbp
    557a:	c3                   	ret
    fn reset() { index = -1; value = null; }
};
struct BucketArray<T> {
    // constructor does nothing except remember the variable
    // valuesPerBucket is forced to be divisible by 8. (data alignment * bits as bools)
    fn init(valuesPerBucket: i32) {
    557b:	ff f5                	push   %rbp
    557d:	48 8b ec             	mov    %rsp,%rbp
        // TODO: Assert(m_valuesPerBucket == 0)
        m_valuesPerBucket = (valuesPerBucket+7)&~7 // ensure 8-byte alignment
    5580:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5583:	48 63 c9             	movslq %ecx,%rcx
    5586:	ff f1                	push   %rcx
    5588:	b9 07 00 00 00       	mov    $0x7,%ecx
    558d:	8f c2                	pop    %rdx
    558f:	03 d1                	add    %ecx,%edx
    5591:	ff f2                	push   %rdx
    5593:	b9 07 00 00 00       	mov    $0x7,%ecx
    5598:	48 8b c9             	mov    %rcx,%rcx
    559b:	48 f7 d1             	not    %rcx
    559e:	8f c2                	pop    %rdx
    55a0:	23 d1                	and    %ecx,%edx
    55a2:	ff f2                	push   %rdx
    55a4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    55a8:	48 8b c9             	mov    %rcx,%rcx
    55ab:	ba 10 00 00 00       	mov    $0x10,%edx
    55b0:	48 03 ca             	add    %rdx,%rcx
    55b3:	8f c2                	pop    %rdx
    55b5:	89 11                	mov    %edx,(%rcx)
    55b7:	8f c5                	pop    %rbp
    55b9:	c3                   	ret
		return add(&value)
	}
    // @return Index where element is. -1 if something failed.
    // @param value A pointer to the value of the new element. Note that a memcpy occurs. Value can be null for zero initialized data.
    // @param outElement A pointer to the newly added element. Optional.
    fn add(value: T*) -> T*, i32 {
    55ba:	ff f5                	push   %rbp
    55bc:	48 8b ec             	mov    %rsp,%rbp
    55bf:	48 81 ec 48 00 00 00 	sub    $0x48,%rsp
		if (m_valuesPerBucket == 0) {
    55c6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    55ca:	48 8b c9             	mov    %rcx,%rcx
    55cd:	8b 51 10             	mov    0x10(%rcx),%edx
    55d0:	ff f2                	push   %rdx
    55d2:	b9 00 00 00 00       	mov    $0x0,%ecx
    55d7:	8f c2                	pop    %rdx
    55d9:	3b d1                	cmp    %ecx,%edx
    55db:	40 0f 94 c2          	rex sete %dl
    55df:	48 0f b6 d2          	movzbq %dl,%rdx
    55e3:	48 83 fa 00          	cmp    $0x0,%rdx
    55e7:	0f 84 63 00 00 00    	je     5650 <main+0x5650>
            log("BucketArray wasn't initialized.")
    55ed:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    55f4:	b9 1f 00 00 00       	mov    $0x1f,%ecx
    55f9:	ff f1                	push   %rcx
    55fb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5602 <main+0x5602>
    5602:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5607:	8f c1                	pop    %rcx
    5609:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    560e:	e8 7f ea ff ff       	call   4092 <main+0x4092>
    5613:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    561a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5621:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5626:	88 0c 24             	mov    %cl,(%rsp)
    5629:	e8 c3 e9 ff ff       	call   3ff1 <main+0x3ff1>
    562e:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
            // LOG_BUCKET( log(BUCKET_ERROR," valuesPerBucket is 0") )
            
			return null, -1;
    5635:	b9 00 00 00 00       	mov    $0x0,%ecx
    563a:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    563e:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5643:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    5646:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    564d:	8f c5                	pop    %rbp
    564f:	c3                   	ret
		}

		//engone::log::out << "BucketArray: ADD "<<m_valuesPerBucket<<"\n";
		// Find available frame
		bucketIndex := -1;
    5650:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5655:	89 4d e8             	mov    %ecx,-0x18(%rbp)
		for i: 0..m_buckets_max {
    5658:	b9 00 00 00 00       	mov    $0x0,%ecx
    565d:	ff f1                	push   %rcx
    565f:	8f c1                	pop    %rcx
    5661:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    5668:	89 4d e0             	mov    %ecx,-0x20(%rbp)
    566b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    566f:	48 8b c9             	mov    %rcx,%rcx
    5672:	8b 51 08             	mov    0x8(%rcx),%edx
    5675:	ff f2                	push   %rdx
    5677:	8f c1                	pop    %rcx
    5679:	8b 55 e0             	mov    -0x20(%rbp),%edx
    567c:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    5683:	89 55 e0             	mov    %edx,-0x20(%rbp)
    5686:	3b d1                	cmp    %ecx,%edx
    5688:	40 0f 9c c2          	rex setl %dl
    568c:	48 0f b6 d2          	movzbq %dl,%rdx
    5690:	48 83 fa 00          	cmp    $0x0,%rdx
    5694:	0f 84 93 00 00 00    	je     572d <main+0x572d>
			bucket := m_buckets[i];
    569a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    569e:	48 8b c9             	mov    %rcx,%rcx
    56a1:	48 8b 11             	mov    (%rcx),%rdx
    56a4:	ff f2                	push   %rdx
    56a6:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    56a9:	8f c2                	pop    %rdx
    56ab:	bb 10 00 00 00       	mov    $0x10,%ebx
    56b0:	ff f2                	push   %rdx
    56b2:	48 8b c1             	mov    %rcx,%rax
    56b5:	f7 e3                	mul    %ebx
    56b7:	48 8b c8             	mov    %rax,%rcx
    56ba:	8f c2                	pop    %rdx
    56bc:	48 03 d1             	add    %rcx,%rdx
    56bf:	8b 4a 0c             	mov    0xc(%rdx),%ecx
    56c2:	ff f1                	push   %rcx
    56c4:	8b 4a 08             	mov    0x8(%rdx),%ecx
    56c7:	ff f1                	push   %rcx
    56c9:	48 8b 0a             	mov    (%rdx),%rcx
    56cc:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    56d0:	8f c1                	pop    %rcx
    56d2:	89 4d d8             	mov    %ecx,-0x28(%rbp)
    56d5:	8f c1                	pop    %rcx
    56d7:	89 4d dc             	mov    %ecx,-0x24(%rbp)
			LOG_DEBUG("BucketArray: Check bucket ", i ," (", bucket.m_amountOfUsedSpots , " != " , m_valuesPerBucket,")");
			if (bucket.m_amountOfUsedSpots != m_valuesPerBucket) {
    56da:	48 c7 c1 d0 ff ff ff 	mov    $0xffffffffffffffd0,%rcx
    56e1:	48 03 cd             	add    %rbp,%rcx
    56e4:	ba 08 00 00 00       	mov    $0x8,%edx
    56e9:	48 03 ca             	add    %rdx,%rcx
    56ec:	8b 11                	mov    (%rcx),%edx
    56ee:	ff f2                	push   %rdx
    56f0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    56f4:	48 8b c9             	mov    %rcx,%rcx
    56f7:	8b 51 10             	mov    0x10(%rcx),%edx
    56fa:	8f c1                	pop    %rcx
    56fc:	3b ca                	cmp    %edx,%ecx
    56fe:	40 0f 95 c1          	rex setne %cl
    5702:	48 0f b6 c9          	movzbq %cl,%rcx
    5706:	48 83 f9 00          	cmp    $0x0,%rcx
    570a:	0f 84 18 00 00 00    	je     5728 <main+0x5728>
				bucketIndex = i;
    5710:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    5713:	ff f1                	push   %rcx
    5715:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    571c:	48 03 cd             	add    %rbp,%rcx
    571f:	8f c2                	pop    %rdx
    5721:	89 11                	mov    %edx,(%rcx)
				LOG_DEBUG("BucketArray: found bucket ",bucketIndex," with ", bucket.m_amountOfUsedSpots , " objects");
				break;
    5723:	e9 05 00 00 00       	jmp    572d <main+0x572d>
    5728:	e9 3e ff ff ff       	jmp    566b <main+0x566b>
			}
		}
		// Create new frame if non found
		if (bucketIndex == -1) {
    572d:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    5730:	ff f1                	push   %rcx
    5732:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5737:	8f c2                	pop    %rdx
    5739:	3b d1                	cmp    %ecx,%edx
    573b:	40 0f 94 c2          	rex sete %dl
    573f:	48 0f b6 d2          	movzbq %dl,%rdx
    5743:	48 83 fa 00          	cmp    $0x0,%rdx
    5747:	0f 84 f3 02 00 00    	je     5a40 <main+0x5a40>
			newMax: i32 = m_buckets_max * 1.5 + 1;
    574d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5751:	48 8b c9             	mov    %rcx,%rcx
    5754:	8b 51 08             	mov    0x8(%rcx),%edx
    5757:	ff f2                	push   %rdx
    5759:	c7 44 24 f8 00 00 c0 	movl   $0x3fc00000,-0x8(%rsp)
    5760:	3f 
    5761:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    5767:	8f c1                	pop    %rcx
    5769:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    576d:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    5771:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5778:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    577d:	b9 01 00 00 00       	mov    $0x1,%ecx
    5782:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    5787:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    578e:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    5792:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    5796:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
    579a:	89 4d e0             	mov    %ecx,-0x20(%rbp)
            newBuckets: BucketArray_Bucket* = Reallocate(newMax * sizeof(BucketArray_Bucket), m_buckets, m_buckets_max * sizeof(BucketArray_Bucket));
    579d:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    57a4:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    57a7:	ff f1                	push   %rcx
    57a9:	b9 10 00 00 00       	mov    $0x10,%ecx
    57ae:	8f c2                	pop    %rdx
    57b0:	0f af d1             	imul   %ecx,%edx
    57b3:	48 63 ca             	movslq %edx,%rcx
    57b6:	ff f1                	push   %rcx
    57b8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    57bc:	48 8b c9             	mov    %rcx,%rcx
    57bf:	48 8b 11             	mov    (%rcx),%rdx
    57c2:	ff f2                	push   %rdx
    57c4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    57c8:	48 8b c9             	mov    %rcx,%rcx
    57cb:	8b 51 08             	mov    0x8(%rcx),%edx
    57ce:	ff f2                	push   %rdx
    57d0:	b9 10 00 00 00       	mov    $0x10,%ecx
    57d5:	8f c2                	pop    %rdx
    57d7:	0f af d1             	imul   %ecx,%edx
    57da:	48 63 ca             	movslq %edx,%rcx
    57dd:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    57e2:	8f c1                	pop    %rcx
    57e4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    57e9:	8f c1                	pop    %rcx
    57eb:	48 89 0c 24          	mov    %rcx,(%rsp)
    57ef:	e8 03 22 00 00       	call   79f7 <main+0x79f7>
    57f4:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    57fb:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    5800:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
			memory_tracker.remove(m_buckets, m_buckets_max * sizeof(BucketArray_Bucket), typeid BucketArray_Bucket)
    5804:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    580b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5812 <main+0x5812>
    5812:	ff f1                	push   %rcx
    5814:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5818:	48 8b c9             	mov    %rcx,%rcx
    581b:	48 8b 11             	mov    (%rcx),%rdx
    581e:	ff f2                	push   %rdx
    5820:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5824:	48 8b c9             	mov    %rcx,%rcx
    5827:	8b 51 08             	mov    0x8(%rcx),%edx
    582a:	ff f2                	push   %rdx
    582c:	b9 10 00 00 00       	mov    $0x10,%ecx
    5831:	8f c2                	pop    %rdx
    5833:	0f af d1             	imul   %ecx,%edx
    5836:	ff f2                	push   %rdx
    5838:	b9 00 00 00 00       	mov    $0x0,%ecx
    583d:	ff f1                	push   %rcx
    583f:	b9 00 00 00 00       	mov    $0x0,%ecx
    5844:	ff f1                	push   %rcx
    5846:	b9 63 00 00 00       	mov    $0x63,%ecx
    584b:	66 89 4c 24 3c       	mov    %cx,0x3c(%rsp)
    5850:	8f c1                	pop    %rcx
    5852:	88 4c 24 36          	mov    %cl,0x36(%rsp)
    5856:	8f c1                	pop    %rcx
    5858:	88 4c 24 2f          	mov    %cl,0x2f(%rsp)
    585c:	8f c1                	pop    %rcx
    585e:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    5862:	8f c1                	pop    %rcx
    5864:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    5869:	8f c1                	pop    %rcx
    586b:	48 89 0c 24          	mov    %rcx,(%rsp)
    586f:	e8 b2 31 00 00       	call   8a26 <main+0x8a26>
    5874:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
			memory_tracker.add(newBuckets, newMax * sizeof(BucketArray_Bucket), typeid BucketArray_Bucket)
    587b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5882:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5889 <main+0x5889>
    5889:	ff f1                	push   %rcx
    588b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    588f:	ff f1                	push   %rcx
    5891:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    5894:	ff f1                	push   %rcx
    5896:	b9 10 00 00 00       	mov    $0x10,%ecx
    589b:	8f c2                	pop    %rdx
    589d:	0f af d1             	imul   %ecx,%edx
    58a0:	ff f2                	push   %rdx
    58a2:	b9 00 00 00 00       	mov    $0x0,%ecx
    58a7:	ff f1                	push   %rcx
    58a9:	b9 00 00 00 00       	mov    $0x0,%ecx
    58ae:	ff f1                	push   %rcx
    58b0:	b9 63 00 00 00       	mov    $0x63,%ecx
    58b5:	66 89 4c 24 3c       	mov    %cx,0x3c(%rsp)
    58ba:	8f c1                	pop    %rcx
    58bc:	88 4c 24 36          	mov    %cl,0x36(%rsp)
    58c0:	8f c1                	pop    %rcx
    58c2:	88 4c 24 2f          	mov    %cl,0x2f(%rsp)
    58c6:	8f c1                	pop    %rcx
    58c8:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    58cc:	8f c1                	pop    %rcx
    58ce:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    58d3:	8f c1                	pop    %rcx
    58d5:	48 89 0c 24          	mov    %rcx,(%rsp)
    58d9:	e8 31 27 00 00       	call   800f <main+0x800f>
    58de:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
			if (!newBuckets) {
    58e5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    58e9:	48 85 c9             	test   %rcx,%rcx
    58ec:	40 0f 94 c1          	rex sete %cl
    58f0:	48 0f b6 c9          	movzbq %cl,%rcx
    58f4:	48 83 f9 00          	cmp    $0x0,%rcx
    58f8:	0f 84 90 00 00 00    	je     598e <main+0x598e>
				//engone::log::out >> engone::log::Disable;
                log(BUCKET_ERROR," failed resize buckets")
    58fe:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5905:	b9 0d 00 00 00       	mov    $0xd,%ecx
    590a:	ff f1                	push   %rcx
    590c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5913 <main+0x5913>
    5913:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5918:	8f c1                	pop    %rcx
    591a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    591f:	e8 6e e7 ff ff       	call   4092 <main+0x4092>
    5924:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    592b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5932:	b9 16 00 00 00       	mov    $0x16,%ecx
    5937:	ff f1                	push   %rcx
    5939:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5940 <main+0x5940>
    5940:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5945:	8f c1                	pop    %rcx
    5947:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    594c:	e8 41 e7 ff ff       	call   4092 <main+0x4092>
    5951:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5958:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    595f:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5964:	88 0c 24             	mov    %cl,(%rsp)
    5967:	e8 85 e6 ff ff       	call   3ff1 <main+0x3ff1>
    596c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
				return null, -1;
    5973:	b9 00 00 00 00       	mov    $0x0,%ecx
    5978:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    597c:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5981:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    5984:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    598b:	8f c5                	pop    %rbp
    598d:	c3                   	ret
			}
            m_buckets = newBuckets;
    598e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    5992:	ff f1                	push   %rcx
    5994:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5998:	48 8b c9             	mov    %rcx,%rcx
    599b:	ba 00 00 00 00       	mov    $0x0,%edx
    59a0:	48 03 ca             	add    %rdx,%rcx
    59a3:	8f c2                	pop    %rdx
    59a5:	48 89 11             	mov    %rdx,(%rcx)
            
			memzero((m_buckets + m_buckets_max * sizeof BucketArray_Bucket), (newMax - m_buckets_max) * sizeof(BucketArray_Bucket));
    59a8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    59ac:	48 8b c9             	mov    %rcx,%rcx
    59af:	48 8b 11             	mov    (%rcx),%rdx
    59b2:	ff f2                	push   %rdx
    59b4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    59b8:	48 8b c9             	mov    %rcx,%rcx
    59bb:	8b 51 08             	mov    0x8(%rcx),%edx
    59be:	ff f2                	push   %rdx
    59c0:	b9 10 00 00 00       	mov    $0x10,%ecx
    59c5:	8f c2                	pop    %rdx
    59c7:	0f af d1             	imul   %ecx,%edx
    59ca:	8f c1                	pop    %rcx
    59cc:	48 03 ca             	add    %rdx,%rcx
    59cf:	ff f1                	push   %rcx
    59d1:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    59d4:	ff f1                	push   %rcx
    59d6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    59da:	48 8b c9             	mov    %rcx,%rcx
    59dd:	8b 51 08             	mov    0x8(%rcx),%edx
    59e0:	8f c1                	pop    %rcx
    59e2:	2b ca                	sub    %edx,%ecx
    59e4:	ff f1                	push   %rcx
    59e6:	b9 10 00 00 00       	mov    $0x10,%ecx
    59eb:	8f c2                	pop    %rdx
    59ed:	0f af d1             	imul   %ecx,%edx
    59f0:	48 63 ca             	movslq %edx,%rcx
    59f3:	8f c2                	pop    %rdx
    59f5:	ff f2                	push   %rdx
    59f7:	ff f1                	push   %rcx
    59f9:	48 01 d1             	add    %rdx,%rcx
    59fc:	48 3b ca             	cmp    %rdx,%rcx
    59ff:	74 09                	je     5a0a <main+0x5a0a>
    5a01:	c6 02 00             	movb   $0x0,(%rdx)
    5a04:	48 83 c2 01          	add    $0x1,%rdx
    5a08:	eb f2                	jmp    59fc <main+0x59fc>
    5a0a:	8f c1                	pop    %rcx
    5a0c:	8f c2                	pop    %rdx
			// for (int i = m_buckets_max; i < newMax; i++) {
                
			// 	*((Frame*)m_frames.data + i) = Frame(m_frames.getAllocType()); // char
			// }
			bucketIndex = m_buckets_max;
    5a0e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5a12:	48 8b c9             	mov    %rcx,%rcx
    5a15:	8b 51 08             	mov    0x8(%rcx),%edx
    5a18:	ff f2                	push   %rdx
    5a1a:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    5a21:	48 03 cd             	add    %rbp,%rcx
    5a24:	8f c2                	pop    %rdx
    5a26:	89 11                	mov    %edx,(%rcx)
            m_buckets_max = newMax;
    5a28:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    5a2b:	ff f1                	push   %rcx
    5a2d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5a31:	48 8b c9             	mov    %rcx,%rcx
    5a34:	ba 08 00 00 00       	mov    $0x8,%edx
    5a39:	48 03 ca             	add    %rdx,%rcx
    5a3c:	8f c2                	pop    %rdx
    5a3e:	89 11                	mov    %edx,(%rcx)
			LOG_DEBUG("BucketArray: Create bucket ", bucketIndex);
		}

		// Insert value into bucket
		bucket := &m_buckets[bucketIndex];
    5a40:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5a44:	48 8b c9             	mov    %rcx,%rcx
    5a47:	ba 00 00 00 00       	mov    $0x0,%edx
    5a4c:	48 03 ca             	add    %rdx,%rcx
    5a4f:	ff f1                	push   %rcx
    5a51:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    5a54:	8f c2                	pop    %rdx
    5a56:	48 8b 1a             	mov    (%rdx),%rbx
    5a59:	ba 10 00 00 00       	mov    $0x10,%edx
    5a5e:	48 8b fa             	mov    %rdx,%rdi
    5a61:	48 8b c1             	mov    %rcx,%rax
    5a64:	48 f7 e7             	mul    %rdi
    5a67:	48 8b c8             	mov    %rax,%rcx
    5a6a:	48 8b d7             	mov    %rdi,%rdx
    5a6d:	48 03 d9             	add    %rcx,%rbx
    5a70:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
		if (bucket.m_max == 0) {
    5a74:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5a7b:	48 03 cd             	add    %rbp,%rcx
    5a7e:	48 8b 11             	mov    (%rcx),%rdx
    5a81:	b9 0c 00 00 00       	mov    $0xc,%ecx
    5a86:	48 03 d1             	add    %rcx,%rdx
    5a89:	8b 0a                	mov    (%rdx),%ecx
    5a8b:	ff f1                	push   %rcx
    5a8d:	b9 00 00 00 00       	mov    $0x0,%ecx
    5a92:	8f c2                	pop    %rdx
    5a94:	3b d1                	cmp    %ecx,%edx
    5a96:	40 0f 94 c2          	rex sete %dl
    5a9a:	48 0f b6 d2          	movzbq %dl,%rdx
    5a9e:	48 83 fa 00          	cmp    $0x0,%rdx
    5aa2:	0f 84 e3 01 00 00    	je     5c8b <main+0x5c8b>
            newSize := m_valuesPerBucket /* /8 */ + m_valuesPerBucket * sizeof(T);
    5aa8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5aac:	48 8b c9             	mov    %rcx,%rcx
    5aaf:	8b 51 10             	mov    0x10(%rcx),%edx
    5ab2:	ff f2                	push   %rdx
    5ab4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5ab8:	48 8b c9             	mov    %rcx,%rcx
    5abb:	8b 51 10             	mov    0x10(%rcx),%edx
    5abe:	ff f2                	push   %rdx
    5ac0:	b9 10 00 00 00       	mov    $0x10,%ecx
    5ac5:	8f c2                	pop    %rdx
    5ac7:	0f af d1             	imul   %ecx,%edx
    5aca:	8f c1                	pop    %rcx
    5acc:	03 ca                	add    %edx,%ecx
    5ace:	89 4d d8             	mov    %ecx,-0x28(%rbp)
            bucket.m_data = Allocate(newSize);
    5ad1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5ad8:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5adb:	48 63 d1             	movslq %ecx,%rdx
    5ade:	48 89 14 24          	mov    %rdx,(%rsp)
    5ae2:	e8 b4 1e 00 00       	call   799b <main+0x799b>
    5ae7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    5aee:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    5af3:	ff f1                	push   %rcx
    5af5:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5afc:	48 03 cd             	add    %rbp,%rcx
    5aff:	48 8b 11             	mov    (%rcx),%rdx
    5b02:	8f c1                	pop    %rcx
    5b04:	48 89 0a             	mov    %rcx,(%rdx)
			memory_tracker.add(bucket.m_data, newSize, typeid u8)
    5b07:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5b0e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5b15 <main+0x5b15>
    5b15:	ff f1                	push   %rcx
    5b17:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5b1e:	48 03 cd             	add    %rbp,%rcx
    5b21:	48 8b 11             	mov    (%rcx),%rdx
    5b24:	48 8b 0a             	mov    (%rdx),%rcx
    5b27:	ff f1                	push   %rcx
    5b29:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5b2c:	ff f1                	push   %rcx
    5b2e:	b9 00 00 00 00       	mov    $0x0,%ecx
    5b33:	ff f1                	push   %rcx
    5b35:	b9 00 00 00 00       	mov    $0x0,%ecx
    5b3a:	ff f1                	push   %rcx
    5b3c:	b9 01 00 00 00       	mov    $0x1,%ecx
    5b41:	66 89 4c 24 3c       	mov    %cx,0x3c(%rsp)
    5b46:	8f c1                	pop    %rcx
    5b48:	88 4c 24 36          	mov    %cl,0x36(%rsp)
    5b4c:	8f c1                	pop    %rcx
    5b4e:	88 4c 24 2f          	mov    %cl,0x2f(%rsp)
    5b52:	8f c1                	pop    %rcx
    5b54:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    5b58:	8f c1                	pop    %rcx
    5b5a:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    5b5f:	8f c1                	pop    %rcx
    5b61:	48 89 0c 24          	mov    %rcx,(%rsp)
    5b65:	e8 a5 24 00 00       	call   800f <main+0x800f>
    5b6a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
			if (!bucket.m_data) {
    5b71:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5b78:	48 03 cd             	add    %rbp,%rcx
    5b7b:	48 8b 11             	mov    (%rcx),%rdx
    5b7e:	48 8b 0a             	mov    (%rdx),%rcx
    5b81:	48 85 c9             	test   %rcx,%rcx
    5b84:	40 0f 94 c1          	rex sete %cl
    5b88:	48 0f b6 c9          	movzbq %cl,%rcx
    5b8c:	48 83 f9 00          	cmp    $0x0,%rcx
    5b90:	0f 84 90 00 00 00    	je     5c26 <main+0x5c26>
                log(BUCKET_ERROR," failed resize bucket")
    5b96:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5b9d:	b9 0d 00 00 00       	mov    $0xd,%ecx
    5ba2:	ff f1                	push   %rcx
    5ba4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5bab <main+0x5bab>
    5bab:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5bb0:	8f c1                	pop    %rcx
    5bb2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5bb7:	e8 d6 e4 ff ff       	call   4092 <main+0x4092>
    5bbc:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5bc3:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5bca:	b9 15 00 00 00       	mov    $0x15,%ecx
    5bcf:	ff f1                	push   %rcx
    5bd1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5bd8 <main+0x5bd8>
    5bd8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5bdd:	8f c1                	pop    %rcx
    5bdf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5be4:	e8 a9 e4 ff ff       	call   4092 <main+0x4092>
    5be9:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5bf0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5bf7:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5bfc:	88 0c 24             	mov    %cl,(%rsp)
    5bff:	e8 ed e3 ff ff       	call   3ff1 <main+0x3ff1>
    5c04:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
				//engone::log::out >> engone::log::Disable; 
				return null, -1;
    5c0b:	b9 00 00 00 00       	mov    $0x0,%ecx
    5c10:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    5c14:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5c19:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    5c1c:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    5c23:	8f c5                	pop    %rbp
    5c25:	c3                   	ret
			}
            bucket.m_max = newSize;
    5c26:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5c29:	ff f1                	push   %rcx
    5c2b:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5c32:	48 03 cd             	add    %rbp,%rcx
    5c35:	48 8b 11             	mov    (%rcx),%rdx
    5c38:	b9 0c 00 00 00       	mov    $0xc,%ecx
    5c3d:	48 03 d1             	add    %rcx,%rdx
    5c40:	8f c1                	pop    %rcx
    5c42:	89 0a                	mov    %ecx,(%rdx)

            // Assert(newSize % alignof(T) == 8);

			//memzero(bucket.m_data,0,bucket.m_max/8);
			memzero(bucket.m_data, bucket.m_max);
    5c44:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5c4b:	48 03 cd             	add    %rbp,%rcx
    5c4e:	48 8b 11             	mov    (%rcx),%rdx
    5c51:	48 8b 0a             	mov    (%rdx),%rcx
    5c54:	ff f1                	push   %rcx
    5c56:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5c5d:	48 03 cd             	add    %rbp,%rcx
    5c60:	48 8b 11             	mov    (%rcx),%rdx
    5c63:	b9 0c 00 00 00       	mov    $0xc,%ecx
    5c68:	48 03 d1             	add    %rcx,%rdx
    5c6b:	8b 0a                	mov    (%rdx),%ecx
    5c6d:	48 63 d1             	movslq %ecx,%rdx
    5c70:	8f c1                	pop    %rcx
    5c72:	ff f1                	push   %rcx
    5c74:	ff f2                	push   %rdx
    5c76:	48 01 ca             	add    %rcx,%rdx
    5c79:	48 3b d1             	cmp    %rcx,%rdx
    5c7c:	74 09                	je     5c87 <main+0x5c87>
    5c7e:	c6 01 00             	movb   $0x0,(%rcx)
    5c81:	48 83 c1 01          	add    $0x1,%rcx
    5c85:	eb f2                	jmp    5c79 <main+0x5c79>
    5c87:	8f c2                	pop    %rdx
    5c89:	8f c1                	pop    %rcx
			LOG_DEBUG("BucketArray : Reserve values for bucket ",  bucketIndex);
		}

		// Find empty slot
		valueIndex := -1;
    5c8b:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5c90:	89 4d d8             	mov    %ecx,-0x28(%rbp)
		for i: 0..m_valuesPerBucket {
    5c93:	b9 00 00 00 00       	mov    $0x0,%ecx
    5c98:	ff f1                	push   %rcx
    5c9a:	8f c1                	pop    %rcx
    5c9c:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    5ca3:	89 4d d0             	mov    %ecx,-0x30(%rbp)
    5ca6:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5caa:	48 8b c9             	mov    %rcx,%rcx
    5cad:	8b 51 10             	mov    0x10(%rcx),%edx
    5cb0:	ff f2                	push   %rdx
    5cb2:	8f c1                	pop    %rcx
    5cb4:	8b 55 d0             	mov    -0x30(%rbp),%edx
    5cb7:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    5cbe:	89 55 d0             	mov    %edx,-0x30(%rbp)
    5cc1:	3b d1                	cmp    %ecx,%edx
    5cc3:	40 0f 9c c2          	rex setl %dl
    5cc7:	48 0f b6 d2          	movzbq %dl,%rdx
    5ccb:	48 83 fa 00          	cmp    $0x0,%rdx
    5ccf:	0f 84 7a 00 00 00    	je     5d4f <main+0x5d4f>
			yes := bucket.getBool(i);
    5cd5:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5cdc:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5ce3:	48 03 cd             	add    %rbp,%rcx
    5ce6:	48 8b 11             	mov    (%rcx),%rdx
    5ce9:	ff f2                	push   %rdx
    5ceb:	8b 4d d0             	mov    -0x30(%rbp),%ecx
    5cee:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    5cf2:	8f c1                	pop    %rcx
    5cf4:	48 89 0c 24          	mov    %rcx,(%rsp)
    5cf8:	e8 12 f8 ff ff       	call   550f <main+0x550f>
    5cfd:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5d04:	48 8a 4c 24 d0       	rex.W mov -0x30(%rsp),%cl
    5d09:	48 0f b6 c9          	movzbq %cl,%rcx
    5d0d:	88 4d c8             	mov    %cl,-0x38(%rbp)
			if (!yes) {
    5d10:	48 8a 4d c8          	rex.W mov -0x38(%rbp),%cl
    5d14:	48 0f b6 c9          	movzbq %cl,%rcx
    5d18:	48 85 c9             	test   %rcx,%rcx
    5d1b:	40 0f 94 c1          	rex sete %cl
    5d1f:	48 0f b6 c9          	movzbq %cl,%rcx
    5d23:	48 83 f9 00          	cmp    $0x0,%rcx
    5d27:	0f 84 1d 00 00 00    	je     5d4a <main+0x5d4a>
				valueIndex = i;
    5d2d:	8b 4d d0             	mov    -0x30(%rbp),%ecx
    5d30:	ff f1                	push   %rcx
    5d32:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    5d39:	48 03 cd             	add    %rbp,%rcx
    5d3c:	8f c2                	pop    %rdx
    5d3e:	89 11                	mov    %edx,(%rcx)
				LOG_DEBUG("BucketArray: Found spot " , i )
				break;
    5d40:	e9 0a 00 00 00       	jmp    5d4f <main+0x5d4f>
    5d45:	e9 00 00 00 00       	jmp    5d4a <main+0x5d4a>
    5d4a:	e9 57 ff ff ff       	jmp    5ca6 <main+0x5ca6>
			} else {
				LOG_DEBUG("BucketArray: Checked spot " , i)
			}
		}

		if (valueIndex == -1) {
    5d4f:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5d52:	ff f1                	push   %rcx
    5d54:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5d59:	8f c2                	pop    %rdx
    5d5b:	3b d1                	cmp    %ecx,%edx
    5d5d:	40 0f 94 c2          	rex sete %dl
    5d61:	48 0f b6 d2          	movzbq %dl,%rdx
    5d65:	48 83 fa 00          	cmp    $0x0,%rdx
    5d69:	0f 84 ad 00 00 00    	je     5e1c <main+0x5e1c>
            log(BUCKET_ERROR, "Impossible error adding value in bucket ", bucketIndex)
    5d6f:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5d76:	b9 0d 00 00 00       	mov    $0xd,%ecx
    5d7b:	ff f1                	push   %rcx
    5d7d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5d84 <main+0x5d84>
    5d84:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5d89:	8f c1                	pop    %rcx
    5d8b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5d90:	e8 fd e2 ff ff       	call   4092 <main+0x4092>
    5d95:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5d9c:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5da3:	b9 28 00 00 00       	mov    $0x28,%ecx
    5da8:	ff f1                	push   %rcx
    5daa:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5db1 <main+0x5db1>
    5db1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5db6:	8f c1                	pop    %rcx
    5db8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    5dbd:	e8 d0 e2 ff ff       	call   4092 <main+0x4092>
    5dc2:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5dc9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5dd0:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    5dd3:	48 63 d1             	movslq %ecx,%rdx
    5dd6:	48 89 14 24          	mov    %rdx,(%rsp)
    5dda:	e8 17 e0 ff ff       	call   3df6 <main+0x3df6>
    5ddf:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    5de6:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    5ded:	b9 0a 00 00 00       	mov    $0xa,%ecx
    5df2:	88 0c 24             	mov    %cl,(%rsp)
    5df5:	e8 f7 e1 ff ff       	call   3ff1 <main+0x3ff1>
    5dfa:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
			//engone::log::out >> engone::log::Disable;
			return null, -1;
    5e01:	b9 00 00 00 00       	mov    $0x0,%ecx
    5e06:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    5e0a:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5e0f:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    5e12:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    5e19:	8f c5                	pop    %rbp
    5e1b:	c3                   	ret
		}
		bucket.m_amountOfUsedSpots++;
    5e1c:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5e23:	48 03 cd             	add    %rbp,%rcx
    5e26:	48 8b 11             	mov    (%rcx),%rdx
    5e29:	b9 08 00 00 00       	mov    $0x8,%ecx
    5e2e:	48 03 d1             	add    %rcx,%rdx
    5e31:	8b 0a                	mov    (%rdx),%ecx
    5e33:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
    5e3a:	89 0a                	mov    %ecx,(%rdx)
		//engone::log::out << "Frame : New object count " << frame.count << "\n";
		m_valueCount++;
    5e3c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5e40:	48 8b c9             	mov    %rcx,%rcx
    5e43:	ba 0c 00 00 00       	mov    $0xc,%edx
    5e48:	48 03 ca             	add    %rdx,%rcx
    5e4b:	8b 11                	mov    (%rcx),%edx
    5e4d:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    5e54:	89 11                	mov    %edx,(%rcx)
		bucket.setBool(valueIndex, true);
    5e56:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5e5d:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5e64:	48 03 cd             	add    %rbp,%rcx
    5e67:	48 8b 11             	mov    (%rcx),%rdx
    5e6a:	ff f2                	push   %rdx
    5e6c:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5e6f:	ff f1                	push   %rcx
    5e71:	b9 01 00 00 00       	mov    $0x1,%ecx
    5e76:	88 4c 24 1c          	mov    %cl,0x1c(%rsp)
    5e7a:	8f c1                	pop    %rcx
    5e7c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    5e80:	8f c1                	pop    %rcx
    5e82:	48 89 0c 24          	mov    %rcx,(%rsp)
    5e86:	e8 bf f6 ff ff       	call   554a <main+0x554a>
    5e8b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
		LOG_DEBUG("set ",valueIndex," = ", bucket.getBool(valueIndex));
		ptr := cast<T*>bucket.getValue(valueIndex, sizeof(T), m_valuesPerBucket);
    5e92:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    5e99:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    5ea0:	48 03 cd             	add    %rbp,%rcx
    5ea3:	48 8b 11             	mov    (%rcx),%rdx
    5ea6:	ff f2                	push   %rdx
    5ea8:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5eab:	ff f1                	push   %rcx
    5ead:	b9 10 00 00 00       	mov    $0x10,%ecx
    5eb2:	ff f1                	push   %rcx
    5eb4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5eb8:	48 8b c9             	mov    %rcx,%rcx
    5ebb:	8b 51 10             	mov    0x10(%rcx),%edx
    5ebe:	89 54 24 28          	mov    %edx,0x28(%rsp)
    5ec2:	8f c1                	pop    %rcx
    5ec4:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
    5ec8:	8f c1                	pop    %rcx
    5eca:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    5ece:	8f c1                	pop    %rcx
    5ed0:	48 89 0c 24          	mov    %rcx,(%rsp)
    5ed4:	e8 eb f5 ff ff       	call   54c4 <main+0x54c4>
    5ed9:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    5ee0:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    5ee5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
		if (value) {
    5ee9:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    5eed:	ba 00 00 00 00       	mov    $0x0,%edx
    5ef2:	48 3b ca             	cmp    %rdx,%rcx
    5ef5:	40 0f 95 c1          	rex setne %cl
    5ef9:	48 0f b6 c9          	movzbq %cl,%rcx
    5efd:	48 83 f9 00          	cmp    $0x0,%rcx
    5f01:	0f 84 3c 00 00 00    	je     5f43 <main+0x5f43>
			*ptr = *value
    5f07:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    5f0b:	8b 51 0c             	mov    0xc(%rcx),%edx
    5f0e:	ff f2                	push   %rdx
    5f10:	8b 51 08             	mov    0x8(%rcx),%edx
    5f13:	ff f2                	push   %rdx
    5f15:	8b 51 04             	mov    0x4(%rcx),%edx
    5f18:	ff f2                	push   %rdx
    5f1a:	8b 11                	mov    (%rcx),%edx
    5f1c:	ff f2                	push   %rdx
    5f1e:	48 c7 c1 d0 ff ff ff 	mov    $0xffffffffffffffd0,%rcx
    5f25:	48 03 cd             	add    %rbp,%rcx
    5f28:	48 8b 11             	mov    (%rcx),%rdx
    5f2b:	8f c1                	pop    %rcx
    5f2d:	89 0a                	mov    %ecx,(%rdx)
    5f2f:	8f c1                	pop    %rcx
    5f31:	89 4a 04             	mov    %ecx,0x4(%rdx)
    5f34:	8f c1                	pop    %rcx
    5f36:	89 4a 08             	mov    %ecx,0x8(%rdx)
    5f39:	8f c1                	pop    %rcx
    5f3b:	89 4a 0c             	mov    %ecx,0xc(%rdx)
    5f3e:	e9 26 00 00 00       	jmp    5f69 <main+0x5f69>
        } else {
			construct(ptr)
    5f43:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5f47:	ba 10 00 00 00       	mov    $0x10,%edx
    5f4c:	ff f1                	push   %rcx
    5f4e:	ff f2                	push   %rdx
    5f50:	48 01 ca             	add    %rcx,%rdx
    5f53:	48 3b d1             	cmp    %rcx,%rdx
    5f56:	74 0d                	je     5f65 <main+0x5f65>
    5f58:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
    5f5f:	48 83 c1 08          	add    $0x8,%rcx
    5f63:	eb ee                	jmp    5f53 <main+0x5f53>
    5f65:	8f c2                	pop    %rdx
    5f67:	8f c1                	pop    %rcx
		//engone::log::out >> engone::log::Disable;
		// if (outElement) {
		// 	*outElement = ptr;
        // }
		// log("BucketArray: Add at ",bucketIndex, "*", m_valuesPerBucket, "+", valueIndex)
		return ptr, bucketIndex * m_valuesPerBucket + valueIndex;
    5f69:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5f6d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    5f71:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    5f74:	ff f1                	push   %rcx
    5f76:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    5f7a:	48 8b c9             	mov    %rcx,%rcx
    5f7d:	8b 51 10             	mov    0x10(%rcx),%edx
    5f80:	8f c1                	pop    %rcx
    5f82:	0f af ca             	imul   %edx,%ecx
    5f85:	ff f1                	push   %rcx
    5f87:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    5f8a:	8f c2                	pop    %rdx
    5f8c:	03 d1                	add    %ecx,%edx
    5f8e:	89 55 f0             	mov    %edx,-0x10(%rbp)
    5f91:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    5f98:	8f c5                	pop    %rbp
    5f9a:	c3                   	ret
	fn getMax() -> i32 {
        return m_buckets_max * m_valuesPerBucket;
    }
	
    // fn create_iterator() -> BucketArrayIterator<T> {
    fn create_iterator(start_at_index: i32 = -1) -> BucketArrayIterator<T> {
    5f9b:	ff f5                	push   %rbp
    5f9d:	48 8b ec             	mov    %rsp,%rbp
    5fa0:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
		iter: BucketArrayIterator<T>
    5fa7:	b9 10 00 00 00       	mov    $0x10,%ecx
    5fac:	48 ba e0 ff ff ff ff 	movabs $0xffffffffffffffe0,%rdx
    5fb3:	ff ff ff 
    5fb6:	48 03 d5             	add    %rbp,%rdx
    5fb9:	48 83 c2 00          	add    $0x0,%rdx
    5fbd:	ff f2                	push   %rdx
    5fbf:	ff f1                	push   %rcx
    5fc1:	48 01 d1             	add    %rdx,%rcx
    5fc4:	48 3b ca             	cmp    %rdx,%rcx
    5fc7:	74 0d                	je     5fd6 <main+0x5fd6>
    5fc9:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    5fd0:	48 83 c2 08          	add    $0x8,%rdx
    5fd4:	eb ee                	jmp    5fc4 <main+0x5fc4>
    5fd6:	8f c1                	pop    %rcx
    5fd8:	8f c2                	pop    %rdx
    5fda:	b9 00 00 00 00       	mov    $0x0,%ecx
    5fdf:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    5fe3:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5fe8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
    5feb:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    5ff0:	89 4d e0             	mov    %ecx,-0x20(%rbp)
		iter.started_at_index = start_at_index
    5ff3:	8b 4d 18             	mov    0x18(%rbp),%ecx
    5ff6:	48 63 c9             	movslq %ecx,%rcx
    5ff9:	ff f1                	push   %rcx
    5ffb:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    6002:	48 03 cd             	add    %rbp,%rcx
    6005:	ba 04 00 00 00       	mov    $0x4,%edx
    600a:	48 03 ca             	add    %rdx,%rcx
    600d:	8f c2                	pop    %rdx
    600f:	89 11                	mov    %edx,(%rcx)
        return iter
    6011:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    6015:	ff f1                	push   %rcx
    6017:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
    601a:	ff f1                	push   %rcx
    601c:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    601f:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    6022:	8f c1                	pop    %rcx
    6024:	89 4d f4             	mov    %ecx,-0xc(%rbp)
    6027:	8f c1                	pop    %rcx
    6029:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    602d:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    6034:	8f c5                	pop    %rbp
    6036:	c3                   	ret
    }
    // Returns false if nothing more to iterate. Values in iterator are reset
    fn iterate(iterator: BucketArrayIterator<T>*) -> bool {
    6037:	ff f5                	push   %rbp
    6039:	48 8b ec             	mov    %rsp,%rbp
    603c:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
		if iterator.index == -1 && iterator.started_at_index != -1 {
    6043:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    604a:	48 03 cd             	add    %rbp,%rcx
    604d:	48 8b 11             	mov    (%rcx),%rdx
    6050:	8b 0a                	mov    (%rdx),%ecx
    6052:	ff f1                	push   %rcx
    6054:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    6059:	8f c2                	pop    %rdx
    605b:	3b d1                	cmp    %ecx,%edx
    605d:	40 0f 94 c2          	rex sete %dl
    6061:	48 0f b6 d2          	movzbq %dl,%rdx
    6065:	ff f2                	push   %rdx
    6067:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    606e:	48 03 cd             	add    %rbp,%rcx
    6071:	48 8b 11             	mov    (%rcx),%rdx
    6074:	b9 04 00 00 00       	mov    $0x4,%ecx
    6079:	48 03 d1             	add    %rcx,%rdx
    607c:	8b 0a                	mov    (%rdx),%ecx
    607e:	ff f1                	push   %rcx
    6080:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    6085:	8f c2                	pop    %rdx
    6087:	3b d1                	cmp    %ecx,%edx
    6089:	40 0f 95 c2          	rex setne %dl
    608d:	48 0f b6 d2          	movzbq %dl,%rdx
    6091:	8f c1                	pop    %rcx
    6093:	48 85 c9             	test   %rcx,%rcx
    6096:	74 0a                	je     60a2 <main+0x60a2>
    6098:	48 85 d2             	test   %rdx,%rdx
    609b:	74 05                	je     60a2 <main+0x60a2>
    609d:	c6 c1 01             	mov    $0x1,%cl
    60a0:	eb 03                	jmp    60a5 <main+0x60a5>
    60a2:	c6 c1 00             	mov    $0x0,%cl
    60a5:	48 0f b6 c9          	movzbq %cl,%rcx
    60a9:	48 83 f9 00          	cmp    $0x0,%rcx
    60ad:	0f 84 35 00 00 00    	je     60e8 <main+0x60e8>
			iterator.index = iterator.started_at_index - 1
    60b3:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    60ba:	48 03 cd             	add    %rbp,%rcx
    60bd:	48 8b 11             	mov    (%rcx),%rdx
    60c0:	b9 04 00 00 00       	mov    $0x4,%ecx
    60c5:	48 03 d1             	add    %rcx,%rdx
    60c8:	8b 0a                	mov    (%rdx),%ecx
    60ca:	ff f1                	push   %rcx
    60cc:	b9 01 00 00 00       	mov    $0x1,%ecx
    60d1:	8f c2                	pop    %rdx
    60d3:	2b d1                	sub    %ecx,%edx
    60d5:	ff f2                	push   %rdx
    60d7:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    60de:	48 03 cd             	add    %rbp,%rcx
    60e1:	48 8b 11             	mov    (%rcx),%rdx
    60e4:	8f c1                	pop    %rcx
    60e6:	89 0a                	mov    %ecx,(%rdx)
		}
        if m_valuesPerBucket == 0 {
    60e8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    60ec:	48 8b c9             	mov    %rcx,%rcx
    60ef:	8b 51 10             	mov    0x10(%rcx),%edx
    60f2:	ff f2                	push   %rdx
    60f4:	b9 00 00 00 00       	mov    $0x0,%ecx
    60f9:	8f c2                	pop    %rdx
    60fb:	3b d1                	cmp    %ecx,%edx
    60fd:	40 0f 94 c2          	rex sete %dl
    6101:	48 0f b6 d2          	movzbq %dl,%rdx
    6105:	48 83 fa 00          	cmp    $0x0,%rdx
    6109:	0f 84 12 00 00 00    	je     6121 <main+0x6121>
            return false
    610f:	b9 00 00 00 00       	mov    $0x0,%ecx
    6114:	88 4d f8             	mov    %cl,-0x8(%rbp)
    6117:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    611e:	8f c5                	pop    %rbp
    6120:	c3                   	ret
        }
		while  {
            iterator.index++;
    6121:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    6128:	48 03 cd             	add    %rbp,%rcx
    612b:	48 8b 11             	mov    (%rcx),%rdx
    612e:	8b 0a                	mov    (%rdx),%ecx
    6130:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
    6137:	89 0a                	mov    %ecx,(%rdx)
			bucketIndex: i32 = iterator.index / m_valuesPerBucket;
    6139:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    6140:	48 03 cd             	add    %rbp,%rcx
    6143:	48 8b 11             	mov    (%rcx),%rdx
    6146:	8b 0a                	mov    (%rdx),%ecx
    6148:	ff f1                	push   %rcx
    614a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    614e:	48 8b c9             	mov    %rcx,%rcx
    6151:	8b 51 10             	mov    0x10(%rcx),%edx
    6154:	8f c1                	pop    %rcx
    6156:	48 8b fa             	mov    %rdx,%rdi
    6159:	48 8b c1             	mov    %rcx,%rax
    615c:	99                   	cltd
    615d:	f7 ff                	idiv   %edi
    615f:	48 8b c8             	mov    %rax,%rcx
    6162:	48 8b d7             	mov    %rdi,%rdx
    6165:	89 4d f0             	mov    %ecx,-0x10(%rbp)
			valueIndex:  i32 = iterator.index % m_valuesPerBucket;
    6168:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    616f:	48 03 cd             	add    %rbp,%rcx
    6172:	48 8b 11             	mov    (%rcx),%rdx
    6175:	8b 0a                	mov    (%rdx),%ecx
    6177:	ff f1                	push   %rcx
    6179:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    617d:	48 8b c9             	mov    %rcx,%rcx
    6180:	8b 51 10             	mov    0x10(%rcx),%edx
    6183:	8f c1                	pop    %rcx
    6185:	48 8b fa             	mov    %rdx,%rdi
    6188:	48 8b c1             	mov    %rcx,%rax
    618b:	99                   	cltd
    618c:	f7 ff                	idiv   %edi
    618e:	48 8b ca             	mov    %rdx,%rcx
    6191:	48 8b d7             	mov    %rdi,%rdx
    6194:	83 f9 00             	cmp    $0x0,%ecx
    6197:	7d 02                	jge    619b <main+0x619b>
    6199:	03 d7                	add    %edi,%edx
    619b:	89 4d e8             	mov    %ecx,-0x18(%rbp)

			if (bucketIndex >= m_buckets_max) {
    619e:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    61a1:	ff f1                	push   %rcx
    61a3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    61a7:	48 8b c9             	mov    %rcx,%rcx
    61aa:	8b 51 08             	mov    0x8(%rcx),%edx
    61ad:	8f c1                	pop    %rcx
    61af:	3b ca                	cmp    %edx,%ecx
    61b1:	40 0f 9d c1          	rex setge %cl
    61b5:	48 0f b6 c9          	movzbq %cl,%rcx
    61b9:	48 83 f9 00          	cmp    $0x0,%rcx
    61bd:	0f 84 05 00 00 00    	je     61c8 <main+0x61c8>
				// happens when we reach end of bucket
				break;
    61c3:	e9 4e 01 00 00       	jmp    6316 <main+0x6316>
			}
			bucket := &m_buckets[bucketIndex];
    61c8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    61cc:	48 8b c9             	mov    %rcx,%rcx
    61cf:	ba 00 00 00 00       	mov    $0x0,%edx
    61d4:	48 03 ca             	add    %rdx,%rcx
    61d7:	ff f1                	push   %rcx
    61d9:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    61dc:	8f c2                	pop    %rdx
    61de:	48 8b 1a             	mov    (%rdx),%rbx
    61e1:	ba 10 00 00 00       	mov    $0x10,%edx
    61e6:	48 8b fa             	mov    %rdx,%rdi
    61e9:	48 8b c1             	mov    %rcx,%rax
    61ec:	48 f7 e7             	mul    %rdi
    61ef:	48 8b c8             	mov    %rax,%rcx
    61f2:	48 8b d7             	mov    %rdi,%rdx
    61f5:	48 03 d9             	add    %rcx,%rbx
    61f8:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
			if (valueIndex >= bucket.m_max) {
    61fc:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    61ff:	ff f1                	push   %rcx
    6201:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    6208:	48 03 cd             	add    %rbp,%rcx
    620b:	48 8b 11             	mov    (%rcx),%rdx
    620e:	b9 0c 00 00 00       	mov    $0xc,%ecx
    6213:	48 03 d1             	add    %rcx,%rdx
    6216:	8b 0a                	mov    (%rdx),%ecx
    6218:	8f c2                	pop    %rdx
    621a:	3b d1                	cmp    %ecx,%edx
    621c:	40 0f 9d c2          	rex setge %dl
    6220:	48 0f b6 d2          	movzbq %dl,%rdx
    6224:	48 83 fa 00          	cmp    $0x0,%rdx
    6228:	0f 84 05 00 00 00    	je     6233 <main+0x6233>
				// only happens if bucket is uninitialized
				// because m_max would be zero
				// valueIndex will otherwise loop around because of modulus
				break;
    622e:	e9 e3 00 00 00       	jmp    6316 <main+0x6316>
			}

			yes := bucket.getBool(valueIndex);
    6233:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    623a:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    6241:	48 03 cd             	add    %rbp,%rcx
    6244:	48 8b 11             	mov    (%rcx),%rdx
    6247:	ff f2                	push   %rdx
    6249:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    624c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    6250:	8f c1                	pop    %rcx
    6252:	48 89 0c 24          	mov    %rcx,(%rsp)
    6256:	e8 b4 f2 ff ff       	call   550f <main+0x550f>
    625b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    6262:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
    6267:	48 0f b6 c9          	movzbq %cl,%rcx
    626b:	88 4d d8             	mov    %cl,-0x28(%rbp)
			if (!yes)
    626e:	48 8a 4d d8          	rex.W mov -0x28(%rbp),%cl
    6272:	48 0f b6 c9          	movzbq %cl,%rcx
    6276:	48 85 c9             	test   %rcx,%rcx
    6279:	40 0f 94 c1          	rex sete %cl
    627d:	48 0f b6 c9          	movzbq %cl,%rcx
    6281:	48 83 f9 00          	cmp    $0x0,%rcx
    6285:	0f 84 05 00 00 00    	je     6290 <main+0x6290>
				continue;
    628b:	e9 91 fe ff ff       	jmp    6121 <main+0x6121>

			iterator.value = cast<T*>bucket.getValue(valueIndex, sizeof T, m_valuesPerBucket);
    6290:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    6297:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    629e:	48 03 cd             	add    %rbp,%rcx
    62a1:	48 8b 11             	mov    (%rcx),%rdx
    62a4:	ff f2                	push   %rdx
    62a6:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    62a9:	ff f1                	push   %rcx
    62ab:	b9 10 00 00 00       	mov    $0x10,%ecx
    62b0:	ff f1                	push   %rcx
    62b2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    62b6:	48 8b c9             	mov    %rcx,%rcx
    62b9:	8b 51 10             	mov    0x10(%rcx),%edx
    62bc:	89 54 24 28          	mov    %edx,0x28(%rsp)
    62c0:	8f c1                	pop    %rcx
    62c2:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
    62c6:	8f c1                	pop    %rcx
    62c8:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    62cc:	8f c1                	pop    %rcx
    62ce:	48 89 0c 24          	mov    %rcx,(%rsp)
    62d2:	e8 ed f1 ff ff       	call   54c4 <main+0x54c4>
    62d7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    62de:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    62e3:	ff f1                	push   %rcx
    62e5:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    62ec:	48 03 cd             	add    %rbp,%rcx
    62ef:	48 8b 11             	mov    (%rcx),%rdx
    62f2:	b9 08 00 00 00       	mov    $0x8,%ecx
    62f7:	48 03 d1             	add    %rcx,%rdx
    62fa:	8f c1                	pop    %rcx
    62fc:	48 89 0a             	mov    %rcx,(%rdx)
			return true;
    62ff:	b9 01 00 00 00       	mov    $0x1,%ecx
    6304:	88 4d f8             	mov    %cl,-0x8(%rbp)
    6307:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    630e:	8f c5                	pop    %rbp
    6310:	c3                   	ret
    6311:	e9 0b fe ff ff       	jmp    6121 <main+0x6121>
		}
		iterator.index = -1;
    6316:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    631b:	ff f1                	push   %rcx
    631d:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    6324:	48 03 cd             	add    %rbp,%rcx
    6327:	48 8b 11             	mov    (%rcx),%rdx
    632a:	8f c1                	pop    %rcx
    632c:	89 0a                	mov    %ecx,(%rdx)
		iterator.value = null;
    632e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6333:	ff f1                	push   %rcx
    6335:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    633c:	48 03 cd             	add    %rbp,%rcx
    633f:	48 8b 11             	mov    (%rcx),%rdx
    6342:	b9 08 00 00 00       	mov    $0x8,%ecx
    6347:	48 03 d1             	add    %rcx,%rdx
    634a:	8f c1                	pop    %rcx
    634c:	48 89 0a             	mov    %rcx,(%rdx)
		return false;
    634f:	b9 00 00 00 00       	mov    $0x0,%ecx
    6354:	88 4d f8             	mov    %cl,-0x8(%rbp)
    6357:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    635e:	8f c5                	pop    %rbp
    6360:	c3                   	ret

struct mat4 {
    v: f32[16];
}

operator *(a: mat4, b: mat4) -> mat4 {
    6361:	ff f5                	push   %rbp
    6363:	48 8b ec             	mov    %rsp,%rbp
    6366:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    t: mat4
    636d:	b9 40 00 00 00       	mov    $0x40,%ecx
    6372:	48 ba 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rdx
    6379:	ff ff ff 
    637c:	48 03 d5             	add    %rbp,%rdx
    637f:	48 83 c2 00          	add    $0x0,%rdx
    6383:	ff f2                	push   %rdx
    6385:	ff f1                	push   %rcx
    6387:	48 01 d1             	add    %rdx,%rcx
    638a:	48 3b ca             	cmp    %rdx,%rcx
    638d:	74 0d                	je     639c <main+0x639c>
    638f:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    6396:	48 83 c2 08          	add    $0x8,%rdx
    639a:	eb ee                	jmp    638a <main+0x638a>
    639c:	8f c1                	pop    %rcx
    639e:	8f c2                	pop    %rdx
    63a0:	b9 40 00 00 00       	mov    $0x40,%ecx
    63a5:	48 ba 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rdx
    63ac:	ff ff ff 
    63af:	48 03 d5             	add    %rbp,%rdx
    63b2:	48 83 c2 00          	add    $0x0,%rdx
    63b6:	ff f2                	push   %rdx
    63b8:	ff f1                	push   %rcx
    63ba:	48 01 d1             	add    %rdx,%rcx
    63bd:	48 3b ca             	cmp    %rdx,%rcx
    63c0:	74 0d                	je     63cf <main+0x63cf>
    63c2:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    63c9:	48 83 c2 08          	add    $0x8,%rdx
    63cd:	eb ee                	jmp    63bd <main+0x63bd>
    63cf:	8f c1                	pop    %rcx
    63d1:	8f c2                	pop    %rdx
    for col : 0..4 {
    63d3:	b9 00 00 00 00       	mov    $0x0,%ecx
    63d8:	ff f1                	push   %rcx
    63da:	8f c1                	pop    %rcx
    63dc:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    63e3:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%rbp)
    63e9:	b9 04 00 00 00       	mov    $0x4,%ecx
    63ee:	ff f1                	push   %rcx
    63f0:	8f c1                	pop    %rcx
    63f2:	8b 95 78 ff ff ff    	mov    -0x88(%rbp),%edx
    63f8:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    63ff:	89 95 78 ff ff ff    	mov    %edx,-0x88(%rbp)
    6405:	3b d1                	cmp    %ecx,%edx
    6407:	40 0f 9c c2          	rex setl %dl
    640b:	48 0f b6 d2          	movzbq %dl,%rdx
    640f:	48 83 fa 00          	cmp    $0x0,%rdx
    6413:	0f 84 28 03 00 00    	je     6741 <main+0x6741>
        for row : 0..4 {
    6419:	b9 00 00 00 00       	mov    $0x0,%ecx
    641e:	ff f1                	push   %rcx
    6420:	8f c1                	pop    %rcx
    6422:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    6429:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%rbp)
    642f:	b9 04 00 00 00       	mov    $0x4,%ecx
    6434:	ff f1                	push   %rcx
    6436:	8f c1                	pop    %rcx
    6438:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
    643e:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    6445:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
    644b:	3b d1                	cmp    %ecx,%edx
    644d:	40 0f 9c c2          	rex setl %dl
    6451:	48 0f b6 d2          	movzbq %dl,%rdx
    6455:	48 83 fa 00          	cmp    $0x0,%rdx
    6459:	0f 84 dd 02 00 00    	je     673c <main+0x673c>
            t.v[col * 4 + row] = a.v[0*4 + row] * b.v[col * 4 + 0] +
    645f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6466:	48 03 cd             	add    %rbp,%rcx
    6469:	ff f1                	push   %rcx
    646b:	b9 00 00 00 00       	mov    $0x0,%ecx
    6470:	ff f1                	push   %rcx
    6472:	b9 04 00 00 00       	mov    $0x4,%ecx
    6477:	8f c2                	pop    %rdx
    6479:	0f af d1             	imul   %ecx,%edx
    647c:	ff f2                	push   %rdx
    647e:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    6484:	8f c2                	pop    %rdx
    6486:	03 d1                	add    %ecx,%edx
    6488:	8f c1                	pop    %rcx
    648a:	bb 04 00 00 00       	mov    $0x4,%ebx
    648f:	48 8b c2             	mov    %rdx,%rax
    6492:	f7 e3                	mul    %ebx
    6494:	48 8b d0             	mov    %rax,%rdx
    6497:	48 03 ca             	add    %rdx,%rcx
    649a:	8b 11                	mov    (%rcx),%edx
    649c:	ff f2                	push   %rdx
    649e:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    64a5:	48 03 cd             	add    %rbp,%rcx
    64a8:	ff f1                	push   %rcx
    64aa:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    64b0:	ff f1                	push   %rcx
    64b2:	b9 04 00 00 00       	mov    $0x4,%ecx
    64b7:	8f c2                	pop    %rdx
    64b9:	0f af d1             	imul   %ecx,%edx
    64bc:	ff f2                	push   %rdx
    64be:	b9 00 00 00 00       	mov    $0x0,%ecx
    64c3:	8f c2                	pop    %rdx
    64c5:	03 d1                	add    %ecx,%edx
    64c7:	8f c1                	pop    %rcx
    64c9:	bb 04 00 00 00       	mov    $0x4,%ebx
    64ce:	48 8b c2             	mov    %rdx,%rax
    64d1:	f7 e3                	mul    %ebx
    64d3:	48 8b d0             	mov    %rax,%rdx
    64d6:	48 03 ca             	add    %rdx,%rcx
    64d9:	f3 0f 10 01          	movss  (%rcx),%xmm0
    64dd:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    64e2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    64e9:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    64ed:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    64f4:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    64f9:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6500:	48 03 cd             	add    %rbp,%rcx
    6503:	ff f1                	push   %rcx
    6505:	b9 01 00 00 00       	mov    $0x1,%ecx
    650a:	ff f1                	push   %rcx
    650c:	b9 04 00 00 00       	mov    $0x4,%ecx
    6511:	8f c2                	pop    %rdx
    6513:	0f af d1             	imul   %ecx,%edx
    6516:	ff f2                	push   %rdx
    6518:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    651e:	8f c2                	pop    %rdx
    6520:	03 d1                	add    %ecx,%edx
    6522:	8f c1                	pop    %rcx
    6524:	bb 04 00 00 00       	mov    $0x4,%ebx
    6529:	48 8b c2             	mov    %rdx,%rax
    652c:	f7 e3                	mul    %ebx
    652e:	48 8b d0             	mov    %rax,%rdx
    6531:	48 03 ca             	add    %rdx,%rcx
    6534:	8b 11                	mov    (%rcx),%edx
    6536:	ff f2                	push   %rdx
    6538:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    653f:	48 03 cd             	add    %rbp,%rcx
    6542:	ff f1                	push   %rcx
    6544:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    654a:	ff f1                	push   %rcx
    654c:	b9 04 00 00 00       	mov    $0x4,%ecx
    6551:	8f c2                	pop    %rdx
    6553:	0f af d1             	imul   %ecx,%edx
    6556:	ff f2                	push   %rdx
    6558:	b9 01 00 00 00       	mov    $0x1,%ecx
    655d:	8f c2                	pop    %rdx
    655f:	03 d1                	add    %ecx,%edx
    6561:	8f c1                	pop    %rcx
    6563:	bb 04 00 00 00       	mov    $0x4,%ebx
    6568:	48 8b c2             	mov    %rdx,%rax
    656b:	f7 e3                	mul    %ebx
    656d:	48 8b d0             	mov    %rax,%rdx
    6570:	48 03 ca             	add    %rdx,%rcx
    6573:	f3 0f 10 01          	movss  (%rcx),%xmm0
    6577:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    657c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6583:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    6587:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    658c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6593:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    6597:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    659e:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    65a3:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    65aa:	48 03 cd             	add    %rbp,%rcx
    65ad:	ff f1                	push   %rcx
    65af:	b9 02 00 00 00       	mov    $0x2,%ecx
    65b4:	ff f1                	push   %rcx
    65b6:	b9 04 00 00 00       	mov    $0x4,%ecx
    65bb:	8f c2                	pop    %rdx
    65bd:	0f af d1             	imul   %ecx,%edx
    65c0:	ff f2                	push   %rdx
    65c2:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    65c8:	8f c2                	pop    %rdx
    65ca:	03 d1                	add    %ecx,%edx
    65cc:	8f c1                	pop    %rcx
    65ce:	bb 04 00 00 00       	mov    $0x4,%ebx
    65d3:	48 8b c2             	mov    %rdx,%rax
    65d6:	f7 e3                	mul    %ebx
    65d8:	48 8b d0             	mov    %rax,%rdx
    65db:	48 03 ca             	add    %rdx,%rcx
    65de:	8b 11                	mov    (%rcx),%edx
    65e0:	ff f2                	push   %rdx
    65e2:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    65e9:	48 03 cd             	add    %rbp,%rcx
    65ec:	ff f1                	push   %rcx
    65ee:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    65f4:	ff f1                	push   %rcx
    65f6:	b9 04 00 00 00       	mov    $0x4,%ecx
    65fb:	8f c2                	pop    %rdx
    65fd:	0f af d1             	imul   %ecx,%edx
    6600:	ff f2                	push   %rdx
    6602:	b9 02 00 00 00       	mov    $0x2,%ecx
    6607:	8f c2                	pop    %rdx
    6609:	03 d1                	add    %ecx,%edx
    660b:	8f c1                	pop    %rcx
    660d:	bb 04 00 00 00       	mov    $0x4,%ebx
    6612:	48 8b c2             	mov    %rdx,%rax
    6615:	f7 e3                	mul    %ebx
    6617:	48 8b d0             	mov    %rax,%rdx
    661a:	48 03 ca             	add    %rdx,%rcx
    661d:	f3 0f 10 01          	movss  (%rcx),%xmm0
    6621:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6626:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    662d:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    6631:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    6636:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    663d:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    6641:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6648:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    664d:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6654:	48 03 cd             	add    %rbp,%rcx
    6657:	ff f1                	push   %rcx
    6659:	b9 03 00 00 00       	mov    $0x3,%ecx
    665e:	ff f1                	push   %rcx
    6660:	b9 04 00 00 00       	mov    $0x4,%ecx
    6665:	8f c2                	pop    %rdx
    6667:	0f af d1             	imul   %ecx,%edx
    666a:	ff f2                	push   %rdx
    666c:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    6672:	8f c2                	pop    %rdx
    6674:	03 d1                	add    %ecx,%edx
    6676:	8f c1                	pop    %rcx
    6678:	bb 04 00 00 00       	mov    $0x4,%ebx
    667d:	48 8b c2             	mov    %rdx,%rax
    6680:	f7 e3                	mul    %ebx
    6682:	48 8b d0             	mov    %rax,%rdx
    6685:	48 03 ca             	add    %rdx,%rcx
    6688:	8b 11                	mov    (%rcx),%edx
    668a:	ff f2                	push   %rdx
    668c:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    6693:	48 03 cd             	add    %rbp,%rcx
    6696:	ff f1                	push   %rcx
    6698:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    669e:	ff f1                	push   %rcx
    66a0:	b9 04 00 00 00       	mov    $0x4,%ecx
    66a5:	8f c2                	pop    %rdx
    66a7:	0f af d1             	imul   %ecx,%edx
    66aa:	ff f2                	push   %rdx
    66ac:	b9 03 00 00 00       	mov    $0x3,%ecx
    66b1:	8f c2                	pop    %rdx
    66b3:	03 d1                	add    %ecx,%edx
    66b5:	8f c1                	pop    %rcx
    66b7:	bb 04 00 00 00       	mov    $0x4,%ebx
    66bc:	48 8b c2             	mov    %rdx,%rax
    66bf:	f7 e3                	mul    %ebx
    66c1:	48 8b d0             	mov    %rax,%rdx
    66c4:	48 03 ca             	add    %rdx,%rcx
    66c7:	f3 0f 10 01          	movss  (%rcx),%xmm0
    66cb:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    66d0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    66d7:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    66db:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    66e0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    66e7:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    66eb:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    66f2:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    66f7:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    66fe:	48 03 cd             	add    %rbp,%rcx
    6701:	ff f1                	push   %rcx
    6703:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    6709:	ff f1                	push   %rcx
    670b:	b9 04 00 00 00       	mov    $0x4,%ecx
    6710:	8f c2                	pop    %rdx
    6712:	0f af d1             	imul   %ecx,%edx
    6715:	ff f2                	push   %rdx
    6717:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
    671d:	8f c2                	pop    %rdx
    671f:	03 d1                	add    %ecx,%edx
    6721:	8f c1                	pop    %rcx
    6723:	bb 04 00 00 00       	mov    $0x4,%ebx
    6728:	48 8b c2             	mov    %rdx,%rax
    672b:	f7 e3                	mul    %ebx
    672d:	48 8b d0             	mov    %rax,%rdx
    6730:	48 03 ca             	add    %rdx,%rcx
    6733:	8f c2                	pop    %rdx
    6735:	89 11                	mov    %edx,(%rcx)
    6737:	e9 f3 fc ff ff       	jmp    642f <main+0x642f>
    673c:	e9 a8 fc ff ff       	jmp    63e9 <main+0x63e9>
                a.v[1*4 + row] * b.v[col * 4 + 1] +
                a.v[2*4 + row] * b.v[col * 4 + 2] +
                a.v[3*4 + row] * b.v[col * 4 + 3]
        }
    }
    return t
    6741:	f3 0f 10 45 80       	movss  -0x80(%rbp),%xmm0
    6746:	f3 0f 11 45 c0       	movss  %xmm0,-0x40(%rbp)
    674b:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    6752:	8f c5                	pop    %rbp
    6754:	c3                   	ret
fn normalize(a: vec3) -> vec3 {
    d := sqrt(a.x*a.x + a.y*a.y + a.z*a.z)
    return { a.x / d, a.y / d, a.z / d }
}

fn mat4_identity() -> mat4 {
    6755:	ff f5                	push   %rbp
    6757:	48 8b ec             	mov    %rsp,%rbp
    675a:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    m: mat4
    6761:	b9 40 00 00 00       	mov    $0x40,%ecx
    6766:	48 ba 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rdx
    676d:	ff ff ff 
    6770:	48 03 d5             	add    %rbp,%rdx
    6773:	48 83 c2 00          	add    $0x0,%rdx
    6777:	ff f2                	push   %rdx
    6779:	ff f1                	push   %rcx
    677b:	48 01 d1             	add    %rdx,%rcx
    677e:	48 3b ca             	cmp    %rdx,%rcx
    6781:	74 0d                	je     6790 <main+0x6790>
    6783:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    678a:	48 83 c2 08          	add    $0x8,%rdx
    678e:	eb ee                	jmp    677e <main+0x677e>
    6790:	8f c1                	pop    %rcx
    6792:	8f c2                	pop    %rdx
    6794:	b9 40 00 00 00       	mov    $0x40,%ecx
    6799:	48 ba 80 ff ff ff ff 	movabs $0xffffffffffffff80,%rdx
    67a0:	ff ff ff 
    67a3:	48 03 d5             	add    %rbp,%rdx
    67a6:	48 83 c2 00          	add    $0x0,%rdx
    67aa:	ff f2                	push   %rdx
    67ac:	ff f1                	push   %rcx
    67ae:	48 01 d1             	add    %rdx,%rcx
    67b1:	48 3b ca             	cmp    %rdx,%rcx
    67b4:	74 0d                	je     67c3 <main+0x67c3>
    67b6:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    67bd:	48 83 c2 08          	add    $0x8,%rdx
    67c1:	eb ee                	jmp    67b1 <main+0x67b1>
    67c3:	8f c1                	pop    %rcx
    67c5:	8f c2                	pop    %rdx
    m.v[0] = 1
    67c7:	b9 01 00 00 00       	mov    $0x1,%ecx
    67cc:	ff f1                	push   %rcx
    67ce:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    67d5:	48 03 cd             	add    %rbp,%rcx
    67d8:	ff f1                	push   %rcx
    67da:	b9 00 00 00 00       	mov    $0x0,%ecx
    67df:	8f c2                	pop    %rdx
    67e1:	bb 04 00 00 00       	mov    $0x4,%ebx
    67e6:	ff f2                	push   %rdx
    67e8:	48 8b c1             	mov    %rcx,%rax
    67eb:	f7 e3                	mul    %ebx
    67ed:	48 8b c8             	mov    %rax,%rcx
    67f0:	8f c2                	pop    %rdx
    67f2:	48 03 d1             	add    %rcx,%rdx
    67f5:	8f c1                	pop    %rcx
    67f7:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    67fb:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    m.v[5] = 1
    67ff:	b9 01 00 00 00       	mov    $0x1,%ecx
    6804:	ff f1                	push   %rcx
    6806:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    680d:	48 03 cd             	add    %rbp,%rcx
    6810:	ff f1                	push   %rcx
    6812:	b9 05 00 00 00       	mov    $0x5,%ecx
    6817:	8f c2                	pop    %rdx
    6819:	bb 04 00 00 00       	mov    $0x4,%ebx
    681e:	ff f2                	push   %rdx
    6820:	48 8b c1             	mov    %rcx,%rax
    6823:	f7 e3                	mul    %ebx
    6825:	48 8b c8             	mov    %rax,%rcx
    6828:	8f c2                	pop    %rdx
    682a:	48 03 d1             	add    %rcx,%rdx
    682d:	8f c1                	pop    %rcx
    682f:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    6833:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    m.v[10] = 1
    6837:	b9 01 00 00 00       	mov    $0x1,%ecx
    683c:	ff f1                	push   %rcx
    683e:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    6845:	48 03 cd             	add    %rbp,%rcx
    6848:	ff f1                	push   %rcx
    684a:	b9 0a 00 00 00       	mov    $0xa,%ecx
    684f:	8f c2                	pop    %rdx
    6851:	bb 04 00 00 00       	mov    $0x4,%ebx
    6856:	ff f2                	push   %rdx
    6858:	48 8b c1             	mov    %rcx,%rax
    685b:	f7 e3                	mul    %ebx
    685d:	48 8b c8             	mov    %rax,%rcx
    6860:	8f c2                	pop    %rdx
    6862:	48 03 d1             	add    %rcx,%rdx
    6865:	8f c1                	pop    %rcx
    6867:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    686b:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    m.v[15] = 1
    686f:	b9 01 00 00 00       	mov    $0x1,%ecx
    6874:	ff f1                	push   %rcx
    6876:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    687d:	48 03 cd             	add    %rbp,%rcx
    6880:	ff f1                	push   %rcx
    6882:	b9 0f 00 00 00       	mov    $0xf,%ecx
    6887:	8f c2                	pop    %rdx
    6889:	bb 04 00 00 00       	mov    $0x4,%ebx
    688e:	ff f2                	push   %rdx
    6890:	48 8b c1             	mov    %rcx,%rax
    6893:	f7 e3                	mul    %ebx
    6895:	48 8b c8             	mov    %rax,%rcx
    6898:	8f c2                	pop    %rdx
    689a:	48 03 d1             	add    %rcx,%rdx
    689d:	8f c1                	pop    %rcx
    689f:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    68a3:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    return m
    68a7:	f3 0f 10 45 80       	movss  -0x80(%rbp),%xmm0
    68ac:	f3 0f 11 45 c0       	movss  %xmm0,-0x40(%rbp)
    68b1:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    68b8:	8f c5                	pop    %rbp
    68ba:	c3                   	ret
}
fn translate(m: mat4, v: vec3) -> mat4 {
    68bb:	ff f5                	push   %rbp
    68bd:	48 8b ec             	mov    %rsp,%rbp
    68c0:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
    t := mat4_identity()
    68c7:	e8 89 fe ff ff       	call   6755 <main+0x6755>
    68cc:	f3 0f 10 44 24 b0    	movss  -0x50(%rsp),%xmm0
    68d2:	f3 0f 11 45 80       	movss  %xmm0,-0x80(%rbp)
    t.v[12] = v.x
    68d7:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    68de:	48 03 cd             	add    %rbp,%rcx
    68e1:	8b 11                	mov    (%rcx),%edx
    68e3:	ff f2                	push   %rdx
    68e5:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    68ec:	48 03 cd             	add    %rbp,%rcx
    68ef:	ff f1                	push   %rcx
    68f1:	b9 0c 00 00 00       	mov    $0xc,%ecx
    68f6:	8f c2                	pop    %rdx
    68f8:	bb 04 00 00 00       	mov    $0x4,%ebx
    68fd:	ff f2                	push   %rdx
    68ff:	48 8b c1             	mov    %rcx,%rax
    6902:	f7 e3                	mul    %ebx
    6904:	48 8b c8             	mov    %rax,%rcx
    6907:	8f c2                	pop    %rdx
    6909:	48 03 d1             	add    %rcx,%rdx
    690c:	8f c1                	pop    %rcx
    690e:	89 0a                	mov    %ecx,(%rdx)
    t.v[13] = v.y
    6910:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    6917:	48 03 cd             	add    %rbp,%rcx
    691a:	ba 04 00 00 00       	mov    $0x4,%edx
    691f:	48 03 ca             	add    %rdx,%rcx
    6922:	8b 11                	mov    (%rcx),%edx
    6924:	ff f2                	push   %rdx
    6926:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    692d:	48 03 cd             	add    %rbp,%rcx
    6930:	ff f1                	push   %rcx
    6932:	b9 0d 00 00 00       	mov    $0xd,%ecx
    6937:	8f c2                	pop    %rdx
    6939:	bb 04 00 00 00       	mov    $0x4,%ebx
    693e:	ff f2                	push   %rdx
    6940:	48 8b c1             	mov    %rcx,%rax
    6943:	f7 e3                	mul    %ebx
    6945:	48 8b c8             	mov    %rax,%rcx
    6948:	8f c2                	pop    %rdx
    694a:	48 03 d1             	add    %rcx,%rdx
    694d:	8f c1                	pop    %rcx
    694f:	89 0a                	mov    %ecx,(%rdx)
    t.v[14] = v.z
    6951:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    6958:	48 03 cd             	add    %rbp,%rcx
    695b:	ba 08 00 00 00       	mov    $0x8,%edx
    6960:	48 03 ca             	add    %rdx,%rcx
    6963:	8b 11                	mov    (%rcx),%edx
    6965:	ff f2                	push   %rdx
    6967:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    696e:	48 03 cd             	add    %rbp,%rcx
    6971:	ff f1                	push   %rcx
    6973:	b9 0e 00 00 00       	mov    $0xe,%ecx
    6978:	8f c2                	pop    %rdx
    697a:	bb 04 00 00 00       	mov    $0x4,%ebx
    697f:	ff f2                	push   %rdx
    6981:	48 8b c1             	mov    %rcx,%rax
    6984:	f7 e3                	mul    %ebx
    6986:	48 8b c8             	mov    %rax,%rcx
    6989:	8f c2                	pop    %rdx
    698b:	48 03 d1             	add    %rcx,%rdx
    698e:	8f c1                	pop    %rcx
    6990:	89 0a                	mov    %ecx,(%rdx)
    
    m = m * t
    6992:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
    6999:	f3 0f 10 45 10       	movss  0x10(%rbp),%xmm0
    699e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    69a5:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    69aa:	f3 0f 10 45 80       	movss  -0x80(%rbp),%xmm0
    69af:	f3 0f 11 44 24 48    	movss  %xmm0,0x48(%rsp)
    69b5:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    69ba:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    69c1:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    69c6:	e8 96 f9 ff ff       	call   6361 <main+0x6361>
    69cb:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
    69d2:	f3 0f 10 84 24 30 ff 	movss  -0xd0(%rsp),%xmm0
    69d9:	ff ff 
    69db:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    69e2:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    69e7:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    69ee:	48 03 cd             	add    %rbp,%rcx
    69f1:	8f c2                	pop    %rdx
    69f3:	89 11                	mov    %edx,(%rcx)

    return m
    69f5:	f3 0f 10 45 10       	movss  0x10(%rbp),%xmm0
    69fa:	f3 0f 11 45 c0       	movss  %xmm0,-0x40(%rbp)
    69ff:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    6a06:	8f c5                	pop    %rbp
    6a08:	c3                   	ret
// fn rotate(m: mat4, v: vec3) -> mat4 {
//     t: mat4
//     c := cos()
// }
// fov in radians
fn perspective(fov: f32, aspect: f32, near: f32, far: f32) -> mat4 {
    6a09:	ff f5                	push   %rbp
    6a0b:	48 8b ec             	mov    %rsp,%rbp
    6a0e:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    f := 1 / tanf(fov / 2)
    6a15:	b9 01 00 00 00       	mov    $0x1,%ecx
    6a1a:	ff f1                	push   %rcx
    6a1c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    6a23:	f3 0f 10 45 10       	movss  0x10(%rbp),%xmm0
    6a28:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6a2f:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6a34:	b9 02 00 00 00       	mov    $0x2,%ecx
    6a39:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    6a3e:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6a45:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    6a49:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    6a4d:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6a52:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    6a57:	e8 00 00 00 00       	call   6a5c <main+0x6a5c>
    6a5c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    6a63:	8f c1                	pop    %rcx
    6a65:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    6a69:	f3 0f 5e c8          	divss  %xmm0,%xmm1
    6a6d:	f3 0f 11 4d b8       	movss  %xmm1,-0x48(%rbp)
    m: mat4;
    6a72:	b9 40 00 00 00       	mov    $0x40,%ecx
    6a77:	48 ba 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rdx
    6a7e:	ff ff ff 
    6a81:	48 03 d5             	add    %rbp,%rdx
    6a84:	48 83 c2 00          	add    $0x0,%rdx
    6a88:	ff f2                	push   %rdx
    6a8a:	ff f1                	push   %rcx
    6a8c:	48 01 d1             	add    %rdx,%rcx
    6a8f:	48 3b ca             	cmp    %rdx,%rcx
    6a92:	74 0d                	je     6aa1 <main+0x6aa1>
    6a94:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    6a9b:	48 83 c2 08          	add    $0x8,%rdx
    6a9f:	eb ee                	jmp    6a8f <main+0x6a8f>
    6aa1:	8f c1                	pop    %rcx
    6aa3:	8f c2                	pop    %rdx
    6aa5:	b9 40 00 00 00       	mov    $0x40,%ecx
    6aaa:	48 ba 78 ff ff ff ff 	movabs $0xffffffffffffff78,%rdx
    6ab1:	ff ff ff 
    6ab4:	48 03 d5             	add    %rbp,%rdx
    6ab7:	48 83 c2 00          	add    $0x0,%rdx
    6abb:	ff f2                	push   %rdx
    6abd:	ff f1                	push   %rcx
    6abf:	48 01 d1             	add    %rdx,%rcx
    6ac2:	48 3b ca             	cmp    %rdx,%rcx
    6ac5:	74 0d                	je     6ad4 <main+0x6ad4>
    6ac7:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    6ace:	48 83 c2 08          	add    $0x8,%rdx
    6ad2:	eb ee                	jmp    6ac2 <main+0x6ac2>
    6ad4:	8f c1                	pop    %rcx
    6ad6:	8f c2                	pop    %rdx
    m.v[0] = aspect * f
    6ad8:	f3 0f 10 45 14       	movss  0x14(%rbp),%xmm0
    6add:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6ae4:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6ae9:	f3 0f 10 45 b8       	movss  -0x48(%rbp),%xmm0
    6aee:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6af3:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6afa:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    6afe:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6b05:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    6b0a:	48 c7 c1 78 ff ff ff 	mov    $0xffffffffffffff78,%rcx
    6b11:	48 03 cd             	add    %rbp,%rcx
    6b14:	ff f1                	push   %rcx
    6b16:	b9 00 00 00 00       	mov    $0x0,%ecx
    6b1b:	8f c2                	pop    %rdx
    6b1d:	bb 04 00 00 00       	mov    $0x4,%ebx
    6b22:	ff f2                	push   %rdx
    6b24:	48 8b c1             	mov    %rcx,%rax
    6b27:	f7 e3                	mul    %ebx
    6b29:	48 8b c8             	mov    %rax,%rcx
    6b2c:	8f c2                	pop    %rdx
    6b2e:	48 03 d1             	add    %rcx,%rdx
    6b31:	8f c1                	pop    %rcx
    6b33:	89 0a                	mov    %ecx,(%rdx)
    m.v[5] = f
    6b35:	8b 4d b8             	mov    -0x48(%rbp),%ecx
    6b38:	ff f1                	push   %rcx
    6b3a:	48 c7 c1 78 ff ff ff 	mov    $0xffffffffffffff78,%rcx
    6b41:	48 03 cd             	add    %rbp,%rcx
    6b44:	ff f1                	push   %rcx
    6b46:	b9 05 00 00 00       	mov    $0x5,%ecx
    6b4b:	8f c2                	pop    %rdx
    6b4d:	bb 04 00 00 00       	mov    $0x4,%ebx
    6b52:	ff f2                	push   %rdx
    6b54:	48 8b c1             	mov    %rcx,%rax
    6b57:	f7 e3                	mul    %ebx
    6b59:	48 8b c8             	mov    %rax,%rcx
    6b5c:	8f c2                	pop    %rdx
    6b5e:	48 03 d1             	add    %rcx,%rdx
    6b61:	8f c1                	pop    %rcx
    6b63:	89 0a                	mov    %ecx,(%rdx)
    m.v[10] = (far + near) * (near - far)
    6b65:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    6b6a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6b71:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6b76:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    6b7b:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6b80:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6b87:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    6b8b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6b92:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    6b97:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    6b9c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6ba3:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6ba8:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    6bad:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6bb2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6bb9:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    6bbd:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    6bc2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6bc9:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    6bcd:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6bd4:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6bd9:	48 c7 c1 78 ff ff ff 	mov    $0xffffffffffffff78,%rcx
    6be0:	48 03 cd             	add    %rbp,%rcx
    6be3:	ff f1                	push   %rcx
    6be5:	b9 0a 00 00 00       	mov    $0xa,%ecx
    6bea:	8f c2                	pop    %rdx
    6bec:	bb 04 00 00 00       	mov    $0x4,%ebx
    6bf1:	ff f2                	push   %rdx
    6bf3:	48 8b c1             	mov    %rcx,%rax
    6bf6:	f7 e3                	mul    %ebx
    6bf8:	48 8b c8             	mov    %rax,%rcx
    6bfb:	8f c2                	pop    %rdx
    6bfd:	48 03 d1             	add    %rcx,%rdx
    6c00:	8f c1                	pop    %rcx
    6c02:	89 0a                	mov    %ecx,(%rdx)
    m.v[11] = -1
    6c04:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    6c09:	ff f1                	push   %rcx
    6c0b:	48 c7 c1 78 ff ff ff 	mov    $0xffffffffffffff78,%rcx
    6c12:	48 03 cd             	add    %rbp,%rcx
    6c15:	ff f1                	push   %rcx
    6c17:	b9 0b 00 00 00       	mov    $0xb,%ecx
    6c1c:	8f c2                	pop    %rdx
    6c1e:	bb 04 00 00 00       	mov    $0x4,%ebx
    6c23:	ff f2                	push   %rdx
    6c25:	48 8b c1             	mov    %rcx,%rax
    6c28:	f7 e3                	mul    %ebx
    6c2a:	48 8b c8             	mov    %rax,%rcx
    6c2d:	8f c2                	pop    %rdx
    6c2f:	48 03 d1             	add    %rcx,%rdx
    6c32:	8f c1                	pop    %rcx
    6c34:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    6c38:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    m.v[14] = (2 * far * near) / (near - far)
    6c3c:	b9 02 00 00 00       	mov    $0x2,%ecx
    6c41:	ff f1                	push   %rcx
    6c43:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    6c48:	8f c1                	pop    %rcx
    6c4a:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    6c4e:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    6c52:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6c59:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    6c5e:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    6c63:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6c68:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6c6f:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    6c73:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6c7a:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    6c7f:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    6c84:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6c8b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6c90:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    6c95:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    6c9a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6ca1:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    6ca5:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    6caa:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6cb1:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    6cb5:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6cbc:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    6cc1:	48 c7 c1 78 ff ff ff 	mov    $0xffffffffffffff78,%rcx
    6cc8:	48 03 cd             	add    %rbp,%rcx
    6ccb:	ff f1                	push   %rcx
    6ccd:	b9 0e 00 00 00       	mov    $0xe,%ecx
    6cd2:	8f c2                	pop    %rdx
    6cd4:	bb 04 00 00 00       	mov    $0x4,%ebx
    6cd9:	ff f2                	push   %rdx
    6cdb:	48 8b c1             	mov    %rcx,%rax
    6cde:	f7 e3                	mul    %ebx
    6ce0:	48 8b c8             	mov    %rax,%rcx
    6ce3:	8f c2                	pop    %rdx
    6ce5:	48 03 d1             	add    %rcx,%rdx
    6ce8:	8f c1                	pop    %rcx
    6cea:	89 0a                	mov    %ecx,(%rdx)
    return m
    6cec:	f3 0f 10 85 78 ff ff 	movss  -0x88(%rbp),%xmm0
    6cf3:	ff 
    6cf4:	f3 0f 11 45 c0       	movss  %xmm0,-0x40(%rbp)
    6cf9:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    6d00:	8f c5                	pop    %rbp
    6d02:	c3                   	ret
    FILE_READ_ONLY          = 0x1,
    FILE_CLEAR_AND_WRITE    = 0x2,
    FILE_READ_AND_WRITE     = 0x4,
}
// returns file handle and file size
fn FileOpen(path: Slice<char>, flags: FileOpenFlags, outFileSize: i64* = null) -> FileHandle {
    6d03:	ff f5                	push   %rbp
    6d05:	48 8b ec             	mov    %rsp,%rbp
    6d08:	48 81 ec 58 00 00 00 	sub    $0x58,%rsp
    c_path: char* = path.ptr;
    6d0f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6d16:	48 03 cd             	add    %rbp,%rcx
    6d19:	48 8b 11             	mov    (%rcx),%rdx
    6d1c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    destroy_c_path := false
    6d20:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d25:	88 4d e8             	mov    %cl,-0x18(%rbp)
    defer {
        if destroy_c_path
            Free(c_path)
    }
    if path.ptr[path.len] != '\0' {
    6d28:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6d2f:	48 03 cd             	add    %rbp,%rcx
    6d32:	48 8b 11             	mov    (%rcx),%rdx
    6d35:	ff f2                	push   %rdx
    6d37:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6d3e:	48 03 cd             	add    %rbp,%rcx
    6d41:	ba 08 00 00 00       	mov    $0x8,%edx
    6d46:	48 03 ca             	add    %rdx,%rcx
    6d49:	48 8b 11             	mov    (%rcx),%rdx
    6d4c:	48 8b ca             	mov    %rdx,%rcx
    6d4f:	8f c2                	pop    %rdx
    6d51:	48 03 d1             	add    %rcx,%rdx
    6d54:	48 8a 0a             	rex.W mov (%rdx),%cl
    6d57:	48 0f b6 c9          	movzbq %cl,%rcx
    6d5b:	ff f1                	push   %rcx
    6d5d:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d62:	8f c2                	pop    %rdx
    6d64:	40 3a d1             	rex cmp %cl,%dl
    6d67:	40 0f 95 c2          	rex setne %dl
    6d6b:	48 0f b6 d2          	movzbq %dl,%rdx
    6d6f:	48 83 fa 00          	cmp    $0x0,%rdx
    6d73:	0f 84 e9 00 00 00    	je     6e62 <main+0x6e62>
        destroy_c_path = true
    6d79:	b9 01 00 00 00       	mov    $0x1,%ecx
    6d7e:	ff f1                	push   %rcx
    6d80:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    6d87:	48 03 cd             	add    %rbp,%rcx
    6d8a:	8f c2                	pop    %rdx
    6d8c:	88 11                	mov    %dl,(%rcx)
        c_path = Allocate(path.len + 1)
    6d8e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    6d95:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6d9c:	48 03 cd             	add    %rbp,%rcx
    6d9f:	ba 08 00 00 00       	mov    $0x8,%edx
    6da4:	48 03 ca             	add    %rdx,%rcx
    6da7:	48 8b 11             	mov    (%rcx),%rdx
    6daa:	ff f2                	push   %rdx
    6dac:	b9 01 00 00 00       	mov    $0x1,%ecx
    6db1:	8f c2                	pop    %rdx
    6db3:	48 63 d9             	movslq %ecx,%rbx
    6db6:	48 03 d3             	add    %rbx,%rdx
    6db9:	48 89 14 24          	mov    %rdx,(%rsp)
    6dbd:	e8 d9 0b 00 00       	call   799b <main+0x799b>
    6dc2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    6dc9:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    6dce:	ff f1                	push   %rcx
    6dd0:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    6dd7:	48 03 cd             	add    %rbp,%rcx
    6dda:	8f c2                	pop    %rdx
    6ddc:	48 89 11             	mov    %rdx,(%rcx)
        memcpy(c_path, path.ptr, path.len)
    6ddf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6de3:	ff f1                	push   %rcx
    6de5:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6dec:	48 03 cd             	add    %rbp,%rcx
    6def:	48 8b 11             	mov    (%rcx),%rdx
    6df2:	ff f2                	push   %rdx
    6df4:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6dfb:	48 03 cd             	add    %rbp,%rcx
    6dfe:	ba 08 00 00 00       	mov    $0x8,%edx
    6e03:	48 03 ca             	add    %rdx,%rcx
    6e06:	48 8b 11             	mov    (%rcx),%rdx
    6e09:	8f c1                	pop    %rcx
    6e0b:	8f c3                	pop    %rbx
    6e0d:	ff f3                	push   %rbx
    6e0f:	ff f1                	push   %rcx
    6e11:	ff f2                	push   %rdx
    6e13:	48 03 d3             	add    %rbx,%rdx
    6e16:	48 3b da             	cmp    %rdx,%rbx
    6e19:	74 0d                	je     6e28 <main+0x6e28>
    6e1b:	48 8a 01             	rex.W mov (%rcx),%al
    6e1e:	88 03                	mov    %al,(%rbx)
    6e20:	48 ff c3             	inc    %rbx
    6e23:	48 ff c1             	inc    %rcx
    6e26:	eb ee                	jmp    6e16 <main+0x6e16>
    6e28:	8f c2                	pop    %rdx
    6e2a:	8f c1                	pop    %rcx
    6e2c:	8f c3                	pop    %rbx
        c_path[path.len] = '\0'
    6e2e:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e33:	ff f1                	push   %rcx
    6e35:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    6e3c:	48 03 cd             	add    %rbp,%rcx
    6e3f:	ff f1                	push   %rcx
    6e41:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    6e48:	48 03 cd             	add    %rbp,%rcx
    6e4b:	ba 08 00 00 00       	mov    $0x8,%edx
    6e50:	48 03 ca             	add    %rdx,%rcx
    6e53:	48 8b 11             	mov    (%rcx),%rdx
    6e56:	8f c1                	pop    %rcx
    6e58:	48 8b 19             	mov    (%rcx),%rbx
    6e5b:	48 03 da             	add    %rdx,%rbx
    6e5e:	8f c1                	pop    %rcx
    6e60:	88 0b                	mov    %cl,(%rbx)
    }

#if OS_WINDOWS
    access: i32 = GENERIC_READ|GENERIC_WRITE
    6e62:	b9 00 00 00 80       	mov    $0x80000000,%ecx
    6e67:	ff f1                	push   %rcx
    6e69:	b9 00 00 00 40       	mov    $0x40000000,%ecx
    6e6e:	8f c2                	pop    %rdx
    6e70:	0b d1                	or     %ecx,%edx
    6e72:	89 55 e0             	mov    %edx,-0x20(%rbp)
    sharing: i32 = FILE_SHARE_READ|FILE_SHARE_WRITE
    6e75:	b9 01 00 00 00       	mov    $0x1,%ecx
    6e7a:	ff f1                	push   %rcx
    6e7c:	b9 02 00 00 00       	mov    $0x2,%ecx
    6e81:	8f c2                	pop    %rdx
    6e83:	0b d1                	or     %ecx,%edx
    6e85:	89 55 d8             	mov    %edx,-0x28(%rbp)
    
    if flags & FILE_READ_ONLY
    6e88:	8b 4d 20             	mov    0x20(%rbp),%ecx
    6e8b:	8b c9                	mov    %ecx,%ecx
    6e8d:	ff f1                	push   %rcx
    6e8f:	b9 01 00 00 00       	mov    $0x1,%ecx
    6e94:	8f c2                	pop    %rdx
    6e96:	23 d1                	and    %ecx,%edx
    6e98:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e9d:	3b d1                	cmp    %ecx,%edx
    6e9f:	40 0f 95 c2          	rex setne %dl
    6ea3:	48 0f b6 d2          	movzbq %dl,%rdx
    6ea7:	48 83 fa 00          	cmp    $0x0,%rdx
    6eab:	0f 84 15 00 00 00    	je     6ec6 <main+0x6ec6>
        access = GENERIC_READ
    6eb1:	b9 00 00 00 80       	mov    $0x80000000,%ecx
    6eb6:	ff f1                	push   %rcx
    6eb8:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    6ebf:	48 03 cd             	add    %rbp,%rcx
    6ec2:	8f c2                	pop    %rdx
    6ec4:	89 11                	mov    %edx,(%rcx)
    
    creation: i32 = OPEN_EXISTING;
    6ec6:	b9 03 00 00 00       	mov    $0x3,%ecx
    6ecb:	89 4d d0             	mov    %ecx,-0x30(%rbp)
    if flags & FILE_CLEAR_AND_WRITE
    6ece:	8b 4d 20             	mov    0x20(%rbp),%ecx
    6ed1:	8b c9                	mov    %ecx,%ecx
    6ed3:	ff f1                	push   %rcx
    6ed5:	b9 02 00 00 00       	mov    $0x2,%ecx
    6eda:	8f c2                	pop    %rdx
    6edc:	23 d1                	and    %ecx,%edx
    6ede:	b9 00 00 00 00       	mov    $0x0,%ecx
    6ee3:	3b d1                	cmp    %ecx,%edx
    6ee5:	40 0f 95 c2          	rex setne %dl
    6ee9:	48 0f b6 d2          	movzbq %dl,%rdx
    6eed:	48 83 fa 00          	cmp    $0x0,%rdx
    6ef1:	0f 84 15 00 00 00    	je     6f0c <main+0x6f0c>
        creation = CREATE_ALWAYS;
    6ef7:	b9 02 00 00 00       	mov    $0x2,%ecx
    6efc:	ff f1                	push   %rcx
    6efe:	48 c7 c1 d0 ff ff ff 	mov    $0xffffffffffffffd0,%rcx
    6f05:	48 03 cd             	add    %rbp,%rcx
    6f08:	8f c2                	pop    %rdx
    6f0a:	89 11                	mov    %edx,(%rcx)
    if flags & FILE_READ_AND_WRITE
    6f0c:	8b 4d 20             	mov    0x20(%rbp),%ecx
    6f0f:	8b c9                	mov    %ecx,%ecx
    6f11:	ff f1                	push   %rcx
    6f13:	b9 04 00 00 00       	mov    $0x4,%ecx
    6f18:	8f c2                	pop    %rdx
    6f1a:	23 d1                	and    %ecx,%edx
    6f1c:	b9 00 00 00 00       	mov    $0x0,%ecx
    6f21:	3b d1                	cmp    %ecx,%edx
    6f23:	40 0f 95 c2          	rex setne %dl
    6f27:	48 0f b6 d2          	movzbq %dl,%rdx
    6f2b:	48 83 fa 00          	cmp    $0x0,%rdx
    6f2f:	0f 84 15 00 00 00    	je     6f4a <main+0x6f4a>
        creation = OPEN_ALWAYS
    6f35:	b9 04 00 00 00       	mov    $0x4,%ecx
    6f3a:	ff f1                	push   %rcx
    6f3c:	48 c7 c1 d0 ff ff ff 	mov    $0xffffffffffffffd0,%rcx
    6f43:	48 03 cd             	add    %rbp,%rcx
    6f46:	8f c2                	pop    %rdx
    6f48:	89 11                	mov    %edx,(%rcx)
    //             }
    //         }
    //         temp+=chr;
    //     }
    // }
    security_attributes := null // TODO: Can we ignore securit attributes?
    6f4a:	b9 00 00 00 00       	mov    $0x0,%ecx
    6f4f:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
    // SECURITY_ATTRIBUTES sa;
    // ZeroMemory(&sa, sizeof(SECURITY_ATTRIBUTES));
    // sa.nLength = sizeof(sa);
    // sa.bInheritHandle = true;
    
    handle := CreateFileA(c_path,access,sharing,security_attributes,creation,FILE_ATTRIBUTE_NORMAL, null);
    6f53:	48 81 ec 38 00 00 00 	sub    $0x38,%rsp
    6f5a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    6f5e:	ff f1                	push   %rcx
    6f60:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    6f63:	ff f1                	push   %rcx
    6f65:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    6f68:	ff f1                	push   %rcx
    6f6a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    6f6e:	ff f1                	push   %rcx
    6f70:	8b 4d d0             	mov    -0x30(%rbp),%ecx
    6f73:	ff f1                	push   %rcx
    6f75:	b9 80 00 00 00       	mov    $0x80,%ecx
    6f7a:	ff f1                	push   %rcx
    6f7c:	b9 00 00 00 00       	mov    $0x0,%ecx
    6f81:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
    6f86:	8f c1                	pop    %rcx
    6f88:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    6f8c:	8f c1                	pop    %rcx
    6f8e:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    6f92:	8f c1                	pop    %rcx
    6f94:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    6f99:	8f c1                	pop    %rcx
    6f9b:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    6f9f:	8f c1                	pop    %rcx
    6fa1:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    6fa5:	8f c1                	pop    %rcx
    6fa7:	48 89 0c 24          	mov    %rcx,(%rsp)
    6fab:	33 c9                	xor    %ecx,%ecx
    6fad:	48 8b 0c 24          	mov    (%rsp),%rcx
    6fb1:	33 d2                	xor    %edx,%edx
    6fb3:	8b 54 24 08          	mov    0x8(%rsp),%edx
    6fb7:	45 33 c0             	xor    %r8d,%r8d
    6fba:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    6fbf:	45 33 c9             	xor    %r9d,%r9d
    6fc2:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    6fc7:	e8 00 00 00 00       	call   6fcc <main+0x6fcc>
    6fcc:	48 81 c4 38 00 00 00 	add    $0x38,%rsp
    6fd3:	48 8b c8             	mov    %rax,%rcx
    6fd6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    
    if(handle == INVALID_HANDLE_VALUE){
    6fda:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    6fde:	ff f1                	push   %rcx
    6fe0:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    6fe5:	48 63 d1             	movslq %ecx,%rdx
    6fe8:	8f c1                	pop    %rcx
    6fea:	48 3b ca             	cmp    %rdx,%rcx
    6fed:	40 0f 94 c1          	rex sete %cl
    6ff1:	48 0f b6 c9          	movzbq %cl,%rcx
    6ff5:	48 83 f9 00          	cmp    $0x0,%rcx
    6ff9:	0f 84 56 00 00 00    	je     7055 <main+0x7055>
        if destroy_c_path
    6fff:	48 8a 4d e8          	rex.W mov -0x18(%rbp),%cl
    7003:	48 0f b6 c9          	movzbq %cl,%rcx
    7007:	48 83 f9 00          	cmp    $0x0,%rcx
    700b:	0f 84 2c 00 00 00    	je     703d <main+0x703d>
            Free(c_path)
    7011:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7018:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    701c:	ff f1                	push   %rcx
    701e:	b9 00 00 00 00       	mov    $0x0,%ecx
    7023:	48 63 d1             	movslq %ecx,%rdx
    7026:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    702b:	8f c1                	pop    %rcx
    702d:	48 89 0c 24          	mov    %rcx,(%rsp)
    7031:	e8 1b 0a 00 00       	call   7a51 <main+0x7a51>
    7036:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        // TODO: provide a better error
        return FileHandle.INVALID
    703d:	b9 00 00 00 00       	mov    $0x0,%ecx
    7042:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7046:	48 81 c4 58 00 00 00 	add    $0x58,%rsp
    704d:	8f c5                	pop    %rbp
    704f:	c3                   	ret
    7050:	e9 29 01 00 00       	jmp    717e <main+0x717e>
        //     PL_PRINTF("[WinError %lu] Denied access to '%s'\n",err,path.c_str()); // tried to open a directory?
        // }else {
        //     PL_PRINTF("[WinError %lu] Error opening '%s'\n",err,path.c_str());
        // }
        // return {};
    } else if (outFileSize) {
    7055:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    7059:	ba 00 00 00 00       	mov    $0x0,%edx
    705e:	48 3b ca             	cmp    %rdx,%rcx
    7061:	40 0f 95 c1          	rex setne %cl
    7065:	48 0f b6 c9          	movzbq %cl,%rcx
    7069:	48 83 f9 00          	cmp    $0x0,%rcx
    706d:	0f 84 0b 01 00 00    	je     717e <main+0x717e>
        *outFileSize = 0;
    7073:	b9 00 00 00 00       	mov    $0x0,%ecx
    7078:	ff f1                	push   %rcx
    707a:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    7081:	48 03 cd             	add    %rbp,%rcx
    7084:	48 8b 11             	mov    (%rcx),%rdx
    7087:	8f c1                	pop    %rcx
    7089:	48 63 d9             	movslq %ecx,%rbx
    708c:	48 89 1a             	mov    %rbx,(%rdx)
        
        success := GetFileSizeEx(handle, outFileSize);
    708f:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    7096:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    709a:	ff f1                	push   %rcx
    709c:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    70a0:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    70a5:	8f c1                	pop    %rcx
    70a7:	48 89 0c 24          	mov    %rcx,(%rsp)
    70ab:	33 c9                	xor    %ecx,%ecx
    70ad:	48 8b 0c 24          	mov    (%rsp),%rcx
    70b1:	33 d2                	xor    %edx,%edx
    70b3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    70b8:	e8 00 00 00 00       	call   70bd <main+0x70bd>
    70bd:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    70c4:	48 0f b6 c8          	movzbq %al,%rcx
    70c8:	88 4d b8             	mov    %cl,-0x48(%rbp)
        if (!success) {
    70cb:	48 8a 4d b8          	rex.W mov -0x48(%rbp),%cl
    70cf:	48 0f b6 c9          	movzbq %cl,%rcx
    70d3:	48 85 c9             	test   %rcx,%rcx
    70d6:	40 0f 94 c1          	rex sete %cl
    70da:	48 0f b6 c9          	movzbq %cl,%rcx
    70de:	48 83 f9 00          	cmp    $0x0,%rcx
    70e2:	0f 84 96 00 00 00    	je     717e <main+0x717e>
            success := CloseHandle(handle)
    70e8:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    70ef:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    70f3:	48 89 0c 24          	mov    %rcx,(%rsp)
    70f7:	33 c9                	xor    %ecx,%ecx
    70f9:	48 8b 0c 24          	mov    (%rsp),%rcx
    70fd:	e8 00 00 00 00       	call   7102 <main+0x7102>
    7102:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    7109:	48 0f b6 c8          	movzbq %al,%rcx
    710d:	88 4d b0             	mov    %cl,-0x50(%rbp)
            if !success {
    7110:	48 8a 4d b0          	rex.W mov -0x50(%rbp),%cl
    7114:	48 0f b6 c9          	movzbq %cl,%rcx
    7118:	48 85 c9             	test   %rcx,%rcx
    711b:	40 0f 94 c1          	rex sete %cl
    711f:	48 0f b6 c9          	movzbq %cl,%rcx
    7123:	48 83 f9 00          	cmp    $0x0,%rcx
    7127:	0f 84 00 00 00 00    	je     712d <main+0x712d>
        if destroy_c_path
    712d:	48 8a 4d e8          	rex.W mov -0x18(%rbp),%cl
    7131:	48 0f b6 c9          	movzbq %cl,%rcx
    7135:	48 83 f9 00          	cmp    $0x0,%rcx
    7139:	0f 84 2c 00 00 00    	je     716b <main+0x716b>
            Free(c_path)
    713f:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7146:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    714a:	ff f1                	push   %rcx
    714c:	b9 00 00 00 00       	mov    $0x0,%ecx
    7151:	48 63 d1             	movslq %ecx,%rdx
    7154:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    7159:	8f c1                	pop    %rcx
    715b:	48 89 0c 24          	mov    %rcx,(%rsp)
    715f:	e8 ed 08 00 00       	call   7a51 <main+0x7a51>
    7164:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
                // TODO: I don't think this should fail since CreateFileA succeded.   
            }
            return FileHandle.INVALID
    716b:	b9 00 00 00 00       	mov    $0x0,%ecx
    7170:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7174:	48 81 c4 58 00 00 00 	add    $0x58,%rsp
    717b:	8f c5                	pop    %rbp
    717d:	c3                   	ret
        if destroy_c_path
    717e:	48 8a 4d e8          	rex.W mov -0x18(%rbp),%cl
    7182:	48 0f b6 c9          	movzbq %cl,%rcx
    7186:	48 83 f9 00          	cmp    $0x0,%rcx
    718a:	0f 84 2c 00 00 00    	je     71bc <main+0x71bc>
            Free(c_path)
    7190:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7197:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    719b:	ff f1                	push   %rcx
    719d:	b9 00 00 00 00       	mov    $0x0,%ecx
    71a2:	48 63 d1             	movslq %ecx,%rdx
    71a5:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    71aa:	8f c1                	pop    %rcx
    71ac:	48 89 0c 24          	mov    %rcx,(%rsp)
    71b0:	e8 9c 08 00 00       	call   7a51 <main+0x7a51>
    71b5:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        }
    }
    return OS_TO_FILE_HANDLE(handle)
    71bc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    71c0:	ff f1                	push   %rcx
    71c2:	b9 01 00 00 00       	mov    $0x1,%ecx
    71c7:	8f c2                	pop    %rdx
    71c9:	48 63 d9             	movslq %ecx,%rbx
    71cc:	48 03 d3             	add    %rbx,%rdx
    71cf:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    71d3:	48 81 c4 58 00 00 00 	add    $0x58,%rsp
    71da:	8f c5                	pop    %rbp
    71dc:	c3                   	ret
    71dd:	48 81 c4 58 00 00 00 	add    $0x58,%rsp
    71e4:	8f c5                	pop    %rbp
    71e6:	c3                   	ret
    }
    return OS_TO_FILE_HANDLE(fd)
#endif
}
// returns read bytes
fn FileRead(file: FileHandle, buffer: void*, size: i32) -> i32 {
    71e7:	ff f5                	push   %rbp
    71e9:	48 8b ec             	mov    %rsp,%rbp
    71ec:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    #if OS_WINDOWS
        read: i32
    71f3:	33 c9                	xor    %ecx,%ecx
    71f5:	89 4d f0             	mov    %ecx,-0x10(%rbp)
        yes := ReadFile(FILE_TO_OS_HANDLE(file), buffer, size, &read, null)
    71f8:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    71ff:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7203:	ff f1                	push   %rcx
    7205:	b9 01 00 00 00       	mov    $0x1,%ecx
    720a:	8f c2                	pop    %rdx
    720c:	48 63 d9             	movslq %ecx,%rbx
    720f:	48 2b d3             	sub    %rbx,%rdx
    7212:	ff f2                	push   %rdx
    7214:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7218:	ff f1                	push   %rcx
    721a:	8b 4d 20             	mov    0x20(%rbp),%ecx
    721d:	48 63 c9             	movslq %ecx,%rcx
    7220:	ff f1                	push   %rcx
    7222:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    7229:	48 03 cd             	add    %rbp,%rcx
    722c:	ff f1                	push   %rcx
    722e:	b9 00 00 00 00       	mov    $0x0,%ecx
    7233:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    7238:	8f c1                	pop    %rcx
    723a:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    723f:	8f c1                	pop    %rcx
    7241:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    7245:	8f c1                	pop    %rcx
    7247:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    724c:	8f c1                	pop    %rcx
    724e:	48 89 0c 24          	mov    %rcx,(%rsp)
    7252:	33 c9                	xor    %ecx,%ecx
    7254:	48 8b 0c 24          	mov    (%rsp),%rcx
    7258:	33 d2                	xor    %edx,%edx
    725a:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    725f:	45 33 c0             	xor    %r8d,%r8d
    7262:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    7267:	45 33 c9             	xor    %r9d,%r9d
    726a:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    726f:	e8 00 00 00 00       	call   7274 <main+0x7274>
    7274:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    727b:	48 0f b6 c8          	movzbq %al,%rcx
    727f:	88 4d e8             	mov    %cl,-0x18(%rbp)
        if !yes
    7282:	48 8a 4d e8          	rex.W mov -0x18(%rbp),%cl
    7286:	48 0f b6 c9          	movzbq %cl,%rcx
    728a:	48 85 c9             	test   %rcx,%rcx
    728d:	40 0f 94 c1          	rex sete %cl
    7291:	48 0f b6 c9          	movzbq %cl,%rcx
    7295:	48 83 f9 00          	cmp    $0x0,%rcx
    7299:	0f 84 12 00 00 00    	je     72b1 <main+0x72b1>
            return 0 // TODO: Handle error
    729f:	b9 00 00 00 00       	mov    $0x0,%ecx
    72a4:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    72a7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    72ae:	8f c5                	pop    %rbp
    72b0:	c3                   	ret
        return read
    72b1:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    72b4:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    72b7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    72be:	8f c5                	pop    %rbp
    72c0:	c3                   	ret
        if bytes < 0
            return bytes // TODO: Handle error
        return bytes
    #endif
}
fn FileClose(file: FileHandle) {
    72c1:	ff f5                	push   %rbp
    72c3:	48 8b ec             	mov    %rsp,%rbp
    #if OS_WINDOWS
        CloseHandle(FILE_TO_OS_HANDLE(file))
    72c6:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    72cd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    72d1:	ff f1                	push   %rcx
    72d3:	b9 01 00 00 00       	mov    $0x1,%ecx
    72d8:	8f c2                	pop    %rdx
    72da:	48 63 d9             	movslq %ecx,%rbx
    72dd:	48 2b d3             	sub    %rbx,%rdx
    72e0:	48 89 14 24          	mov    %rdx,(%rsp)
    72e4:	33 c9                	xor    %ecx,%ecx
    72e6:	48 8b 0c 24          	mov    (%rsp),%rcx
    72ea:	e8 00 00 00 00       	call   72ef <main+0x72ef>
    72ef:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    72f6:	8f c5                	pop    %rbp
    72f8:	c3                   	ret
    }
}

// NOTE: We force microsecond resolution (assuming MONOTONIC clock supports it)
#macro __LINUX_MEASURE_RESOLUTION 1000_000
fn StartMeasure() -> i64 {
    72f9:	ff f5                	push   %rbp
    72fb:	48 8b ec             	mov    %rsp,%rbp
    72fe:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    #if OS_WINDOWS
        tp: i64
    7305:	48 33 c9             	xor    %rcx,%rcx
    7308:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        QueryPerformanceCounter(&tp)
    730c:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    7313:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    731a:	48 03 cd             	add    %rbp,%rcx
    731d:	48 89 0c 24          	mov    %rcx,(%rsp)
    7321:	33 c9                	xor    %ecx,%ecx
    7323:	48 8b 0c 24          	mov    (%rsp),%rcx
    7327:	e8 00 00 00 00       	call   732c <main+0x732c>
    732c:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        return tp
    7333:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7337:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    733b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    7342:	8f c5                	pop    %rbp
    7344:	c3                   	ret
        tp: i64 = cast<i64>(spec.tv_sec * __LINUX_MEASURE_RESOLUTION) + cast<i64>(spec.tv_nsec / (cast<i64>1000_000_000/cast<i64>__LINUX_MEASURE_RESOLUTION))

        return cast<f64> (tp - timePoint) / cast<f64> __LINUX_MEASURE_RESOLUTION
    #endif
}
fn DiffMeasure(endSubStart: i64) -> f64 {
    7345:	ff f5                	push   %rbp
    7347:	48 8b ec             	mov    %rsp,%rbp
    734a:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    #if OS_WINDOWS
        freq: i64
    7351:	48 33 c9             	xor    %rcx,%rcx
    7354:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        QueryPerformanceFrequency(&freq)
    7358:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    735f:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    7366:	48 03 cd             	add    %rbp,%rcx
    7369:	48 89 0c 24          	mov    %rcx,(%rsp)
    736d:	33 c9                	xor    %ecx,%ecx
    736f:	48 8b 0c 24          	mov    (%rsp),%rcx
    7373:	e8 00 00 00 00       	call   7378 <main+0x7378>
    7378:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        return cast<f64>endSubStart / cast<f64>freq
    737f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7383:	48 8b c9             	mov    %rcx,%rcx
    7386:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
    738b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7392:	f2 0f 11 04 24       	movsd  %xmm0,(%rsp)
    7397:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    739b:	f2 48 0f 2a c1       	cvtsi2sd %rcx,%xmm0
    73a0:	f2 0f 10 0c 24       	movsd  (%rsp),%xmm1
    73a5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    73ac:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    73b0:	f2 0f 11 4d f8       	movsd  %xmm1,-0x8(%rbp)
    73b5:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    73bc:	8f c5                	pop    %rbp
    73be:	c3                   	ret
    #elif OS_LINUX
        return cast<f64>endSubStart / cast<f64>__LINUX_MEASURE_RESOLUTION
    #endif
}

fn ProcessSleep(seconds: f32) {
    73bf:	ff f5                	push   %rbp
    73c1:	48 8b ec             	mov    %rsp,%rbp
    #if OS_WINDOWS
    win32_Sleep(seconds * 1000)
    73c4:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    73cb:	f3 0f 10 45 10       	movss  0x10(%rbp),%xmm0
    73d0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    73d7:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    73dc:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    73e1:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    73e6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    73ed:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    73f1:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
    73f5:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
    73f9:	89 0c 24             	mov    %ecx,(%rsp)
    73fc:	33 c9                	xor    %ecx,%ecx
    73fe:	8b 0c 24             	mov    (%rsp),%ecx
    7401:	e8 00 00 00 00       	call   7406 <main+0x7406>
    7406:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    740d:	8f c5                	pop    %rbp
    740f:	c3                   	ret
    player_entity: Entity*;
}

global game_state: GameState*

fn StartGame() {
    7410:	ff f5                	push   %rbp
    7412:	48 8b ec             	mov    %rsp,%rbp
    7415:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    game_state = Allocate(sizeof(GameState))
    741c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    7423:	b9 a0 00 00 00       	mov    $0xa0,%ecx
    7428:	48 63 d1             	movslq %ecx,%rdx
    742b:	48 89 14 24          	mov    %rdx,(%rsp)
    742f:	e8 67 05 00 00       	call   799b <main+0x799b>
    7434:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    743b:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    7440:	ff f1                	push   %rcx
    7442:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7449 <main+0x7449>
    7449:	8f c2                	pop    %rdx
    744b:	48 89 11             	mov    %rdx,(%rcx)
    construct(game_state)
    744e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7455 <main+0x7455>
    7455:	48 8b 11             	mov    (%rcx),%rdx
    7458:	b9 a0 00 00 00       	mov    $0xa0,%ecx
    745d:	ff f2                	push   %rdx
    745f:	ff f1                	push   %rcx
    7461:	48 01 d1             	add    %rdx,%rcx
    7464:	48 3b ca             	cmp    %rdx,%rcx
    7467:	74 0d                	je     7476 <main+0x7476>
    7469:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    7470:	48 83 c2 08          	add    $0x8,%rdx
    7474:	eb ee                	jmp    7464 <main+0x7464>
    7476:	8f c1                	pop    %rcx
    7478:	8f c2                	pop    %rdx
    747a:	33 c9                	xor    %ecx,%ecx
    747c:	89 4a 7a             	mov    %ecx,0x7a(%rdx)
    747f:	33 c9                	xor    %ecx,%ecx
    7481:	89 4a 76             	mov    %ecx,0x76(%rdx)
    7484:	b9 10 00 00 00       	mov    $0x10,%ecx
    7489:	ff f2                	push   %rdx
    748b:	ff f1                	push   %rcx
    748d:	48 01 d1             	add    %rdx,%rcx
    7490:	48 3b ca             	cmp    %rdx,%rcx
    7493:	74 0d                	je     74a2 <main+0x74a2>
    7495:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    749c:	48 83 c2 08          	add    $0x8,%rdx
    74a0:	eb ee                	jmp    7490 <main+0x7490>
    74a2:	8f c1                	pop    %rcx
    74a4:	8f c2                	pop    %rdx
    74a6:	b9 40 00 00 00       	mov    $0x40,%ecx
    74ab:	ff f2                	push   %rdx
    74ad:	ff f1                	push   %rcx
    74af:	48 01 d1             	add    %rdx,%rcx
    74b2:	48 3b ca             	cmp    %rdx,%rcx
    74b5:	74 0d                	je     74c4 <main+0x74c4>
    74b7:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    74be:	48 83 c2 08          	add    $0x8,%rdx
    74c2:	eb ee                	jmp    74b2 <main+0x74b2>
    74c4:	8f c1                	pop    %rcx
    74c6:	8f c2                	pop    %rdx
    state := game_state // for debugging, globals don't show up in debugger
    74c8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 74cf <main+0x74cf>
    74cf:	48 8b 11             	mov    (%rcx),%rdx
    74d2:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)

    game_state.window_width = 800
    74d6:	b9 20 03 00 00       	mov    $0x320,%ecx
    74db:	ff f1                	push   %rcx
    74dd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 74e4 <main+0x74e4>
    74e4:	48 8b 11             	mov    (%rcx),%rdx
    74e7:	8f c1                	pop    %rcx
    74e9:	89 0a                	mov    %ecx,(%rdx)
    game_state.window_height = 600
    74eb:	b9 58 02 00 00       	mov    $0x258,%ecx
    74f0:	ff f1                	push   %rcx
    74f2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 74f9 <main+0x74f9>
    74f9:	48 8b 11             	mov    (%rcx),%rdx
    74fc:	b9 04 00 00 00       	mov    $0x4,%ecx
    7501:	48 03 d1             	add    %rcx,%rdx
    7504:	8f c1                	pop    %rcx
    7506:	89 0a                	mov    %ecx,(%rdx)
    game_state.window = CreateWindow(game_state.window_width, game_state.window_height, "Wander")
    7508:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    750f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7516 <main+0x7516>
    7516:	48 8b 11             	mov    (%rcx),%rdx
    7519:	8b 0a                	mov    (%rdx),%ecx
    751b:	ff f1                	push   %rcx
    751d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7524 <main+0x7524>
    7524:	48 8b 11             	mov    (%rcx),%rdx
    7527:	b9 04 00 00 00       	mov    $0x4,%ecx
    752c:	48 03 d1             	add    %rcx,%rdx
    752f:	8b 0a                	mov    (%rdx),%ecx
    7531:	ff f1                	push   %rcx
    7533:	b9 06 00 00 00       	mov    $0x6,%ecx
    7538:	ff f1                	push   %rcx
    753a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7541 <main+0x7541>
    7541:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7546:	8f c1                	pop    %rcx
    7548:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    754d:	8f c1                	pop    %rcx
    754f:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    7553:	8f c1                	pop    %rcx
    7555:	89 0c 24             	mov    %ecx,(%rsp)
    7558:	e8 a0 1c 00 00       	call   91fd <main+0x91fd>
    755d:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7564:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    7569:	ff f1                	push   %rcx
    756b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7572 <main+0x7572>
    7572:	48 8b 11             	mov    (%rcx),%rdx
    7575:	b9 08 00 00 00       	mov    $0x8,%ecx
    757a:	48 03 d1             	add    %rcx,%rdx
    757d:	8f c1                	pop    %rcx
    757f:	48 89 0a             	mov    %rcx,(%rdx)

    game_state.renderer.setup("assets")
    7582:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7589:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7590 <main+0x7590>
    7590:	48 8b 11             	mov    (%rcx),%rdx
    7593:	b9 10 00 00 00       	mov    $0x10,%ecx
    7598:	48 03 d1             	add    %rcx,%rdx
    759b:	ff f2                	push   %rdx
    759d:	b9 06 00 00 00       	mov    $0x6,%ecx
    75a2:	ff f1                	push   %rcx
    75a4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 75ab <main+0x75ab>
    75ab:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    75b0:	8f c1                	pop    %rcx
    75b2:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    75b7:	8f c1                	pop    %rcx
    75b9:	48 89 0c 24          	mov    %rcx,(%rsp)
    75bd:	e8 cc a2 00 00       	call   1188e <main+0x1188e>
    75c2:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

    game_state.entities.init(512)
    75c9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    75d0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 75d7 <main+0x75d7>
    75d7:	48 8b 11             	mov    (%rcx),%rdx
    75da:	b9 80 00 00 00       	mov    $0x80,%ecx
    75df:	48 03 d1             	add    %rcx,%rdx
    75e2:	ff f2                	push   %rdx
    75e4:	b9 00 02 00 00       	mov    $0x200,%ecx
    75e9:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    75ed:	8f c1                	pop    %rcx
    75ef:	48 89 0c 24          	mov    %rcx,(%rsp)
    75f3:	e8 83 df ff ff       	call   557b <main+0x557b>
    75f8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    player_entity_index: i32
    75ff:	33 c9                	xor    %ecx,%ecx
    7601:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    player_entity, ind := game_state.entities.add(null)
    7604:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    760b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7612 <main+0x7612>
    7612:	48 8b 11             	mov    (%rcx),%rdx
    7615:	b9 80 00 00 00       	mov    $0x80,%ecx
    761a:	48 03 d1             	add    %rcx,%rdx
    761d:	ff f2                	push   %rdx
    761f:	b9 00 00 00 00       	mov    $0x0,%ecx
    7624:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7629:	8f c1                	pop    %rcx
    762b:	48 89 0c 24          	mov    %rcx,(%rsp)
    762f:	e8 86 df ff ff       	call   55ba <main+0x55ba>
    7634:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    763b:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    7640:	ff f1                	push   %rcx
    7642:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
    7646:	48 63 c9             	movslq %ecx,%rcx
    7649:	89 4d e0             	mov    %ecx,-0x20(%rbp)
    764c:	8f c1                	pop    %rcx
    764e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    game_state.player_entity = player_entity
    7652:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7656:	ff f1                	push   %rcx
    7658:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 765f <main+0x765f>
    765f:	48 8b 11             	mov    (%rcx),%rdx
    7662:	b9 98 00 00 00       	mov    $0x98,%ecx
    7667:	48 03 d1             	add    %rcx,%rdx
    766a:	8f c1                	pop    %rcx
    766c:	48 89 0a             	mov    %rcx,(%rdx)
    player_entity.id = player_entity_index
    766f:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    7672:	ff f1                	push   %rcx
    7674:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    767b:	48 03 cd             	add    %rbp,%rcx
    767e:	48 8b 11             	mov    (%rcx),%rdx
    7681:	8f c1                	pop    %rcx
    7683:	89 0a                	mov    %ecx,(%rdx)

    GameLoop()
    7685:	e8 0a 00 00 00       	call   7694 <main+0x7694>
    768a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7691:	8f c5                	pop    %rbp
    7693:	c3                   	ret
}

fn GameLoop() {
    7694:	ff f5                	push   %rbp
    7696:	48 8b ec             	mov    %rsp,%rbp
    7699:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    state := game_state // for debugging, globals don't show up in debugger
    76a0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 76a7 <main+0x76a7>
    76a7:	48 8b 11             	mov    (%rcx),%rdx
    76aa:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)

    x := 0
    76ae:	b9 00 00 00 00       	mov    $0x0,%ecx
    76b3:	89 4d f0             	mov    %ecx,-0x10(%rbp)

    while game_state.window.running {
    76b6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 76bd <main+0x76bd>
    76bd:	48 8b 11             	mov    (%rcx),%rdx
    76c0:	b9 08 00 00 00       	mov    $0x8,%ecx
    76c5:	48 03 d1             	add    %rcx,%rdx
    76c8:	48 8b 0a             	mov    (%rdx),%rcx
    76cb:	ba 10 00 00 00       	mov    $0x10,%edx
    76d0:	48 03 ca             	add    %rdx,%rcx
    76d3:	48 8a 11             	rex.W mov (%rcx),%dl
    76d6:	48 0f b6 d2          	movzbq %dl,%rdx
    76da:	48 83 fa 00          	cmp    $0x0,%rdx
    76de:	0f 84 a5 02 00 00    	je     7989 <main+0x7989>
        FillColor(game_state.window, {0.1,0.1,0.1})
    76e4:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    76eb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 76f2 <main+0x76f2>
    76f2:	48 8b 11             	mov    (%rcx),%rdx
    76f5:	b9 08 00 00 00       	mov    $0x8,%ecx
    76fa:	48 03 d1             	add    %rcx,%rdx
    76fd:	48 8b 0a             	mov    (%rdx),%rcx
    7700:	ff f1                	push   %rcx
    7702:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    7707:	ff f1                	push   %rcx
    7709:	b9 cd cc cc 3d       	mov    $0x3dcccccd,%ecx
    770e:	ff f1                	push   %rcx
    7710:	b9 cd cc cc 3d       	mov    $0x3dcccccd,%ecx
    7715:	ff f1                	push   %rcx
    7717:	c7 44 24 f8 cd cc cc 	movl   $0x3dcccccd,-0x8(%rsp)
    771e:	3d 
    771f:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    7725:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    772b:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    7730:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7737:	f3 0f 11 44 24 24    	movss  %xmm0,0x24(%rsp)
    773d:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    7742:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7749:	f3 0f 11 44 24 20    	movss  %xmm0,0x20(%rsp)
    774f:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    7754:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    775b:	f3 0f 11 44 24 1c    	movss  %xmm0,0x1c(%rsp)
    7761:	8f c1                	pop    %rcx
    7763:	48 89 0c 24          	mov    %rcx,(%rsp)
    7767:	e8 eb 39 00 00       	call   b157 <main+0xb157>
    776c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

        UpdateGame(game_state)
    7773:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    777a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7781 <main+0x7781>
    7781:	48 8b 11             	mov    (%rcx),%rdx
    7784:	48 89 14 24          	mov    %rdx,(%rsp)
    7788:	e8 06 02 00 00       	call   7993 <main+0x7993>
    778d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

        game_state.renderer.render(game_state)
    7794:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    779b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 77a2 <main+0x77a2>
    77a2:	48 8b 11             	mov    (%rcx),%rdx
    77a5:	b9 10 00 00 00       	mov    $0x10,%ecx
    77aa:	48 03 d1             	add    %rcx,%rdx
    77ad:	ff f2                	push   %rdx
    77af:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 77b6 <main+0x77b6>
    77b6:	48 8b 11             	mov    (%rcx),%rdx
    77b9:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    77be:	8f c1                	pop    %rcx
    77c0:	48 89 0c 24          	mov    %rcx,(%rsp)
    77c4:	e8 96 a4 00 00       	call   11c5f <main+0x11c5f>
    77c9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

        DrawText(game_state.window, x, x, 20, "Cold as ice")
    77d0:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
    77d7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 77de <main+0x77de>
    77de:	48 8b 11             	mov    (%rcx),%rdx
    77e1:	b9 08 00 00 00       	mov    $0x8,%ecx
    77e6:	48 03 d1             	add    %rcx,%rdx
    77e9:	48 8b 0a             	mov    (%rdx),%rcx
    77ec:	ff f1                	push   %rcx
    77ee:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    77f1:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    77f5:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    77fc:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    7801:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    7804:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    7808:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    780f:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    7814:	b9 14 00 00 00       	mov    $0x14,%ecx
    7819:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    781d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7824:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    7829:	b9 0b 00 00 00       	mov    $0xb,%ecx
    782e:	ff f1                	push   %rcx
    7830:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7837 <main+0x7837>
    7837:	ff f1                	push   %rcx
    7839:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    783e:	ff f1                	push   %rcx
    7840:	b9 01 00 00 00       	mov    $0x1,%ecx
    7845:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    7849:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7850:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    7855:	b9 01 00 00 00       	mov    $0x1,%ecx
    785a:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    785e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7865:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    786a:	b9 01 00 00 00       	mov    $0x1,%ecx
    786f:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    7873:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    787a:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    787f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    7884:	ff f1                	push   %rcx
    7886:	b9 00 00 00 00       	mov    $0x0,%ecx
    788b:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
    7892:	00 
    7893:	8f c1                	pop    %rcx
    7895:	89 8c 24 88 00 00 00 	mov    %ecx,0x88(%rsp)
    789c:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    78a1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    78a8:	f3 0f 11 44 24 70    	movss  %xmm0,0x70(%rsp)
    78ae:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    78b3:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    78ba:	f3 0f 11 44 24 6c    	movss  %xmm0,0x6c(%rsp)
    78c0:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    78c5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    78cc:	f3 0f 11 44 24 68    	movss  %xmm0,0x68(%rsp)
    78d2:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    78d7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    78de:	f3 0f 11 44 24 64    	movss  %xmm0,0x64(%rsp)
    78e4:	8f c1                	pop    %rcx
    78e6:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    78eb:	8f c1                	pop    %rcx
    78ed:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    78f2:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    78f7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    78fe:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    7904:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    7909:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7910:	f3 0f 11 44 24 1c    	movss  %xmm0,0x1c(%rsp)
    7916:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    791b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7922:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    7928:	8f c1                	pop    %rcx
    792a:	48 89 0c 24          	mov    %rcx,(%rsp)
    792e:	e8 9b 43 00 00       	call   bcce <main+0xbcce>
    7933:	48 81 c4 50 00 00 00 	add    $0x50,%rsp

        x += 1
    793a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    793d:	ff f1                	push   %rcx
    793f:	b9 01 00 00 00       	mov    $0x1,%ecx
    7944:	8f c2                	pop    %rdx
    7946:	03 d1                	add    %ecx,%edx
    7948:	ff f2                	push   %rdx
    794a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    7951:	48 03 cd             	add    %rbp,%rcx
    7954:	8f c2                	pop    %rdx
    7956:	89 11                	mov    %edx,(%rcx)

        RefreshWindow(game_state.window)
    7958:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    795f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7966 <main+0x7966>
    7966:	48 8b 11             	mov    (%rcx),%rdx
    7969:	b9 08 00 00 00       	mov    $0x8,%ecx
    796e:	48 03 d1             	add    %rcx,%rdx
    7971:	48 8b 0a             	mov    (%rdx),%rcx
    7974:	48 89 0c 24          	mov    %rcx,(%rsp)
    7978:	e8 4a 34 00 00       	call   adc7 <main+0xadc7>
    797d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    7984:	e9 2d fd ff ff       	jmp    76b6 <main+0x76b6>
    7989:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    7990:	8f c5                	pop    %rbp
    7992:	c3                   	ret
    }
}

fn UpdateGame(state: GameState*) {
    7993:	ff f5                	push   %rbp
    7995:	48 8b ec             	mov    %rsp,%rbp
    7998:	8f c5                	pop    %rbp
    799a:	c3                   	ret

// source and destination should not overlap
fn @intrinsic memcpy(dst: void*, src: void*, len: i64);
fn @intrinsic memzero(dst: void*, len: i64);

fn Allocate(size: i64) -> void* {
    799b:	ff f5                	push   %rbp
    799d:	48 8b ec             	mov    %rsp,%rbp
    79a0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    return AllocateHeap(size)
    79a7:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    79ae:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    79b2:	48 8b c9             	mov    %rcx,%rcx
    79b5:	ff f1                	push   %rcx
    79b7:	b9 00 00 00 00       	mov    $0x0,%ecx
    79bc:	ff f1                	push   %rcx
    79be:	b9 00 00 00 00       	mov    $0x0,%ecx
    79c3:	48 63 d1             	movslq %ecx,%rdx
    79c6:	48 89 54 24 20       	mov    %rdx,0x20(%rsp)
    79cb:	8f c1                	pop    %rcx
    79cd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    79d2:	8f c1                	pop    %rcx
    79d4:	48 89 0c 24          	mov    %rcx,(%rsp)
    79d8:	e8 b8 00 00 00       	call   7a95 <main+0x7a95>
    79dd:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    79e4:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    79e9:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    79ed:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    79f4:	8f c5                	pop    %rbp
    79f6:	c3                   	ret
}
fn Reallocate(size: i64, ptr: void*, old_size: i64 = 0) -> void* {
    79f7:	ff f5                	push   %rbp
    79f9:	48 8b ec             	mov    %rsp,%rbp
    79fc:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    return AllocateHeap(size, ptr, old_size)
    7a03:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7a0a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7a0e:	48 8b c9             	mov    %rcx,%rcx
    7a11:	ff f1                	push   %rcx
    7a13:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7a17:	ff f1                	push   %rcx
    7a19:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
    7a1d:	48 8b c9             	mov    %rcx,%rcx
    7a20:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7a25:	8f c1                	pop    %rcx
    7a27:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7a2c:	8f c1                	pop    %rcx
    7a2e:	48 89 0c 24          	mov    %rcx,(%rsp)
    7a32:	e8 5e 00 00 00       	call   7a95 <main+0x7a95>
    7a37:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7a3e:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
    7a43:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7a47:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    7a4e:	8f c5                	pop    %rbp
    7a50:	c3                   	ret
}
fn Free(ptr: void*, old_size: i64 = 0) {
    7a51:	ff f5                	push   %rbp
    7a53:	48 8b ec             	mov    %rsp,%rbp
    AllocateHeap(0, ptr, old_size)
    7a56:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7a5d:	b9 00 00 00 00       	mov    $0x0,%ecx
    7a62:	48 63 d1             	movslq %ecx,%rdx
    7a65:	ff f2                	push   %rdx
    7a67:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7a6b:	ff f1                	push   %rcx
    7a6d:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7a71:	48 8b c9             	mov    %rcx,%rcx
    7a74:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7a79:	8f c1                	pop    %rcx
    7a7b:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7a80:	8f c1                	pop    %rcx
    7a82:	48 89 0c 24          	mov    %rcx,(%rsp)
    7a86:	e8 0a 00 00 00       	call   7a95 <main+0x7a95>
    7a8b:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7a92:	8f c5                	pop    %rbp
    7a94:	c3                   	ret
}
//   alloc - AllocateHeap(64)
//    free - AllocateHeap(0, ptr, old_size = 64)
// realloc - AllocateHeap(128, ptr, old_size = 64)
fn AllocateHeap(size: i64, ptr: void* = null, old_size: i64 = 0) -> void* {
    7a95:	ff f5                	push   %rbp
    7a97:	48 8b ec             	mov    %rsp,%rbp
    7a9a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    // global mut: Mutex;
    // mut.lock()
    // defer mut.unlock()
    // std_print("enter heap\n")
    // defer std_print("leave heap\n")
    heap := GetProcessHeap()
    7aa1:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7aa8:	e8 00 00 00 00       	call   7aad <main+0x7aad>
    7aad:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7ab4:	48 8b c8             	mov    %rax,%rcx
    7ab7:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    if !size {
    7abb:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7abf:	48 8b c9             	mov    %rcx,%rcx
    7ac2:	48 85 c9             	test   %rcx,%rcx
    7ac5:	40 0f 94 c1          	rex sete %cl
    7ac9:	48 0f b6 c9          	movzbq %cl,%rcx
    7acd:	48 83 f9 00          	cmp    $0x0,%rcx
    7ad1:	0f 84 b7 00 00 00    	je     7b8e <main+0x7b8e>
        if ptr {
    7ad7:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7adb:	ba 00 00 00 00       	mov    $0x0,%edx
    7ae0:	48 3b ca             	cmp    %rdx,%rcx
    7ae3:	40 0f 95 c1          	rex setne %cl
    7ae7:	48 0f b6 c9          	movzbq %cl,%rcx
    7aeb:	48 83 f9 00          	cmp    $0x0,%rcx
    7aef:	0f 84 86 00 00 00    	je     7b7b <main+0x7b7b>
            HeapFree(heap, 0, ptr)
    7af5:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7afc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7b00:	ff f1                	push   %rcx
    7b02:	b9 00 00 00 00       	mov    $0x0,%ecx
    7b07:	ff f1                	push   %rcx
    7b09:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7b0d:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7b12:	8f c1                	pop    %rcx
    7b14:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    7b18:	8f c1                	pop    %rcx
    7b1a:	48 89 0c 24          	mov    %rcx,(%rsp)
    7b1e:	33 c9                	xor    %ecx,%ecx
    7b20:	48 8b 0c 24          	mov    (%rsp),%rcx
    7b24:	33 d2                	xor    %edx,%edx
    7b26:	8b 54 24 08          	mov    0x8(%rsp),%edx
    7b2a:	45 33 c0             	xor    %r8d,%r8d
    7b2d:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    7b32:	e8 00 00 00 00       	call   7b37 <main+0x7b37>
    7b37:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
            // if type.index() == 0
                memory_tracker.remove(ptr, old_size)
    7b3e:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7b45:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7b4c <main+0x7b4c>
    7b4c:	ff f1                	push   %rcx
    7b4e:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7b52:	ff f1                	push   %rcx
    7b54:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
    7b58:	48 8b c9             	mov    %rcx,%rcx
    7b5b:	48 8b d1             	mov    %rcx,%rdx
    7b5e:	89 54 24 20          	mov    %edx,0x20(%rsp)
    7b62:	8f c1                	pop    %rcx
    7b64:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7b69:	8f c1                	pop    %rcx
    7b6b:	48 89 0c 24          	mov    %rcx,(%rsp)
    7b6f:	e8 e9 09 00 00       	call   855d <main+0x855d>
    7b74:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
            // else
            //     memory_tracker.remove(ptr, old_size, type)
        }
        return null
    7b7b:	b9 00 00 00 00       	mov    $0x0,%ecx
    7b80:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7b84:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7b8b:	8f c5                	pop    %rbp
    7b8d:	c3                   	ret
    }
    new_ptr: void*
    7b8e:	48 33 c9             	xor    %rcx,%rcx
    7b91:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    if !ptr {
    7b95:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7b99:	48 85 c9             	test   %rcx,%rcx
    7b9c:	40 0f 94 c1          	rex sete %cl
    7ba0:	48 0f b6 c9          	movzbq %cl,%rcx
    7ba4:	48 83 f9 00          	cmp    $0x0,%rcx
    7ba8:	0f 84 a2 00 00 00    	je     7c50 <main+0x7c50>
        new_ptr = HeapAlloc(heap, 0, size)
    7bae:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7bb5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7bb9:	ff f1                	push   %rcx
    7bbb:	b9 00 00 00 00       	mov    $0x0,%ecx
    7bc0:	ff f1                	push   %rcx
    7bc2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7bc6:	48 8b c9             	mov    %rcx,%rcx
    7bc9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7bce:	8f c1                	pop    %rcx
    7bd0:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    7bd4:	8f c1                	pop    %rcx
    7bd6:	48 89 0c 24          	mov    %rcx,(%rsp)
    7bda:	33 c9                	xor    %ecx,%ecx
    7bdc:	48 8b 0c 24          	mov    (%rsp),%rcx
    7be0:	33 d2                	xor    %edx,%edx
    7be2:	8b 54 24 08          	mov    0x8(%rsp),%edx
    7be6:	45 33 c0             	xor    %r8d,%r8d
    7be9:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    7bee:	e8 00 00 00 00       	call   7bf3 <main+0x7bf3>
    7bf3:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7bfa:	48 8b c8             	mov    %rax,%rcx
    7bfd:	ff f1                	push   %rcx
    7bff:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    7c06:	48 03 cd             	add    %rbp,%rcx
    7c09:	8f c2                	pop    %rdx
    7c0b:	48 89 11             	mov    %rdx,(%rcx)
            // so it's an infinite loop
            // this disables tracking if we use stable globals and if we 
            // dont have stable globals memory ready yet, scuffed and complicated but it works
            if stable_global_memory
        #endif
            memory_tracker.add(new_ptr, size)
    7c0e:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7c15:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7c1c <main+0x7c1c>
    7c1c:	ff f1                	push   %rcx
    7c1e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7c22:	ff f1                	push   %rcx
    7c24:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7c28:	48 8b c9             	mov    %rcx,%rcx
    7c2b:	48 8b d1             	mov    %rcx,%rdx
    7c2e:	89 54 24 20          	mov    %edx,0x20(%rsp)
    7c32:	8f c1                	pop    %rcx
    7c34:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7c39:	8f c1                	pop    %rcx
    7c3b:	48 89 0c 24          	mov    %rcx,(%rsp)
    7c3f:	e8 8b 01 00 00       	call   7dcf <main+0x7dcf>
    7c44:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7c4b:	e9 b2 00 00 00       	jmp    7d02 <main+0x7d02>
        // else
        //     memory_tracker.add(new_ptr, size, type)
    } else {
        new_ptr = HeapReAlloc(heap, 0, ptr, size)
    7c50:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7c57:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    7c5b:	ff f1                	push   %rcx
    7c5d:	b9 00 00 00 00       	mov    $0x0,%ecx
    7c62:	ff f1                	push   %rcx
    7c64:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7c68:	ff f1                	push   %rcx
    7c6a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7c6e:	48 8b c9             	mov    %rcx,%rcx
    7c71:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    7c76:	8f c1                	pop    %rcx
    7c78:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    7c7d:	8f c1                	pop    %rcx
    7c7f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    7c83:	8f c1                	pop    %rcx
    7c85:	48 89 0c 24          	mov    %rcx,(%rsp)
    7c89:	33 c9                	xor    %ecx,%ecx
    7c8b:	48 8b 0c 24          	mov    (%rsp),%rcx
    7c8f:	33 d2                	xor    %edx,%edx
    7c91:	8b 54 24 08          	mov    0x8(%rsp),%edx
    7c95:	45 33 c0             	xor    %r8d,%r8d
    7c98:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    7c9d:	45 33 c9             	xor    %r9d,%r9d
    7ca0:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    7ca5:	e8 00 00 00 00       	call   7caa <main+0x7caa>
    7caa:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7cb1:	48 8b c8             	mov    %rax,%rcx
    7cb4:	ff f1                	push   %rcx
    7cb6:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    7cbd:	48 03 cd             	add    %rbp,%rcx
    7cc0:	8f c2                	pop    %rdx
    7cc2:	48 89 11             	mov    %rdx,(%rcx)
        // if type.index() == 0 {
            memory_tracker.remove(ptr, old_size) // we must remove first incase HeapReAlloc returns the same pointer
    7cc5:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    7ccc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7cd3 <main+0x7cd3>
    7cd3:	ff f1                	push   %rcx
    7cd5:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7cd9:	ff f1                	push   %rcx
    7cdb:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
    7cdf:	48 8b c9             	mov    %rcx,%rcx
    7ce2:	48 8b d1             	mov    %rcx,%rdx
    7ce5:	89 54 24 20          	mov    %edx,0x20(%rsp)
    7ce9:	8f c1                	pop    %rcx
    7ceb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7cf0:	8f c1                	pop    %rcx
    7cf2:	48 89 0c 24          	mov    %rcx,(%rsp)
    7cf6:	e8 62 08 00 00       	call   855d <main+0x855d>
    7cfb:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        // } else {
        //     memory_tracker.remove(ptr, old_size, type)
        //     memory_tracker.add(new_ptr, size, type)
        // }
    }
    if !new_ptr || new_ptr == STATUS_NO_MEMORY || new_ptr == STATUS_ACCESS_VIOLATION {
    7d02:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d06:	48 85 c9             	test   %rcx,%rcx
    7d09:	40 0f 94 c1          	rex sete %cl
    7d0d:	48 0f b6 c9          	movzbq %cl,%rcx
    7d11:	ff f1                	push   %rcx
    7d13:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d17:	ff f1                	push   %rcx
    7d19:	b9 17 00 00 c0       	mov    $0xc0000017,%ecx
    7d1e:	48 63 d1             	movslq %ecx,%rdx
    7d21:	8f c1                	pop    %rcx
    7d23:	48 3b ca             	cmp    %rdx,%rcx
    7d26:	40 0f 94 c1          	rex sete %cl
    7d2a:	48 0f b6 c9          	movzbq %cl,%rcx
    7d2e:	8f c2                	pop    %rdx
    7d30:	48 85 d2             	test   %rdx,%rdx
    7d33:	75 0a                	jne    7d3f <main+0x7d3f>
    7d35:	48 85 c9             	test   %rcx,%rcx
    7d38:	75 05                	jne    7d3f <main+0x7d3f>
    7d3a:	c6 c2 00             	mov    $0x0,%dl
    7d3d:	eb 07                	jmp    7d46 <main+0x7d46>
    7d3f:	c6 c2 01             	mov    $0x1,%dl
    7d42:	48 0f b6 d2          	movzbq %dl,%rdx
    7d46:	ff f2                	push   %rdx
    7d48:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d4c:	ff f1                	push   %rcx
    7d4e:	b9 05 00 00 c0       	mov    $0xc0000005,%ecx
    7d53:	48 63 d1             	movslq %ecx,%rdx
    7d56:	8f c1                	pop    %rcx
    7d58:	48 3b ca             	cmp    %rdx,%rcx
    7d5b:	40 0f 94 c1          	rex sete %cl
    7d5f:	48 0f b6 c9          	movzbq %cl,%rcx
    7d63:	8f c2                	pop    %rdx
    7d65:	48 85 d2             	test   %rdx,%rdx
    7d68:	75 0a                	jne    7d74 <main+0x7d74>
    7d6a:	48 85 c9             	test   %rcx,%rcx
    7d6d:	75 05                	jne    7d74 <main+0x7d74>
    7d6f:	c6 c2 00             	mov    $0x0,%dl
    7d72:	eb 07                	jmp    7d7b <main+0x7d7b>
    7d74:	c6 c2 01             	mov    $0x1,%dl
    7d77:	48 0f b6 d2          	movzbq %dl,%rdx
    7d7b:	48 83 fa 00          	cmp    $0x0,%rdx
    7d7f:	0f 84 13 00 00 00    	je     7d98 <main+0x7d98>
        return null
    7d85:	b9 00 00 00 00       	mov    $0x0,%ecx
    7d8a:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7d8e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7d95:	8f c5                	pop    %rbp
    7d97:	c3                   	ret
    }
    return new_ptr
    7d98:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7d9c:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    7da0:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    7da7:	8f c5                	pop    %rbp
    7da9:	c3                   	ret
struct MemoryTracker_Item {
    type: lang_TypeId;
    count: i32;
    allocations: Map<void*, i32>;
}
fn hash(v: lang_TypeId) -> u32 {
    7daa:	ff f5                	push   %rbp
    7dac:	48 8b ec             	mov    %rsp,%rbp
    7daf:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    // Assert(4 == sizeof lang_TypeId)
    return *cast<u32*>&v
    7db6:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    7dbd:	48 03 cd             	add    %rbp,%rcx
    7dc0:	8b 11                	mov    (%rcx),%edx
    7dc2:	89 55 f8             	mov    %edx,-0x8(%rbp)
    7dc5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    7dcc:	8f c5                	pop    %rbp
    7dce:	c3                   	ret
    fn init() {
        allocations.init(10000)
        map_types.init(200)
        initialized = true
    }
    fn add(ptr: void*, size: i32) {
    7dcf:	ff f5                	push   %rbp
    7dd1:	48 8b ec             	mov    %rsp,%rbp
    7dd4:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
        if !initialized || disabled
    7ddb:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7ddf:	48 8b c9             	mov    %rcx,%rcx
    7de2:	48 8a 51 50          	rex.W mov 0x50(%rcx),%dl
    7de6:	48 0f b6 d2          	movzbq %dl,%rdx
    7dea:	48 85 d2             	test   %rdx,%rdx
    7ded:	40 0f 94 c2          	rex sete %dl
    7df1:	48 0f b6 d2          	movzbq %dl,%rdx
    7df5:	ff f2                	push   %rdx
    7df7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7dfb:	48 8b c9             	mov    %rcx,%rcx
    7dfe:	48 8a 51 51          	rex.W mov 0x51(%rcx),%dl
    7e02:	48 0f b6 d2          	movzbq %dl,%rdx
    7e06:	8f c1                	pop    %rcx
    7e08:	48 85 c9             	test   %rcx,%rcx
    7e0b:	75 0a                	jne    7e17 <main+0x7e17>
    7e0d:	48 85 d2             	test   %rdx,%rdx
    7e10:	75 05                	jne    7e17 <main+0x7e17>
    7e12:	c6 c1 00             	mov    $0x0,%cl
    7e15:	eb 07                	jmp    7e1e <main+0x7e1e>
    7e17:	c6 c1 01             	mov    $0x1,%cl
    7e1a:	48 0f b6 c9          	movzbq %cl,%rcx
    7e1e:	48 83 f9 00          	cmp    $0x0,%rcx
    7e22:	0f 84 0a 00 00 00    	je     7e32 <main+0x7e32>
            return; 
    7e28:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7e2f:	8f c5                	pop    %rbp
    7e31:	c3                   	ret
        disabled = true
    7e32:	b9 01 00 00 00       	mov    $0x1,%ecx
    7e37:	ff f1                	push   %rcx
    7e39:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7e3d:	48 8b c9             	mov    %rcx,%rcx
    7e40:	ba 51 00 00 00       	mov    $0x51,%edx
    7e45:	48 03 ca             	add    %rdx,%rcx
    7e48:	8f c2                	pop    %rdx
    7e4a:	88 11                	mov    %dl,(%rcx)
        defer disabled = false
        value_ptr := allocations.find(ptr)
    7e4c:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7e53:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7e57:	48 8b c9             	mov    %rcx,%rcx
    7e5a:	ba 00 00 00 00       	mov    $0x0,%edx
    7e5f:	48 03 ca             	add    %rdx,%rcx
    7e62:	ff f1                	push   %rcx
    7e64:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7e68:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7e6d:	8f c1                	pop    %rcx
    7e6f:	48 89 0c 24          	mov    %rcx,(%rsp)
    7e73:	e8 56 be ff ff       	call   3cce <main+0x3cce>
    7e78:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    7e7f:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    7e84:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
        if value_ptr {
    7e88:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    7e8c:	ba 00 00 00 00       	mov    $0x0,%edx
    7e91:	48 3b ca             	cmp    %rdx,%rcx
    7e94:	40 0f 95 c1          	rex setne %cl
    7e98:	48 0f b6 c9          	movzbq %cl,%rcx
    7e9c:	48 83 f9 00          	cmp    $0x0,%rcx
    7ea0:	0f 84 04 01 00 00    	je     7faa <main+0x7faa>
            if *value_ptr != 0 {
    7ea6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    7eaa:	8b 11                	mov    (%rcx),%edx
    7eac:	ff f2                	push   %rdx
    7eae:	b9 00 00 00 00       	mov    $0x0,%ecx
    7eb3:	8f c2                	pop    %rdx
    7eb5:	3b d1                	cmp    %ecx,%edx
    7eb7:	40 0f 95 c2          	rex setne %dl
    7ebb:	48 0f b6 d2          	movzbq %dl,%rdx
    7ebf:	48 83 fa 00          	cmp    $0x0,%rdx
    7ec3:	0f 84 e1 00 00 00    	je     7faa <main+0x7faa>
                LOG_TRACKER("Cannot add allocation ", ptr, ", pointer already exists.")
    7ec9:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7ed0:	b9 09 00 00 00       	mov    $0x9,%ecx
    7ed5:	ff f1                	push   %rcx
    7ed7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7ede <main+0x7ede>
    7ede:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7ee3:	8f c1                	pop    %rcx
    7ee5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7eea:	e8 a3 c1 ff ff       	call   4092 <main+0x4092>
    7eef:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    7ef6:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7efd:	b9 16 00 00 00       	mov    $0x16,%ecx
    7f02:	ff f1                	push   %rcx
    7f04:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7f0b <main+0x7f0b>
    7f0b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7f10:	8f c1                	pop    %rcx
    7f12:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7f17:	e8 76 c1 ff ff       	call   4092 <main+0x4092>
    7f1c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    7f23:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7f2a:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7f2e:	48 89 0c 24          	mov    %rcx,(%rsp)
    7f32:	e8 be bf ff ff       	call   3ef5 <main+0x3ef5>
    7f37:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7f3e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7f45:	b9 19 00 00 00       	mov    $0x19,%ecx
    7f4a:	ff f1                	push   %rcx
    7f4c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7f53 <main+0x7f53>
    7f53:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7f58:	8f c1                	pop    %rcx
    7f5a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    7f5f:	e8 2e c1 ff ff       	call   4092 <main+0x4092>
    7f64:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    7f6b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    7f72:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7f77:	88 0c 24             	mov    %cl,(%rsp)
    7f7a:	e8 72 c0 ff ff       	call   3ff1 <main+0x3ff1>
    7f7f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    7f86:	b9 00 00 00 00       	mov    $0x0,%ecx
    7f8b:	ff f1                	push   %rcx
    7f8d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7f91:	48 8b c9             	mov    %rcx,%rcx
    7f94:	ba 51 00 00 00       	mov    $0x51,%edx
    7f99:	48 03 ca             	add    %rdx,%rcx
    7f9c:	8f c2                	pop    %rdx
    7f9e:	88 11                	mov    %dl,(%rcx)
                return;
    7fa0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    7fa7:	8f c5                	pop    %rbp
    7fa9:	c3                   	ret
            }
        }
        allocations.set(ptr, size)
    7faa:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    7fb1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7fb5:	48 8b c9             	mov    %rcx,%rcx
    7fb8:	ba 00 00 00 00       	mov    $0x0,%edx
    7fbd:	48 03 ca             	add    %rdx,%rcx
    7fc0:	ff f1                	push   %rcx
    7fc2:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    7fc6:	ff f1                	push   %rcx
    7fc8:	8b 4d 20             	mov    0x20(%rbp),%ecx
    7fcb:	48 63 c9             	movslq %ecx,%rcx
    7fce:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    7fd2:	8f c1                	pop    %rcx
    7fd4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    7fd9:	8f c1                	pop    %rcx
    7fdb:	48 89 0c 24          	mov    %rcx,(%rsp)
    7fdf:	e8 d5 af ff ff       	call   2fb9 <main+0x2fb9>
    7fe4:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        defer disabled = false
    7feb:	b9 00 00 00 00       	mov    $0x0,%ecx
    7ff0:	ff f1                	push   %rcx
    7ff2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    7ff6:	48 8b c9             	mov    %rcx,%rcx
    7ff9:	ba 51 00 00 00       	mov    $0x51,%edx
    7ffe:	48 03 ca             	add    %rdx,%rcx
    8001:	8f c2                	pop    %rdx
    8003:	88 11                	mov    %dl,(%rcx)
    8005:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    800c:	8f c5                	pop    %rbp
    800e:	c3                   	ret
    }
    fn add(ptr: void*, size: i32, type: lang_TypeId) {
    800f:	ff f5                	push   %rbp
    8011:	48 8b ec             	mov    %rsp,%rbp
    8014:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if !initialized || disabled
    801b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    801f:	48 8b c9             	mov    %rcx,%rcx
    8022:	48 8a 51 50          	rex.W mov 0x50(%rcx),%dl
    8026:	48 0f b6 d2          	movzbq %dl,%rdx
    802a:	48 85 d2             	test   %rdx,%rdx
    802d:	40 0f 94 c2          	rex sete %dl
    8031:	48 0f b6 d2          	movzbq %dl,%rdx
    8035:	ff f2                	push   %rdx
    8037:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    803b:	48 8b c9             	mov    %rcx,%rcx
    803e:	48 8a 51 51          	rex.W mov 0x51(%rcx),%dl
    8042:	48 0f b6 d2          	movzbq %dl,%rdx
    8046:	8f c1                	pop    %rcx
    8048:	48 85 c9             	test   %rcx,%rcx
    804b:	75 0a                	jne    8057 <main+0x8057>
    804d:	48 85 d2             	test   %rdx,%rdx
    8050:	75 05                	jne    8057 <main+0x8057>
    8052:	c6 c1 00             	mov    $0x0,%cl
    8055:	eb 07                	jmp    805e <main+0x805e>
    8057:	c6 c1 01             	mov    $0x1,%cl
    805a:	48 0f b6 c9          	movzbq %cl,%rcx
    805e:	48 83 f9 00          	cmp    $0x0,%rcx
    8062:	0f 84 0a 00 00 00    	je     8072 <main+0x8072>
            return;
    8068:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    806f:	8f c5                	pop    %rbp
    8071:	c3                   	ret
        disabled = true
    8072:	b9 01 00 00 00       	mov    $0x1,%ecx
    8077:	ff f1                	push   %rcx
    8079:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    807d:	48 8b c9             	mov    %rcx,%rcx
    8080:	ba 51 00 00 00       	mov    $0x51,%edx
    8085:	48 03 ca             	add    %rdx,%rcx
    8088:	8f c2                	pop    %rdx
    808a:	88 11                	mov    %dl,(%rcx)
        defer disabled = false

        hashed_type := hash(type)
    808c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8093:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    8097:	48 0f b6 c9          	movzbq %cl,%rcx
    809b:	ff f1                	push   %rcx
    809d:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    80a1:	48 0f b6 c9          	movzbq %cl,%rcx
    80a5:	ff f1                	push   %rcx
    80a7:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    80ab:	48 0f b7 c9          	movzwq %cx,%rcx
    80af:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
    80b4:	8f c1                	pop    %rcx
    80b6:	88 4c 24 0a          	mov    %cl,0xa(%rsp)
    80ba:	8f c1                	pop    %rcx
    80bc:	88 4c 24 03          	mov    %cl,0x3(%rsp)
    80c0:	e8 e5 fc ff ff       	call   7daa <main+0x7daa>
    80c5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    80cc:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
    80d0:	8b c9                	mov    %ecx,%ecx
    80d2:	89 4d f8             	mov    %ecx,-0x8(%rbp)
        item := map_types.find(hashed_type)
    80d5:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    80dc:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    80e0:	48 8b c9             	mov    %rcx,%rcx
    80e3:	ba 28 00 00 00       	mov    $0x28,%edx
    80e8:	48 03 ca             	add    %rdx,%rcx
    80eb:	ff f1                	push   %rcx
    80ed:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    80f0:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    80f4:	8f c1                	pop    %rcx
    80f6:	48 89 0c 24          	mov    %rcx,(%rsp)
    80fa:	e8 63 bc ff ff       	call   3d62 <main+0x3d62>
    80ff:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8106:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    810b:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        if !item {
    810f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8113:	48 85 c9             	test   %rcx,%rcx
    8116:	40 0f 94 c1          	rex sete %cl
    811a:	48 0f b6 c9          	movzbq %cl,%rcx
    811e:	48 83 f9 00          	cmp    $0x0,%rcx
    8122:	0f 84 c8 01 00 00    	je     82f0 <main+0x82f0>
            item = map_types.set(hashed_type, MemoryTracker_Item{})
    8128:	48 81 ec 48 00 00 00 	sub    $0x48,%rsp
    812f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8133:	48 8b c9             	mov    %rcx,%rcx
    8136:	ba 28 00 00 00       	mov    $0x28,%edx
    813b:	48 03 ca             	add    %rdx,%rcx
    813e:	ff f1                	push   %rcx
    8140:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    8143:	ff f1                	push   %rcx
    8145:	48 33 d2             	xor    %rdx,%rdx
    8148:	ff f2                	push   %rdx
    814a:	48 33 d2             	xor    %rdx,%rdx
    814d:	ff f2                	push   %rdx
    814f:	48 33 d2             	xor    %rdx,%rdx
    8152:	ff f2                	push   %rdx
    8154:	48 33 d2             	xor    %rdx,%rdx
    8157:	ff f2                	push   %rdx
    8159:	48 33 d2             	xor    %rdx,%rdx
    815c:	ff f2                	push   %rdx
    815e:	48 33 d2             	xor    %rdx,%rdx
    8161:	ff f2                	push   %rdx
    8163:	48 33 d2             	xor    %rdx,%rdx
    8166:	ff f2                	push   %rdx
    8168:	48 33 d2             	xor    %rdx,%rdx
    816b:	ff f2                	push   %rdx
    816d:	48 33 d2             	xor    %rdx,%rdx
    8170:	ff f2                	push   %rdx
    8172:	48 33 d2             	xor    %rdx,%rdx
    8175:	ff f2                	push   %rdx
    8177:	48 33 d2             	xor    %rdx,%rdx
    817a:	66 89 54 24 70       	mov    %dx,0x70(%rsp)
    817f:	8f c1                	pop    %rcx
    8181:	88 4c 24 6a          	mov    %cl,0x6a(%rsp)
    8185:	8f c1                	pop    %rcx
    8187:	88 4c 24 63          	mov    %cl,0x63(%rsp)
    818b:	8f c1                	pop    %rcx
    818d:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
    8191:	8f c1                	pop    %rcx
    8193:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
    8198:	8f c1                	pop    %rcx
    819a:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    819e:	8f c1                	pop    %rcx
    81a0:	89 4c 24 54          	mov    %ecx,0x54(%rsp)
    81a4:	8f c1                	pop    %rcx
    81a6:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    81ab:	8f c1                	pop    %rcx
    81ad:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    81b1:	8f c1                	pop    %rcx
    81b3:	89 4c 24 4c          	mov    %ecx,0x4c(%rsp)
    81b7:	8f c1                	pop    %rcx
    81b9:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    81bd:	8f c1                	pop    %rcx
    81bf:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    81c3:	8f c1                	pop    %rcx
    81c5:	48 89 0c 24          	mov    %rcx,(%rsp)
    81c9:	e8 4e b3 ff ff       	call   351c <main+0x351c>
    81ce:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    81d5:	48 8b 4c 24 a0       	mov    -0x60(%rsp),%rcx
    81da:	ff f1                	push   %rcx
    81dc:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    81e3:	48 03 cd             	add    %rbp,%rcx
    81e6:	8f c2                	pop    %rdx
    81e8:	48 89 11             	mov    %rdx,(%rcx)
            if !item {
    81eb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    81ef:	48 85 c9             	test   %rcx,%rcx
    81f2:	40 0f 94 c1          	rex sete %cl
    81f6:	48 0f b6 c9          	movzbq %cl,%rcx
    81fa:	48 83 f9 00          	cmp    $0x0,%rcx
    81fe:	0f 84 6c 00 00 00    	je     8270 <main+0x8270>
                log("Tracker: map_types.set() returned null")
    8204:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    820b:	b9 26 00 00 00       	mov    $0x26,%ecx
    8210:	ff f1                	push   %rcx
    8212:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8219 <main+0x8219>
    8219:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    821e:	8f c1                	pop    %rcx
    8220:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8225:	e8 68 be ff ff       	call   4092 <main+0x4092>
    822a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8231:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8238:	b9 0a 00 00 00       	mov    $0xa,%ecx
    823d:	88 0c 24             	mov    %cl,(%rsp)
    8240:	e8 ac bd ff ff       	call   3ff1 <main+0x3ff1>
    8245:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    824c:	b9 00 00 00 00       	mov    $0x0,%ecx
    8251:	ff f1                	push   %rcx
    8253:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8257:	48 8b c9             	mov    %rcx,%rcx
    825a:	ba 51 00 00 00       	mov    $0x51,%edx
    825f:	48 03 ca             	add    %rdx,%rcx
    8262:	8f c2                	pop    %rdx
    8264:	88 11                	mov    %dl,(%rcx)
                return;
    8266:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    826d:	8f c5                	pop    %rbp
    826f:	c3                   	ret
            }
            item.type = type
    8270:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    8274:	48 0f b6 c9          	movzbq %cl,%rcx
    8278:	ff f1                	push   %rcx
    827a:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    827e:	48 0f b6 c9          	movzbq %cl,%rcx
    8282:	ff f1                	push   %rcx
    8284:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    8288:	48 0f b7 c9          	movzwq %cx,%rcx
    828c:	ff f1                	push   %rcx
    828e:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8295:	48 03 cd             	add    %rbp,%rcx
    8298:	48 8b 11             	mov    (%rcx),%rdx
    829b:	8f c1                	pop    %rcx
    829d:	66 89 0a             	mov    %cx,(%rdx)
    82a0:	8f c1                	pop    %rcx
    82a2:	88 4a 02             	mov    %cl,0x2(%rdx)
    82a5:	8f c1                	pop    %rcx
    82a7:	88 4a 03             	mov    %cl,0x3(%rdx)
            item.allocations.init(400)
    82aa:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    82b1:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    82b8:	48 03 cd             	add    %rbp,%rcx
    82bb:	48 8b 11             	mov    (%rcx),%rdx
    82be:	b9 08 00 00 00       	mov    $0x8,%ecx
    82c3:	48 03 d1             	add    %rcx,%rdx
    82c6:	ff f2                	push   %rdx
    82c8:	b9 90 01 00 00       	mov    $0x190,%ecx
    82cd:	ff f1                	push   %rcx
    82cf:	b9 00 00 00 00       	mov    $0x0,%ecx
    82d4:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
    82d8:	8f c1                	pop    %rcx
    82da:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    82de:	8f c1                	pop    %rcx
    82e0:	48 89 0c 24          	mov    %rcx,(%rsp)
    82e4:	e8 ac a3 ff ff       	call   2695 <main+0x2695>
    82e9:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        }

        value_ptr := item.allocations.find(ptr)
    82f0:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    82f7:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    82fe:	48 03 cd             	add    %rbp,%rcx
    8301:	48 8b 11             	mov    (%rcx),%rdx
    8304:	b9 08 00 00 00       	mov    $0x8,%ecx
    8309:	48 03 d1             	add    %rcx,%rdx
    830c:	ff f2                	push   %rdx
    830e:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8312:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    8317:	8f c1                	pop    %rcx
    8319:	48 89 0c 24          	mov    %rcx,(%rsp)
    831d:	e8 ac b9 ff ff       	call   3cce <main+0x3cce>
    8322:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8329:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    832e:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)

        if value_ptr {
    8332:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8336:	ba 00 00 00 00       	mov    $0x0,%edx
    833b:	48 3b ca             	cmp    %rdx,%rcx
    833e:	40 0f 95 c1          	rex setne %cl
    8342:	48 0f b6 c9          	movzbq %cl,%rcx
    8346:	48 83 f9 00          	cmp    $0x0,%rcx
    834a:	0f 84 04 01 00 00    	je     8454 <main+0x8454>
            if *value_ptr != 0 {
    8350:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8354:	8b 11                	mov    (%rcx),%edx
    8356:	ff f2                	push   %rdx
    8358:	b9 00 00 00 00       	mov    $0x0,%ecx
    835d:	8f c2                	pop    %rdx
    835f:	3b d1                	cmp    %ecx,%edx
    8361:	40 0f 95 c2          	rex setne %dl
    8365:	48 0f b6 d2          	movzbq %dl,%rdx
    8369:	48 83 fa 00          	cmp    $0x0,%rdx
    836d:	0f 84 e1 00 00 00    	je     8454 <main+0x8454>
                LOG_TRACKER("Cannot add allocation ", ptr, ", pointer already exists.")
    8373:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    837a:	b9 09 00 00 00       	mov    $0x9,%ecx
    837f:	ff f1                	push   %rcx
    8381:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8388 <main+0x8388>
    8388:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    838d:	8f c1                	pop    %rcx
    838f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8394:	e8 f9 bc ff ff       	call   4092 <main+0x4092>
    8399:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    83a0:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    83a7:	b9 16 00 00 00       	mov    $0x16,%ecx
    83ac:	ff f1                	push   %rcx
    83ae:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 83b5 <main+0x83b5>
    83b5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    83ba:	8f c1                	pop    %rcx
    83bc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    83c1:	e8 cc bc ff ff       	call   4092 <main+0x4092>
    83c6:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    83cd:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    83d4:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    83d8:	48 89 0c 24          	mov    %rcx,(%rsp)
    83dc:	e8 14 bb ff ff       	call   3ef5 <main+0x3ef5>
    83e1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    83e8:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    83ef:	b9 19 00 00 00       	mov    $0x19,%ecx
    83f4:	ff f1                	push   %rcx
    83f6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 83fd <main+0x83fd>
    83fd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8402:	8f c1                	pop    %rcx
    8404:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8409:	e8 84 bc ff ff       	call   4092 <main+0x4092>
    840e:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8415:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    841c:	b9 0a 00 00 00       	mov    $0xa,%ecx
    8421:	88 0c 24             	mov    %cl,(%rsp)
    8424:	e8 c8 bb ff ff       	call   3ff1 <main+0x3ff1>
    8429:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    8430:	b9 00 00 00 00       	mov    $0x0,%ecx
    8435:	ff f1                	push   %rcx
    8437:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    843b:	48 8b c9             	mov    %rcx,%rcx
    843e:	ba 51 00 00 00       	mov    $0x51,%edx
    8443:	48 03 ca             	add    %rdx,%rcx
    8446:	8f c2                	pop    %rdx
    8448:	88 11                	mov    %dl,(%rcx)
                return;
    844a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8451:	8f c5                	pop    %rbp
    8453:	c3                   	ret
            }
        }
        item.count += size / cast<i32>lang_typesize(type)
    8454:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    845b:	48 03 cd             	add    %rbp,%rcx
    845e:	48 8b 11             	mov    (%rcx),%rdx
    8461:	b9 04 00 00 00       	mov    $0x4,%ecx
    8466:	48 03 d1             	add    %rcx,%rdx
    8469:	8b 0a                	mov    (%rdx),%ecx
    846b:	ff f1                	push   %rcx
    846d:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8470:	48 63 c9             	movslq %ecx,%rcx
    8473:	ff f1                	push   %rcx
    8475:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    847c:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    8480:	48 0f b6 c9          	movzbq %cl,%rcx
    8484:	ff f1                	push   %rcx
    8486:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    848a:	48 0f b6 c9          	movzbq %cl,%rcx
    848e:	ff f1                	push   %rcx
    8490:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    8494:	48 0f b7 c9          	movzwq %cx,%rcx
    8498:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
    849d:	8f c1                	pop    %rcx
    849f:	88 4c 24 0a          	mov    %cl,0xa(%rsp)
    84a3:	8f c1                	pop    %rcx
    84a5:	88 4c 24 03          	mov    %cl,0x3(%rsp)
    84a9:	e8 fa ce ff ff       	call   53a8 <main+0x53a8>
    84ae:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    84b5:	66 8b 4c 24 e0       	mov    -0x20(%rsp),%cx
    84ba:	48 0f b7 c9          	movzwq %cx,%rcx
    84be:	48 0f b7 d1          	movzwq %cx,%rdx
    84c2:	8f c1                	pop    %rcx
    84c4:	48 8b fa             	mov    %rdx,%rdi
    84c7:	48 8b c1             	mov    %rcx,%rax
    84ca:	99                   	cltd
    84cb:	f7 ff                	idiv   %edi
    84cd:	48 8b c8             	mov    %rax,%rcx
    84d0:	48 8b d7             	mov    %rdi,%rdx
    84d3:	8f c2                	pop    %rdx
    84d5:	03 d1                	add    %ecx,%edx
    84d7:	ff f2                	push   %rdx
    84d9:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    84e0:	48 03 cd             	add    %rbp,%rcx
    84e3:	48 8b 11             	mov    (%rcx),%rdx
    84e6:	b9 04 00 00 00       	mov    $0x4,%ecx
    84eb:	48 03 d1             	add    %rcx,%rdx
    84ee:	8f c1                	pop    %rcx
    84f0:	89 0a                	mov    %ecx,(%rdx)
        item.allocations.set(ptr, size)
    84f2:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    84f9:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8500:	48 03 cd             	add    %rbp,%rcx
    8503:	48 8b 11             	mov    (%rcx),%rdx
    8506:	b9 08 00 00 00       	mov    $0x8,%ecx
    850b:	48 03 d1             	add    %rcx,%rdx
    850e:	ff f2                	push   %rdx
    8510:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8514:	ff f1                	push   %rcx
    8516:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8519:	48 63 c9             	movslq %ecx,%rcx
    851c:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    8520:	8f c1                	pop    %rcx
    8522:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    8527:	8f c1                	pop    %rcx
    8529:	48 89 0c 24          	mov    %rcx,(%rsp)
    852d:	e8 87 aa ff ff       	call   2fb9 <main+0x2fb9>
    8532:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        defer disabled = false
    8539:	b9 00 00 00 00       	mov    $0x0,%ecx
    853e:	ff f1                	push   %rcx
    8540:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8544:	48 8b c9             	mov    %rcx,%rcx
    8547:	ba 51 00 00 00       	mov    $0x51,%edx
    854c:	48 03 ca             	add    %rdx,%rcx
    854f:	8f c2                	pop    %rdx
    8551:	88 11                	mov    %dl,(%rcx)
    8553:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    855a:	8f c5                	pop    %rbp
    855c:	c3                   	ret
    }
    // you may not know the allocated size so you don't have to specifify it, however, if you do specify and the sizes don't match, more bugs may be caught.
    fn remove(ptr: void*, size: i32 = 0) {
    855d:	ff f5                	push   %rbp
    855f:	48 8b ec             	mov    %rsp,%rbp
    8562:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
        if !initialized || disabled
    8569:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    856d:	48 8b c9             	mov    %rcx,%rcx
    8570:	48 8a 51 50          	rex.W mov 0x50(%rcx),%dl
    8574:	48 0f b6 d2          	movzbq %dl,%rdx
    8578:	48 85 d2             	test   %rdx,%rdx
    857b:	40 0f 94 c2          	rex sete %dl
    857f:	48 0f b6 d2          	movzbq %dl,%rdx
    8583:	ff f2                	push   %rdx
    8585:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8589:	48 8b c9             	mov    %rcx,%rcx
    858c:	48 8a 51 51          	rex.W mov 0x51(%rcx),%dl
    8590:	48 0f b6 d2          	movzbq %dl,%rdx
    8594:	8f c1                	pop    %rcx
    8596:	48 85 c9             	test   %rcx,%rcx
    8599:	75 0a                	jne    85a5 <main+0x85a5>
    859b:	48 85 d2             	test   %rdx,%rdx
    859e:	75 05                	jne    85a5 <main+0x85a5>
    85a0:	c6 c1 00             	mov    $0x0,%cl
    85a3:	eb 07                	jmp    85ac <main+0x85ac>
    85a5:	c6 c1 01             	mov    $0x1,%cl
    85a8:	48 0f b6 c9          	movzbq %cl,%rcx
    85ac:	48 83 f9 00          	cmp    $0x0,%rcx
    85b0:	0f 84 0a 00 00 00    	je     85c0 <main+0x85c0>
            return;
    85b6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    85bd:	8f c5                	pop    %rbp
    85bf:	c3                   	ret
        disabled = true
    85c0:	b9 01 00 00 00       	mov    $0x1,%ecx
    85c5:	ff f1                	push   %rcx
    85c7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    85cb:	48 8b c9             	mov    %rcx,%rcx
    85ce:	ba 51 00 00 00       	mov    $0x51,%edx
    85d3:	48 03 ca             	add    %rdx,%rcx
    85d6:	8f c2                	pop    %rdx
    85d8:	88 11                	mov    %dl,(%rcx)
        defer disabled = false
        value_ptr := allocations.find(ptr)
    85da:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    85e1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    85e5:	48 8b c9             	mov    %rcx,%rcx
    85e8:	ba 00 00 00 00       	mov    $0x0,%edx
    85ed:	48 03 ca             	add    %rdx,%rcx
    85f0:	ff f1                	push   %rcx
    85f2:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    85f6:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    85fb:	8f c1                	pop    %rcx
    85fd:	48 89 0c 24          	mov    %rcx,(%rsp)
    8601:	e8 c8 b6 ff ff       	call   3cce <main+0x3cce>
    8606:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    860d:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    8612:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
        if !value_ptr {
    8616:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    861a:	48 85 c9             	test   %rcx,%rcx
    861d:	40 0f 94 c1          	rex sete %cl
    8621:	48 0f b6 c9          	movzbq %cl,%rcx
    8625:	48 83 f9 00          	cmp    $0x0,%rcx
    8629:	0f 84 e1 00 00 00    	je     8710 <main+0x8710>
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it doesn't exist.")
    862f:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8636:	b9 09 00 00 00       	mov    $0x9,%ecx
    863b:	ff f1                	push   %rcx
    863d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8644 <main+0x8644>
    8644:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8649:	8f c1                	pop    %rcx
    864b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8650:	e8 3d ba ff ff       	call   4092 <main+0x4092>
    8655:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    865c:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8663:	b9 19 00 00 00       	mov    $0x19,%ecx
    8668:	ff f1                	push   %rcx
    866a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8671 <main+0x8671>
    8671:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8676:	8f c1                	pop    %rcx
    8678:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    867d:	e8 10 ba ff ff       	call   4092 <main+0x4092>
    8682:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8689:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8690:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8694:	48 89 0c 24          	mov    %rcx,(%rsp)
    8698:	e8 58 b8 ff ff       	call   3ef5 <main+0x3ef5>
    869d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    86a4:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    86ab:	b9 13 00 00 00       	mov    $0x13,%ecx
    86b0:	ff f1                	push   %rcx
    86b2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 86b9 <main+0x86b9>
    86b9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    86be:	8f c1                	pop    %rcx
    86c0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    86c5:	e8 c8 b9 ff ff       	call   4092 <main+0x4092>
    86ca:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    86d1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    86d8:	b9 0a 00 00 00       	mov    $0xa,%ecx
    86dd:	88 0c 24             	mov    %cl,(%rsp)
    86e0:	e8 0c b9 ff ff       	call   3ff1 <main+0x3ff1>
    86e5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    86ec:	b9 00 00 00 00       	mov    $0x0,%ecx
    86f1:	ff f1                	push   %rcx
    86f3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    86f7:	48 8b c9             	mov    %rcx,%rcx
    86fa:	ba 51 00 00 00       	mov    $0x51,%edx
    86ff:	48 03 ca             	add    %rdx,%rcx
    8702:	8f c2                	pop    %rdx
    8704:	88 11                	mov    %dl,(%rcx)
            return;
    8706:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    870d:	8f c5                	pop    %rbp
    870f:	c3                   	ret
        }
        if *value_ptr == 0 {
    8710:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    8714:	8b 11                	mov    (%rcx),%edx
    8716:	ff f2                	push   %rdx
    8718:	b9 00 00 00 00       	mov    $0x0,%ecx
    871d:	8f c2                	pop    %rdx
    871f:	3b d1                	cmp    %ecx,%edx
    8721:	40 0f 94 c2          	rex sete %dl
    8725:	48 0f b6 d2          	movzbq %dl,%rdx
    8729:	48 83 fa 00          	cmp    $0x0,%rdx
    872d:	0f 84 e1 00 00 00    	je     8814 <main+0x8814>
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it existed at one point but not anymore.")
    8733:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    873a:	b9 09 00 00 00       	mov    $0x9,%ecx
    873f:	ff f1                	push   %rcx
    8741:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8748 <main+0x8748>
    8748:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    874d:	8f c1                	pop    %rcx
    874f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8754:	e8 39 b9 ff ff       	call   4092 <main+0x4092>
    8759:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8760:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8767:	b9 19 00 00 00       	mov    $0x19,%ecx
    876c:	ff f1                	push   %rcx
    876e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8775 <main+0x8775>
    8775:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    877a:	8f c1                	pop    %rcx
    877c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8781:	e8 0c b9 ff ff       	call   4092 <main+0x4092>
    8786:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    878d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8794:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8798:	48 89 0c 24          	mov    %rcx,(%rsp)
    879c:	e8 54 b7 ff ff       	call   3ef5 <main+0x3ef5>
    87a1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    87a8:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    87af:	b9 2a 00 00 00       	mov    $0x2a,%ecx
    87b4:	ff f1                	push   %rcx
    87b6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 87bd <main+0x87bd>
    87bd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    87c2:	8f c1                	pop    %rcx
    87c4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    87c9:	e8 c4 b8 ff ff       	call   4092 <main+0x4092>
    87ce:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    87d5:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    87dc:	b9 0a 00 00 00       	mov    $0xa,%ecx
    87e1:	88 0c 24             	mov    %cl,(%rsp)
    87e4:	e8 08 b8 ff ff       	call   3ff1 <main+0x3ff1>
    87e9:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    87f0:	b9 00 00 00 00       	mov    $0x0,%ecx
    87f5:	ff f1                	push   %rcx
    87f7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    87fb:	48 8b c9             	mov    %rcx,%rcx
    87fe:	ba 51 00 00 00       	mov    $0x51,%edx
    8803:	48 03 ca             	add    %rdx,%rcx
    8806:	8f c2                	pop    %rdx
    8808:	88 11                	mov    %dl,(%rcx)
            return;
    880a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    8811:	8f c5                	pop    %rbp
    8813:	c3                   	ret
        }
        if size != 0 && *value_ptr != size {
    8814:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8817:	48 63 c9             	movslq %ecx,%rcx
    881a:	ff f1                	push   %rcx
    881c:	b9 00 00 00 00       	mov    $0x0,%ecx
    8821:	8f c2                	pop    %rdx
    8823:	3b d1                	cmp    %ecx,%edx
    8825:	40 0f 95 c2          	rex setne %dl
    8829:	48 0f b6 d2          	movzbq %dl,%rdx
    882d:	ff f2                	push   %rdx
    882f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    8833:	8b 11                	mov    (%rcx),%edx
    8835:	ff f2                	push   %rdx
    8837:	8b 4d 20             	mov    0x20(%rbp),%ecx
    883a:	48 63 c9             	movslq %ecx,%rcx
    883d:	8f c2                	pop    %rdx
    883f:	3b d1                	cmp    %ecx,%edx
    8841:	40 0f 95 c2          	rex setne %dl
    8845:	48 0f b6 d2          	movzbq %dl,%rdx
    8849:	8f c1                	pop    %rcx
    884b:	48 85 c9             	test   %rcx,%rcx
    884e:	74 0a                	je     885a <main+0x885a>
    8850:	48 85 d2             	test   %rdx,%rdx
    8853:	74 05                	je     885a <main+0x885a>
    8855:	c6 c1 01             	mov    $0x1,%cl
    8858:	eb 03                	jmp    885d <main+0x885d>
    885a:	c6 c1 00             	mov    $0x0,%cl
    885d:	48 0f b6 c9          	movzbq %cl,%rcx
    8861:	48 83 f9 00          	cmp    $0x0,%rcx
    8865:	0f 84 57 01 00 00    	je     89c2 <main+0x89c2>
            LOG_TRACKER("When removing allocation ", ptr, ", expected size of allocation didn't match (",size,"!=",*value_ptr,").")
    886b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8872:	b9 09 00 00 00       	mov    $0x9,%ecx
    8877:	ff f1                	push   %rcx
    8879:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8880 <main+0x8880>
    8880:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8885:	8f c1                	pop    %rcx
    8887:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    888c:	e8 01 b8 ff ff       	call   4092 <main+0x4092>
    8891:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8898:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    889f:	b9 19 00 00 00       	mov    $0x19,%ecx
    88a4:	ff f1                	push   %rcx
    88a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 88ad <main+0x88ad>
    88ad:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    88b2:	8f c1                	pop    %rcx
    88b4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    88b9:	e8 d4 b7 ff ff       	call   4092 <main+0x4092>
    88be:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    88c5:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    88cc:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    88d0:	48 89 0c 24          	mov    %rcx,(%rsp)
    88d4:	e8 1c b6 ff ff       	call   3ef5 <main+0x3ef5>
    88d9:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    88e0:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    88e7:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    88ec:	ff f1                	push   %rcx
    88ee:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 88f5 <main+0x88f5>
    88f5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    88fa:	8f c1                	pop    %rcx
    88fc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8901:	e8 8c b7 ff ff       	call   4092 <main+0x4092>
    8906:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    890d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8914:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8917:	48 63 c9             	movslq %ecx,%rcx
    891a:	48 63 d1             	movslq %ecx,%rdx
    891d:	48 89 14 24          	mov    %rdx,(%rsp)
    8921:	e8 d0 b4 ff ff       	call   3df6 <main+0x3df6>
    8926:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    892d:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8934:	b9 02 00 00 00       	mov    $0x2,%ecx
    8939:	ff f1                	push   %rcx
    893b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8942 <main+0x8942>
    8942:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8947:	8f c1                	pop    %rcx
    8949:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    894e:	e8 3f b7 ff ff       	call   4092 <main+0x4092>
    8953:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    895a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8961:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    8965:	8b 11                	mov    (%rcx),%edx
    8967:	48 63 ca             	movslq %edx,%rcx
    896a:	48 89 0c 24          	mov    %rcx,(%rsp)
    896e:	e8 83 b4 ff ff       	call   3df6 <main+0x3df6>
    8973:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    897a:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8981:	b9 02 00 00 00       	mov    $0x2,%ecx
    8986:	ff f1                	push   %rcx
    8988:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 898f <main+0x898f>
    898f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8994:	8f c1                	pop    %rcx
    8996:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    899b:	e8 f2 b6 ff ff       	call   4092 <main+0x4092>
    89a0:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    89a7:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    89ae:	b9 0a 00 00 00       	mov    $0xa,%ecx
    89b3:	88 0c 24             	mov    %cl,(%rsp)
    89b6:	e8 36 b6 ff ff       	call   3ff1 <main+0x3ff1>
    89bb:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        }
        allocations.set(ptr, 0) // we set to 0 instead of removing because it's useful to know if pointer existed at one point in time
    89c2:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    89c9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    89cd:	48 8b c9             	mov    %rcx,%rcx
    89d0:	ba 00 00 00 00       	mov    $0x0,%edx
    89d5:	48 03 ca             	add    %rdx,%rcx
    89d8:	ff f1                	push   %rcx
    89da:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    89de:	ff f1                	push   %rcx
    89e0:	b9 00 00 00 00       	mov    $0x0,%ecx
    89e5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    89e9:	8f c1                	pop    %rcx
    89eb:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    89f0:	8f c1                	pop    %rcx
    89f2:	48 89 0c 24          	mov    %rcx,(%rsp)
    89f6:	e8 be a5 ff ff       	call   2fb9 <main+0x2fb9>
    89fb:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        defer disabled = false
    8a02:	b9 00 00 00 00       	mov    $0x0,%ecx
    8a07:	ff f1                	push   %rcx
    8a09:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8a0d:	48 8b c9             	mov    %rcx,%rcx
    8a10:	ba 51 00 00 00       	mov    $0x51,%edx
    8a15:	48 03 ca             	add    %rdx,%rcx
    8a18:	8f c2                	pop    %rdx
    8a1a:	88 11                	mov    %dl,(%rcx)
    8a1c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    8a23:	8f c5                	pop    %rbp
    8a25:	c3                   	ret
        // allocations.remove(ptr)
    }
   
    // you may not know the allocated size so you don't have to specifify it, however, if you do specify and the sizes don't match, more bugs may be caught.
    fn remove(ptr: void*, size: i32, type: lang_TypeId) {
    8a26:	ff f5                	push   %rbp
    8a28:	48 8b ec             	mov    %rsp,%rbp
    8a2b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        if !initialized || disabled
    8a32:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8a36:	48 8b c9             	mov    %rcx,%rcx
    8a39:	48 8a 51 50          	rex.W mov 0x50(%rcx),%dl
    8a3d:	48 0f b6 d2          	movzbq %dl,%rdx
    8a41:	48 85 d2             	test   %rdx,%rdx
    8a44:	40 0f 94 c2          	rex sete %dl
    8a48:	48 0f b6 d2          	movzbq %dl,%rdx
    8a4c:	ff f2                	push   %rdx
    8a4e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8a52:	48 8b c9             	mov    %rcx,%rcx
    8a55:	48 8a 51 51          	rex.W mov 0x51(%rcx),%dl
    8a59:	48 0f b6 d2          	movzbq %dl,%rdx
    8a5d:	8f c1                	pop    %rcx
    8a5f:	48 85 c9             	test   %rcx,%rcx
    8a62:	75 0a                	jne    8a6e <main+0x8a6e>
    8a64:	48 85 d2             	test   %rdx,%rdx
    8a67:	75 05                	jne    8a6e <main+0x8a6e>
    8a69:	c6 c1 00             	mov    $0x0,%cl
    8a6c:	eb 07                	jmp    8a75 <main+0x8a75>
    8a6e:	c6 c1 01             	mov    $0x1,%cl
    8a71:	48 0f b6 c9          	movzbq %cl,%rcx
    8a75:	48 83 f9 00          	cmp    $0x0,%rcx
    8a79:	0f 84 0a 00 00 00    	je     8a89 <main+0x8a89>
            return;
    8a7f:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8a86:	8f c5                	pop    %rbp
    8a88:	c3                   	ret
        disabled = true
    8a89:	b9 01 00 00 00       	mov    $0x1,%ecx
    8a8e:	ff f1                	push   %rcx
    8a90:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8a94:	48 8b c9             	mov    %rcx,%rcx
    8a97:	ba 51 00 00 00       	mov    $0x51,%edx
    8a9c:	48 03 ca             	add    %rdx,%rcx
    8a9f:	8f c2                	pop    %rdx
    8aa1:	88 11                	mov    %dl,(%rcx)
        defer disabled = false

        hashed_type := hash(type)
    8aa3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8aaa:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    8aae:	48 0f b6 c9          	movzbq %cl,%rcx
    8ab2:	ff f1                	push   %rcx
    8ab4:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    8ab8:	48 0f b6 c9          	movzbq %cl,%rcx
    8abc:	ff f1                	push   %rcx
    8abe:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    8ac2:	48 0f b7 c9          	movzwq %cx,%rcx
    8ac6:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
    8acb:	8f c1                	pop    %rcx
    8acd:	88 4c 24 0a          	mov    %cl,0xa(%rsp)
    8ad1:	8f c1                	pop    %rcx
    8ad3:	88 4c 24 03          	mov    %cl,0x3(%rsp)
    8ad7:	e8 ce f2 ff ff       	call   7daa <main+0x7daa>
    8adc:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    8ae3:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
    8ae7:	8b c9                	mov    %ecx,%ecx
    8ae9:	89 4d f8             	mov    %ecx,-0x8(%rbp)
        item := map_types.find(hashed_type)
    8aec:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8af3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8af7:	48 8b c9             	mov    %rcx,%rcx
    8afa:	ba 28 00 00 00       	mov    $0x28,%edx
    8aff:	48 03 ca             	add    %rdx,%rcx
    8b02:	ff f1                	push   %rcx
    8b04:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    8b07:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    8b0b:	8f c1                	pop    %rcx
    8b0d:	48 89 0c 24          	mov    %rcx,(%rsp)
    8b11:	e8 4c b2 ff ff       	call   3d62 <main+0x3d62>
    8b16:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8b1d:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    8b22:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
        if !item {
    8b26:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8b2a:	48 85 c9             	test   %rcx,%rcx
    8b2d:	40 0f 94 c1          	rex sete %cl
    8b31:	48 0f b6 c9          	movzbq %cl,%rcx
    8b35:	48 83 f9 00          	cmp    $0x0,%rcx
    8b39:	0f 84 c8 01 00 00    	je     8d07 <main+0x8d07>
            item = map_types.set(hashed_type, MemoryTracker_Item{})
    8b3f:	48 81 ec 48 00 00 00 	sub    $0x48,%rsp
    8b46:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8b4a:	48 8b c9             	mov    %rcx,%rcx
    8b4d:	ba 28 00 00 00       	mov    $0x28,%edx
    8b52:	48 03 ca             	add    %rdx,%rcx
    8b55:	ff f1                	push   %rcx
    8b57:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    8b5a:	ff f1                	push   %rcx
    8b5c:	48 33 d2             	xor    %rdx,%rdx
    8b5f:	ff f2                	push   %rdx
    8b61:	48 33 d2             	xor    %rdx,%rdx
    8b64:	ff f2                	push   %rdx
    8b66:	48 33 d2             	xor    %rdx,%rdx
    8b69:	ff f2                	push   %rdx
    8b6b:	48 33 d2             	xor    %rdx,%rdx
    8b6e:	ff f2                	push   %rdx
    8b70:	48 33 d2             	xor    %rdx,%rdx
    8b73:	ff f2                	push   %rdx
    8b75:	48 33 d2             	xor    %rdx,%rdx
    8b78:	ff f2                	push   %rdx
    8b7a:	48 33 d2             	xor    %rdx,%rdx
    8b7d:	ff f2                	push   %rdx
    8b7f:	48 33 d2             	xor    %rdx,%rdx
    8b82:	ff f2                	push   %rdx
    8b84:	48 33 d2             	xor    %rdx,%rdx
    8b87:	ff f2                	push   %rdx
    8b89:	48 33 d2             	xor    %rdx,%rdx
    8b8c:	ff f2                	push   %rdx
    8b8e:	48 33 d2             	xor    %rdx,%rdx
    8b91:	66 89 54 24 70       	mov    %dx,0x70(%rsp)
    8b96:	8f c1                	pop    %rcx
    8b98:	88 4c 24 6a          	mov    %cl,0x6a(%rsp)
    8b9c:	8f c1                	pop    %rcx
    8b9e:	88 4c 24 63          	mov    %cl,0x63(%rsp)
    8ba2:	8f c1                	pop    %rcx
    8ba4:	89 4c 24 5c          	mov    %ecx,0x5c(%rsp)
    8ba8:	8f c1                	pop    %rcx
    8baa:	48 89 4c 24 58       	mov    %rcx,0x58(%rsp)
    8baf:	8f c1                	pop    %rcx
    8bb1:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
    8bb5:	8f c1                	pop    %rcx
    8bb7:	89 4c 24 54          	mov    %ecx,0x54(%rsp)
    8bbb:	8f c1                	pop    %rcx
    8bbd:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    8bc2:	8f c1                	pop    %rcx
    8bc4:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    8bc8:	8f c1                	pop    %rcx
    8bca:	89 4c 24 4c          	mov    %ecx,0x4c(%rsp)
    8bce:	8f c1                	pop    %rcx
    8bd0:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    8bd4:	8f c1                	pop    %rcx
    8bd6:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    8bda:	8f c1                	pop    %rcx
    8bdc:	48 89 0c 24          	mov    %rcx,(%rsp)
    8be0:	e8 37 a9 ff ff       	call   351c <main+0x351c>
    8be5:	48 81 c4 48 00 00 00 	add    $0x48,%rsp
    8bec:	48 8b 4c 24 a0       	mov    -0x60(%rsp),%rcx
    8bf1:	ff f1                	push   %rcx
    8bf3:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8bfa:	48 03 cd             	add    %rbp,%rcx
    8bfd:	8f c2                	pop    %rdx
    8bff:	48 89 11             	mov    %rdx,(%rcx)
            if !item {
    8c02:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    8c06:	48 85 c9             	test   %rcx,%rcx
    8c09:	40 0f 94 c1          	rex sete %cl
    8c0d:	48 0f b6 c9          	movzbq %cl,%rcx
    8c11:	48 83 f9 00          	cmp    $0x0,%rcx
    8c15:	0f 84 6c 00 00 00    	je     8c87 <main+0x8c87>
                log("Tracker: map_types.set() returned null")
    8c1b:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8c22:	b9 26 00 00 00       	mov    $0x26,%ecx
    8c27:	ff f1                	push   %rcx
    8c29:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8c30 <main+0x8c30>
    8c30:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8c35:	8f c1                	pop    %rcx
    8c37:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8c3c:	e8 51 b4 ff ff       	call   4092 <main+0x4092>
    8c41:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8c48:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8c4f:	b9 0a 00 00 00       	mov    $0xa,%ecx
    8c54:	88 0c 24             	mov    %cl,(%rsp)
    8c57:	e8 95 b3 ff ff       	call   3ff1 <main+0x3ff1>
    8c5c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    8c63:	b9 00 00 00 00       	mov    $0x0,%ecx
    8c68:	ff f1                	push   %rcx
    8c6a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8c6e:	48 8b c9             	mov    %rcx,%rcx
    8c71:	ba 51 00 00 00       	mov    $0x51,%edx
    8c76:	48 03 ca             	add    %rdx,%rcx
    8c79:	8f c2                	pop    %rdx
    8c7b:	88 11                	mov    %dl,(%rcx)
                return;
    8c7d:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8c84:	8f c5                	pop    %rbp
    8c86:	c3                   	ret
            }
            item.type = type
    8c87:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    8c8b:	48 0f b6 c9          	movzbq %cl,%rcx
    8c8f:	ff f1                	push   %rcx
    8c91:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    8c95:	48 0f b6 c9          	movzbq %cl,%rcx
    8c99:	ff f1                	push   %rcx
    8c9b:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    8c9f:	48 0f b7 c9          	movzwq %cx,%rcx
    8ca3:	ff f1                	push   %rcx
    8ca5:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8cac:	48 03 cd             	add    %rbp,%rcx
    8caf:	48 8b 11             	mov    (%rcx),%rdx
    8cb2:	8f c1                	pop    %rcx
    8cb4:	66 89 0a             	mov    %cx,(%rdx)
    8cb7:	8f c1                	pop    %rcx
    8cb9:	88 4a 02             	mov    %cl,0x2(%rdx)
    8cbc:	8f c1                	pop    %rcx
    8cbe:	88 4a 03             	mov    %cl,0x3(%rdx)
            item.allocations.init(400)
    8cc1:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8cc8:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8ccf:	48 03 cd             	add    %rbp,%rcx
    8cd2:	48 8b 11             	mov    (%rcx),%rdx
    8cd5:	b9 08 00 00 00       	mov    $0x8,%ecx
    8cda:	48 03 d1             	add    %rcx,%rdx
    8cdd:	ff f2                	push   %rdx
    8cdf:	b9 90 01 00 00       	mov    $0x190,%ecx
    8ce4:	ff f1                	push   %rcx
    8ce6:	b9 00 00 00 00       	mov    $0x0,%ecx
    8ceb:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
    8cef:	8f c1                	pop    %rcx
    8cf1:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    8cf5:	8f c1                	pop    %rcx
    8cf7:	48 89 0c 24          	mov    %rcx,(%rsp)
    8cfb:	e8 95 99 ff ff       	call   2695 <main+0x2695>
    8d00:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        }

        value_ptr := item.allocations.find(ptr)
    8d07:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8d0e:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    8d15:	48 03 cd             	add    %rbp,%rcx
    8d18:	48 8b 11             	mov    (%rcx),%rdx
    8d1b:	b9 08 00 00 00       	mov    $0x8,%ecx
    8d20:	48 03 d1             	add    %rcx,%rdx
    8d23:	ff f2                	push   %rdx
    8d25:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8d29:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    8d2e:	8f c1                	pop    %rcx
    8d30:	48 89 0c 24          	mov    %rcx,(%rsp)
    8d34:	e8 95 af ff ff       	call   3cce <main+0x3cce>
    8d39:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8d40:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
    8d45:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
        if !value_ptr {
    8d49:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8d4d:	48 85 c9             	test   %rcx,%rcx
    8d50:	40 0f 94 c1          	rex sete %cl
    8d54:	48 0f b6 c9          	movzbq %cl,%rcx
    8d58:	48 83 f9 00          	cmp    $0x0,%rcx
    8d5c:	0f 84 e1 00 00 00    	je     8e43 <main+0x8e43>
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it doesn't exist.")
    8d62:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8d69:	b9 09 00 00 00       	mov    $0x9,%ecx
    8d6e:	ff f1                	push   %rcx
    8d70:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8d77 <main+0x8d77>
    8d77:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8d7c:	8f c1                	pop    %rcx
    8d7e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8d83:	e8 0a b3 ff ff       	call   4092 <main+0x4092>
    8d88:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8d8f:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8d96:	b9 19 00 00 00       	mov    $0x19,%ecx
    8d9b:	ff f1                	push   %rcx
    8d9d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8da4 <main+0x8da4>
    8da4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8da9:	8f c1                	pop    %rcx
    8dab:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8db0:	e8 dd b2 ff ff       	call   4092 <main+0x4092>
    8db5:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8dbc:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8dc3:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8dc7:	48 89 0c 24          	mov    %rcx,(%rsp)
    8dcb:	e8 25 b1 ff ff       	call   3ef5 <main+0x3ef5>
    8dd0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    8dd7:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8dde:	b9 13 00 00 00       	mov    $0x13,%ecx
    8de3:	ff f1                	push   %rcx
    8de5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8dec <main+0x8dec>
    8dec:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8df1:	8f c1                	pop    %rcx
    8df3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8df8:	e8 95 b2 ff ff       	call   4092 <main+0x4092>
    8dfd:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8e04:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8e0b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    8e10:	88 0c 24             	mov    %cl,(%rsp)
    8e13:	e8 d9 b1 ff ff       	call   3ff1 <main+0x3ff1>
    8e18:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    8e1f:	b9 00 00 00 00       	mov    $0x0,%ecx
    8e24:	ff f1                	push   %rcx
    8e26:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8e2a:	48 8b c9             	mov    %rcx,%rcx
    8e2d:	ba 51 00 00 00       	mov    $0x51,%edx
    8e32:	48 03 ca             	add    %rdx,%rcx
    8e35:	8f c2                	pop    %rdx
    8e37:	88 11                	mov    %dl,(%rcx)
            return;
    8e39:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8e40:	8f c5                	pop    %rbp
    8e42:	c3                   	ret
        }
        if *value_ptr == 0 {
    8e43:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8e47:	8b 11                	mov    (%rcx),%edx
    8e49:	ff f2                	push   %rdx
    8e4b:	b9 00 00 00 00       	mov    $0x0,%ecx
    8e50:	8f c2                	pop    %rdx
    8e52:	3b d1                	cmp    %ecx,%edx
    8e54:	40 0f 94 c2          	rex sete %dl
    8e58:	48 0f b6 d2          	movzbq %dl,%rdx
    8e5c:	48 83 fa 00          	cmp    $0x0,%rdx
    8e60:	0f 84 e1 00 00 00    	je     8f47 <main+0x8f47>
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it existed at one point but not anymore.")
    8e66:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8e6d:	b9 09 00 00 00       	mov    $0x9,%ecx
    8e72:	ff f1                	push   %rcx
    8e74:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8e7b <main+0x8e7b>
    8e7b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8e80:	8f c1                	pop    %rcx
    8e82:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8e87:	e8 06 b2 ff ff       	call   4092 <main+0x4092>
    8e8c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8e93:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8e9a:	b9 19 00 00 00       	mov    $0x19,%ecx
    8e9f:	ff f1                	push   %rcx
    8ea1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8ea8 <main+0x8ea8>
    8ea8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8ead:	8f c1                	pop    %rcx
    8eaf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8eb4:	e8 d9 b1 ff ff       	call   4092 <main+0x4092>
    8eb9:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8ec0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8ec7:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    8ecb:	48 89 0c 24          	mov    %rcx,(%rsp)
    8ecf:	e8 21 b0 ff ff       	call   3ef5 <main+0x3ef5>
    8ed4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    8edb:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8ee2:	b9 2a 00 00 00       	mov    $0x2a,%ecx
    8ee7:	ff f1                	push   %rcx
    8ee9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8ef0 <main+0x8ef0>
    8ef0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8ef5:	8f c1                	pop    %rcx
    8ef7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8efc:	e8 91 b1 ff ff       	call   4092 <main+0x4092>
    8f01:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8f08:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8f0f:	b9 0a 00 00 00       	mov    $0xa,%ecx
    8f14:	88 0c 24             	mov    %cl,(%rsp)
    8f17:	e8 d5 b0 ff ff       	call   3ff1 <main+0x3ff1>
    8f1c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        defer disabled = false
    8f23:	b9 00 00 00 00       	mov    $0x0,%ecx
    8f28:	ff f1                	push   %rcx
    8f2a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    8f2e:	48 8b c9             	mov    %rcx,%rcx
    8f31:	ba 51 00 00 00       	mov    $0x51,%edx
    8f36:	48 03 ca             	add    %rdx,%rcx
    8f39:	8f c2                	pop    %rdx
    8f3b:	88 11                	mov    %dl,(%rcx)
            return;
    8f3d:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8f44:	8f c5                	pop    %rbp
    8f46:	c3                   	ret
        }
        if size != 0 && *value_ptr != size {
    8f47:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8f4a:	48 63 c9             	movslq %ecx,%rcx
    8f4d:	ff f1                	push   %rcx
    8f4f:	b9 00 00 00 00       	mov    $0x0,%ecx
    8f54:	8f c2                	pop    %rdx
    8f56:	3b d1                	cmp    %ecx,%edx
    8f58:	40 0f 95 c2          	rex setne %dl
    8f5c:	48 0f b6 d2          	movzbq %dl,%rdx
    8f60:	ff f2                	push   %rdx
    8f62:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    8f66:	8b 11                	mov    (%rcx),%edx
    8f68:	ff f2                	push   %rdx
    8f6a:	8b 4d 20             	mov    0x20(%rbp),%ecx
    8f6d:	48 63 c9             	movslq %ecx,%rcx
    8f70:	8f c2                	pop    %rdx
    8f72:	3b d1                	cmp    %ecx,%edx
    8f74:	40 0f 95 c2          	rex setne %dl
    8f78:	48 0f b6 d2          	movzbq %dl,%rdx
    8f7c:	8f c1                	pop    %rcx
    8f7e:	48 85 c9             	test   %rcx,%rcx
    8f81:	74 0a                	je     8f8d <main+0x8f8d>
    8f83:	48 85 d2             	test   %rdx,%rdx
    8f86:	74 05                	je     8f8d <main+0x8f8d>
    8f88:	c6 c1 01             	mov    $0x1,%cl
    8f8b:	eb 03                	jmp    8f90 <main+0x8f90>
    8f8d:	c6 c1 00             	mov    $0x0,%cl
    8f90:	48 0f b6 c9          	movzbq %cl,%rcx
    8f94:	48 83 f9 00          	cmp    $0x0,%rcx
    8f98:	0f 84 57 01 00 00    	je     90f5 <main+0x90f5>
            LOG_TRACKER("When removing allocation ", ptr, ", expected size of allocation didn't match (",size,"!=",*value_ptr,").")
    8f9e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8fa5:	b9 09 00 00 00       	mov    $0x9,%ecx
    8faa:	ff f1                	push   %rcx
    8fac:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8fb3 <main+0x8fb3>
    8fb3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8fb8:	8f c1                	pop    %rcx
    8fba:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8fbf:	e8 ce b0 ff ff       	call   4092 <main+0x4092>
    8fc4:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8fcb:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    8fd2:	b9 19 00 00 00       	mov    $0x19,%ecx
    8fd7:	ff f1                	push   %rcx
    8fd9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 8fe0 <main+0x8fe0>
    8fe0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8fe5:	8f c1                	pop    %rcx
    8fe7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    8fec:	e8 a1 b0 ff ff       	call   4092 <main+0x4092>
    8ff1:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    8ff8:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    8fff:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    9003:	48 89 0c 24          	mov    %rcx,(%rsp)
    9007:	e8 e9 ae ff ff       	call   3ef5 <main+0x3ef5>
    900c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    9013:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    901a:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    901f:	ff f1                	push   %rcx
    9021:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9028 <main+0x9028>
    9028:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    902d:	8f c1                	pop    %rcx
    902f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9034:	e8 59 b0 ff ff       	call   4092 <main+0x4092>
    9039:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    9040:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    9047:	8b 4d 20             	mov    0x20(%rbp),%ecx
    904a:	48 63 c9             	movslq %ecx,%rcx
    904d:	48 63 d1             	movslq %ecx,%rdx
    9050:	48 89 14 24          	mov    %rdx,(%rsp)
    9054:	e8 9d ad ff ff       	call   3df6 <main+0x3df6>
    9059:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    9060:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    9067:	b9 02 00 00 00       	mov    $0x2,%ecx
    906c:	ff f1                	push   %rcx
    906e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9075 <main+0x9075>
    9075:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    907a:	8f c1                	pop    %rcx
    907c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9081:	e8 0c b0 ff ff       	call   4092 <main+0x4092>
    9086:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    908d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    9094:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9098:	8b 11                	mov    (%rcx),%edx
    909a:	48 63 ca             	movslq %edx,%rcx
    909d:	48 89 0c 24          	mov    %rcx,(%rsp)
    90a1:	e8 50 ad ff ff       	call   3df6 <main+0x3df6>
    90a6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    90ad:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    90b4:	b9 02 00 00 00       	mov    $0x2,%ecx
    90b9:	ff f1                	push   %rcx
    90bb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 90c2 <main+0x90c2>
    90c2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    90c7:	8f c1                	pop    %rcx
    90c9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    90ce:	e8 bf af ff ff       	call   4092 <main+0x4092>
    90d3:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    90da:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    90e1:	b9 0a 00 00 00       	mov    $0xa,%ecx
    90e6:	88 0c 24             	mov    %cl,(%rsp)
    90e9:	e8 03 af ff ff       	call   3ff1 <main+0x3ff1>
    90ee:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        }
        item.count -= size / cast<i32>lang_typesize(type)
    90f5:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    90fc:	48 03 cd             	add    %rbp,%rcx
    90ff:	48 8b 11             	mov    (%rcx),%rdx
    9102:	b9 04 00 00 00       	mov    $0x4,%ecx
    9107:	48 03 d1             	add    %rcx,%rdx
    910a:	8b 0a                	mov    (%rdx),%ecx
    910c:	ff f1                	push   %rcx
    910e:	8b 4d 20             	mov    0x20(%rbp),%ecx
    9111:	48 63 c9             	movslq %ecx,%rcx
    9114:	ff f1                	push   %rcx
    9116:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    911d:	48 8a 4d 27          	rex.W mov 0x27(%rbp),%cl
    9121:	48 0f b6 c9          	movzbq %cl,%rcx
    9125:	ff f1                	push   %rcx
    9127:	48 8a 4d 26          	rex.W mov 0x26(%rbp),%cl
    912b:	48 0f b6 c9          	movzbq %cl,%rcx
    912f:	ff f1                	push   %rcx
    9131:	66 8b 4d 24          	mov    0x24(%rbp),%cx
    9135:	48 0f b7 c9          	movzwq %cx,%rcx
    9139:	66 89 4c 24 10       	mov    %cx,0x10(%rsp)
    913e:	8f c1                	pop    %rcx
    9140:	88 4c 24 0a          	mov    %cl,0xa(%rsp)
    9144:	8f c1                	pop    %rcx
    9146:	88 4c 24 03          	mov    %cl,0x3(%rsp)
    914a:	e8 59 c2 ff ff       	call   53a8 <main+0x53a8>
    914f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    9156:	66 8b 4c 24 e0       	mov    -0x20(%rsp),%cx
    915b:	48 0f b7 c9          	movzwq %cx,%rcx
    915f:	48 0f b7 d1          	movzwq %cx,%rdx
    9163:	8f c1                	pop    %rcx
    9165:	48 8b fa             	mov    %rdx,%rdi
    9168:	48 8b c1             	mov    %rcx,%rax
    916b:	99                   	cltd
    916c:	f7 ff                	idiv   %edi
    916e:	48 8b c8             	mov    %rax,%rcx
    9171:	48 8b d7             	mov    %rdi,%rdx
    9174:	8f c2                	pop    %rdx
    9176:	2b d1                	sub    %ecx,%edx
    9178:	ff f2                	push   %rdx
    917a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    9181:	48 03 cd             	add    %rbp,%rcx
    9184:	48 8b 11             	mov    (%rcx),%rdx
    9187:	b9 04 00 00 00       	mov    $0x4,%ecx
    918c:	48 03 d1             	add    %rcx,%rdx
    918f:	8f c1                	pop    %rcx
    9191:	89 0a                	mov    %ecx,(%rdx)
        item.allocations.set(ptr, 0) // we set to 0 instead of removing because it's useful to know if pointer existed at one point in time
    9193:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    919a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    91a1:	48 03 cd             	add    %rbp,%rcx
    91a4:	48 8b 11             	mov    (%rcx),%rdx
    91a7:	b9 08 00 00 00       	mov    $0x8,%ecx
    91ac:	48 03 d1             	add    %rcx,%rdx
    91af:	ff f2                	push   %rdx
    91b1:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    91b5:	ff f1                	push   %rcx
    91b7:	b9 00 00 00 00       	mov    $0x0,%ecx
    91bc:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    91c0:	8f c1                	pop    %rcx
    91c2:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    91c7:	8f c1                	pop    %rcx
    91c9:	48 89 0c 24          	mov    %rcx,(%rsp)
    91cd:	e8 e7 9d ff ff       	call   2fb9 <main+0x2fb9>
    91d2:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        defer disabled = false
    91d9:	b9 00 00 00 00       	mov    $0x0,%ecx
    91de:	ff f1                	push   %rcx
    91e0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    91e4:	48 8b c9             	mov    %rcx,%rcx
    91e7:	ba 51 00 00 00       	mov    $0x51,%edx
    91ec:	48 03 ca             	add    %rdx,%rcx
    91ef:	8f c2                	pop    %rdx
    91f1:	88 11                	mov    %dl,(%rcx)
    91f3:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    91fa:	8f c5                	pop    %rbp
    91fc:	c3                   	ret
    // TODO: Anything else to destroy? glfwTerminate if we only have one window left?
    
    glfwDestroyWindow(window.glfw_window)
    Free(window)
}
fn CreateWindow(width: i32, height: i32, title: char[] = "The beginning of something new") -> WindowContext* {
    91fd:	ff f5                	push   %rbp
    91ff:	48 8b ec             	mov    %rsp,%rbp
    9202:	48 81 ec 70 00 00 00 	sub    $0x70,%rsp
    yes := glfwInit();
    9209:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9210:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9216 <main+0x9216>
    9216:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    921d:	48 63 c8             	movslq %eax,%rcx
    9220:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    if !yes {
    9223:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    9226:	48 85 c9             	test   %rcx,%rcx
    9229:	40 0f 94 c1          	rex sete %cl
    922d:	48 0f b6 c9          	movzbq %cl,%rcx
    9231:	48 83 f9 00          	cmp    $0x0,%rcx
    9235:	0f 84 5b 00 00 00    	je     9296 <main+0x9296>
        log("glfwInit failed");
    923b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9242:	b9 0f 00 00 00       	mov    $0xf,%ecx
    9247:	ff f1                	push   %rcx
    9249:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9250 <main+0x9250>
    9250:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9255:	8f c1                	pop    %rcx
    9257:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    925c:	e8 31 ae ff ff       	call   4092 <main+0x4092>
    9261:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9268:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    926f:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9274:	88 0c 24             	mov    %cl,(%rsp)
    9277:	e8 75 ad ff ff       	call   3ff1 <main+0x3ff1>
    927c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        return null;
    9283:	b9 00 00 00 00       	mov    $0x0,%ecx
    9288:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    928c:	48 81 c4 70 00 00 00 	add    $0x70,%rsp
    9293:	8f c5                	pop    %rbp
    9295:	c3                   	ret
    }
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    9296:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    929d:	b9 02 20 02 00       	mov    $0x22002,%ecx
    92a2:	ff f1                	push   %rcx
    92a4:	b9 04 00 00 00       	mov    $0x4,%ecx
    92a9:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    92ad:	8f c1                	pop    %rcx
    92af:	89 0c 24             	mov    %ecx,(%rsp)
    92b2:	33 c9                	xor    %ecx,%ecx
    92b4:	8b 0c 24             	mov    (%rsp),%ecx
    92b7:	33 d2                	xor    %edx,%edx
    92b9:	8b 54 24 08          	mov    0x8(%rsp),%edx
    92bd:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 92c3 <main+0x92c3>
    92c3:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    92ca:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    92d1:	b9 03 20 02 00       	mov    $0x22003,%ecx
    92d6:	ff f1                	push   %rcx
    92d8:	b9 03 00 00 00       	mov    $0x3,%ecx
    92dd:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    92e1:	8f c1                	pop    %rcx
    92e3:	89 0c 24             	mov    %ecx,(%rsp)
    92e6:	33 c9                	xor    %ecx,%ecx
    92e8:	8b 0c 24             	mov    (%rsp),%ecx
    92eb:	33 d2                	xor    %edx,%edx
    92ed:	8b 54 24 08          	mov    0x8(%rsp),%edx
    92f1:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 92f7 <main+0x92f7>
    92f7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    92fe:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9305:	b9 08 20 02 00       	mov    $0x22008,%ecx
    930a:	ff f1                	push   %rcx
    930c:	b9 01 20 03 00       	mov    $0x32001,%ecx
    9311:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    9315:	8f c1                	pop    %rcx
    9317:	89 0c 24             	mov    %ecx,(%rsp)
    931a:	33 c9                	xor    %ecx,%ecx
    931c:	8b 0c 24             	mov    (%rsp),%ecx
    931f:	33 d2                	xor    %edx,%edx
    9321:	8b 54 24 08          	mov    0x8(%rsp),%edx
    9325:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 932b <main+0x932b>
    932b:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    //     width =  mode.width
    //     height = mode.height
    //     glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    // }

    glfw_window := glfwCreateWindow(width, height, title.ptr, null, null);
    9332:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    9339:	8b 4d 10             	mov    0x10(%rbp),%ecx
    933c:	48 63 c9             	movslq %ecx,%rcx
    933f:	ff f1                	push   %rcx
    9341:	8b 4d 14             	mov    0x14(%rbp),%ecx
    9344:	48 63 c9             	movslq %ecx,%rcx
    9347:	ff f1                	push   %rcx
    9349:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    9350:	48 03 cd             	add    %rbp,%rcx
    9353:	48 8b 11             	mov    (%rcx),%rdx
    9356:	ff f2                	push   %rdx
    9358:	b9 00 00 00 00       	mov    $0x0,%ecx
    935d:	ff f1                	push   %rcx
    935f:	b9 00 00 00 00       	mov    $0x0,%ecx
    9364:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    9369:	8f c1                	pop    %rcx
    936b:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    9370:	8f c1                	pop    %rcx
    9372:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    9377:	8f c1                	pop    %rcx
    9379:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    937d:	8f c1                	pop    %rcx
    937f:	89 0c 24             	mov    %ecx,(%rsp)
    9382:	33 c9                	xor    %ecx,%ecx
    9384:	8b 0c 24             	mov    (%rsp),%ecx
    9387:	33 d2                	xor    %edx,%edx
    9389:	8b 54 24 08          	mov    0x8(%rsp),%edx
    938d:	45 33 c0             	xor    %r8d,%r8d
    9390:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    9395:	45 33 c9             	xor    %r9d,%r9d
    9398:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    939d:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 93a3 <main+0x93a3>
    93a3:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    93aa:	48 8b c8             	mov    %rax,%rcx
    93ad:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    if !glfw_window {
    93b1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    93b5:	48 85 c9             	test   %rcx,%rcx
    93b8:	40 0f 94 c1          	rex sete %cl
    93bc:	48 0f b6 c9          	movzbq %cl,%rcx
    93c0:	48 83 f9 00          	cmp    $0x0,%rcx
    93c4:	0f 84 6f 00 00 00    	je     9439 <main+0x9439>
        log("window failed");
    93ca:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    93d1:	b9 0d 00 00 00       	mov    $0xd,%ecx
    93d6:	ff f1                	push   %rcx
    93d8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 93df <main+0x93df>
    93df:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    93e4:	8f c1                	pop    %rcx
    93e6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    93eb:	e8 a2 ac ff ff       	call   4092 <main+0x4092>
    93f0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    93f7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    93fe:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9403:	88 0c 24             	mov    %cl,(%rsp)
    9406:	e8 e6 ab ff ff       	call   3ff1 <main+0x3ff1>
    940b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        glfwTerminate();
    9412:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9419:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 941f <main+0x941f>
    941f:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        return null
    9426:	b9 00 00 00 00       	mov    $0x0,%ecx
    942b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    942f:	48 81 c4 70 00 00 00 	add    $0x70,%rsp
    9436:	8f c5                	pop    %rbp
    9438:	c3                   	ret
    }

    // glfwSetWindowPos(glfw_window, 0, 0)

    glfwMakeContextCurrent(glfw_window)
    9439:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9440:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9444:	48 89 0c 24          	mov    %rcx,(%rsp)
    9448:	33 c9                	xor    %ecx,%ecx
    944a:	48 8b 0c 24          	mov    (%rsp),%rcx
    944e:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9454 <main+0x9454>
    9454:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

    glfwSetInputMode(glfw_window, GLFW_LOCK_KEY_MODS, true)
    945b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9462:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9466:	ff f1                	push   %rcx
    9468:	b9 04 30 03 00       	mov    $0x33004,%ecx
    946d:	ff f1                	push   %rcx
    946f:	b9 01 00 00 00       	mov    $0x1,%ecx
    9474:	48 0f be d1          	movsbq %cl,%rdx
    9478:	89 54 24 20          	mov    %edx,0x20(%rsp)
    947c:	8f c1                	pop    %rcx
    947e:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    9482:	8f c1                	pop    %rcx
    9484:	48 89 0c 24          	mov    %rcx,(%rsp)
    9488:	33 c9                	xor    %ecx,%ecx
    948a:	48 8b 0c 24          	mov    (%rsp),%rcx
    948e:	33 d2                	xor    %edx,%edx
    9490:	8b 54 24 08          	mov    0x8(%rsp),%edx
    9494:	45 33 c0             	xor    %r8d,%r8d
    9497:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    949c:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 94a2 <main+0x94a2>
    94a2:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

    yes = gladLoadGL()
    94a9:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    94b0:	e8 00 00 00 00       	call   94b5 <main+0x94b5>
    94b5:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    94bc:	48 63 c8             	movslq %eax,%rcx
    94bf:	ff f1                	push   %rcx
    94c1:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    94c8:	48 03 cd             	add    %rbp,%rcx
    94cb:	8f c2                	pop    %rdx
    94cd:	89 11                	mov    %edx,(%rcx)
    // yes = gladLoadGLLoader(glfwGetProcAddress)
    if !yes {
    94cf:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    94d2:	48 85 c9             	test   %rcx,%rcx
    94d5:	40 0f 94 c1          	rex sete %cl
    94d9:	48 0f b6 c9          	movzbq %cl,%rcx
    94dd:	48 83 f9 00          	cmp    $0x0,%rcx
    94e1:	0f 84 6f 00 00 00    	je     9556 <main+0x9556>
        log("gladLoadGL failed")
    94e7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    94ee:	b9 11 00 00 00       	mov    $0x11,%ecx
    94f3:	ff f1                	push   %rcx
    94f5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 94fc <main+0x94fc>
    94fc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9501:	8f c1                	pop    %rcx
    9503:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9508:	e8 85 ab ff ff       	call   4092 <main+0x4092>
    950d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9514:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    951b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9520:	88 0c 24             	mov    %cl,(%rsp)
    9523:	e8 c9 aa ff ff       	call   3ff1 <main+0x3ff1>
    9528:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        glfwTerminate()
    952f:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9536:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 953c <main+0x953c>
    953c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        return null;
    9543:	b9 00 00 00 00       	mov    $0x0,%ecx
    9548:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    954c:	48 81 c4 70 00 00 00 	add    $0x70,%rsp
    9553:	8f c5                	pop    %rbp
    9555:	c3                   	ret
    }

    glViewport(0, 0, width, height)
    9556:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    955d:	b9 00 00 00 00       	mov    $0x0,%ecx
    9562:	ff f1                	push   %rcx
    9564:	b9 00 00 00 00       	mov    $0x0,%ecx
    9569:	ff f1                	push   %rcx
    956b:	8b 4d 10             	mov    0x10(%rbp),%ecx
    956e:	48 63 c9             	movslq %ecx,%rcx
    9571:	ff f1                	push   %rcx
    9573:	8b 4d 14             	mov    0x14(%rbp),%ecx
    9576:	48 63 c9             	movslq %ecx,%rcx
    9579:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
    957d:	8f c1                	pop    %rcx
    957f:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    9583:	8f c1                	pop    %rcx
    9585:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    9589:	8f c1                	pop    %rcx
    958b:	89 0c 24             	mov    %ecx,(%rsp)
    958e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9595 <main+0x9595>
    9595:	48 8b 11             	mov    (%rcx),%rdx
    9598:	4c 8b d2             	mov    %rdx,%r10
    959b:	33 c9                	xor    %ecx,%ecx
    959d:	8b 0c 24             	mov    (%rsp),%ecx
    95a0:	33 d2                	xor    %edx,%edx
    95a2:	8b 54 24 08          	mov    0x8(%rsp),%edx
    95a6:	45 33 c0             	xor    %r8d,%r8d
    95a9:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    95ae:	45 33 c9             	xor    %r9d,%r9d
    95b1:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
    95b6:	41 ff d2             	call   *%r10
    95b9:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    95c0:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    95c7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 95ce <main+0x95ce>
    95ce:	48 8b 11             	mov    (%rcx),%rdx
    95d1:	4c 8b d2             	mov    %rdx,%r10
    95d4:	41 ff d2             	call   *%r10
    95d7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    95de:	8b c8                	mov    %eax,%ecx
    95e0:	ff f1                	push   %rcx
    95e2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 95e9 <main+0x95e9>
    95e9:	8f c2                	pop    %rdx
    95eb:	48 63 da             	movslq %edx,%rbx
    95ee:	88 19                	mov    %bl,(%rcx)
    95f0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 95f7 <main+0x95f7>
    95f7:	48 8a 11             	rex.W mov (%rcx),%dl
    95fa:	48 0f b6 d2          	movzbq %dl,%rdx
    95fe:	48 83 fa 00          	cmp    $0x0,%rdx
    9602:	0f 84 17 01 00 00    	je     971f <main+0x971f>
    9608:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    960f:	b9 06 00 00 00       	mov    $0x6,%ecx
    9614:	ff f1                	push   %rcx
    9616:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 961d <main+0x961d>
    961d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9622:	8f c1                	pop    %rcx
    9624:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9629:	e8 64 aa ff ff       	call   4092 <main+0x4092>
    962e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9635:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    963c:	b9 18 00 00 00       	mov    $0x18,%ecx
    9641:	ff f1                	push   %rcx
    9643:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 964a <main+0x964a>
    964a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    964f:	8f c1                	pop    %rcx
    9651:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9656:	e8 37 aa ff ff       	call   4092 <main+0x4092>
    965b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9662:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9669:	b9 01 00 00 00       	mov    $0x1,%ecx
    966e:	ff f1                	push   %rcx
    9670:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9677 <main+0x9677>
    9677:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    967c:	8f c1                	pop    %rcx
    967e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9683:	e8 0a aa ff ff       	call   4092 <main+0x4092>
    9688:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    968f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9696:	b9 54 01 00 00       	mov    $0x154,%ecx
    969b:	48 63 d1             	movslq %ecx,%rdx
    969e:	48 89 14 24          	mov    %rdx,(%rsp)
    96a2:	e8 4f a7 ff ff       	call   3df6 <main+0x3df6>
    96a7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    96ae:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    96b5:	b9 08 00 00 00       	mov    $0x8,%ecx
    96ba:	ff f1                	push   %rcx
    96bc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 96c3 <main+0x96c3>
    96c3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    96c8:	8f c1                	pop    %rcx
    96ca:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    96cf:	e8 be a9 ff ff       	call   4092 <main+0x4092>
    96d4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    96db:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    96e2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 96e9 <main+0x96e9>
    96e9:	48 8a 11             	rex.W mov (%rcx),%dl
    96ec:	48 0f b6 d2          	movzbq %dl,%rdx
    96f0:	48 0f be ca          	movsbq %dl,%rcx
    96f4:	48 89 0c 24          	mov    %rcx,(%rsp)
    96f8:	e8 f9 a6 ff ff       	call   3df6 <main+0x3df6>
    96fd:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9704:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    970b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9710:	88 0c 24             	mov    %cl,(%rsp)
    9713:	e8 d9 a8 ff ff       	call   3ff1 <main+0x3ff1>
    9718:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    glEnable(GL_BLEND)
    971f:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9726:	b9 e2 0b 00 00       	mov    $0xbe2,%ecx
    972b:	8b d1                	mov    %ecx,%edx
    972d:	89 14 24             	mov    %edx,(%rsp)
    9730:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9737 <main+0x9737>
    9737:	48 8b 11             	mov    (%rcx),%rdx
    973a:	4c 8b d2             	mov    %rdx,%r10
    973d:	33 c9                	xor    %ecx,%ecx
    973f:	8b 0c 24             	mov    (%rsp),%ecx
    9742:	41 ff d2             	call   *%r10
    9745:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    974c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9753:	b9 02 03 00 00       	mov    $0x302,%ecx
    9758:	8b d1                	mov    %ecx,%edx
    975a:	ff f2                	push   %rdx
    975c:	b9 03 03 00 00       	mov    $0x303,%ecx
    9761:	8b d1                	mov    %ecx,%edx
    9763:	89 54 24 10          	mov    %edx,0x10(%rsp)
    9767:	8f c1                	pop    %rcx
    9769:	89 0c 24             	mov    %ecx,(%rsp)
    976c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9773 <main+0x9773>
    9773:	48 8b 11             	mov    (%rcx),%rdx
    9776:	4c 8b d2             	mov    %rdx,%r10
    9779:	33 c9                	xor    %ecx,%ecx
    977b:	8b 0c 24             	mov    (%rsp),%ecx
    977e:	33 d2                	xor    %edx,%edx
    9780:	8b 54 24 08          	mov    0x8(%rsp),%edx
    9784:	41 ff d2             	call   *%r10
    9787:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    // glEnable(GL_CULL)

    window: WindowContext* = Allocate(sizeof WindowContext);
    978e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9795:	b9 d0 00 00 00       	mov    $0xd0,%ecx
    979a:	48 63 d1             	movslq %ecx,%rdx
    979d:	48 89 14 24          	mov    %rdx,(%rsp)
    97a1:	e8 f5 e1 ff ff       	call   799b <main+0x799b>
    97a6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    97ad:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    97b2:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *window = WindowContext{}
    97b6:	b9 00 00 00 00       	mov    $0x0,%ecx
    97bb:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    97bf:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    97c6:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    97cb:	b9 00 00 00 00       	mov    $0x0,%ecx
    97d0:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    97d4:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    97db:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    97e0:	b9 00 00 00 00       	mov    $0x0,%ecx
    97e5:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    97e9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    97f0:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    97f5:	b9 00 00 00 00       	mov    $0x0,%ecx
    97fa:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    97fe:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    9805:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    980a:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    980f:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    9813:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    981a:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    981f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    9824:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    9828:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    982f:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    9834:	b9 00 00 00 00       	mov    $0x0,%ecx
    9839:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    983d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    9844:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    9849:	b9 00 00 00 00       	mov    $0x0,%ecx
    984e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    9852:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    9859:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    985e:	48 33 c9             	xor    %rcx,%rcx
    9861:	ff f1                	push   %rcx
    9863:	48 33 c9             	xor    %rcx,%rcx
    9866:	ff f1                	push   %rcx
    9868:	48 33 c9             	xor    %rcx,%rcx
    986b:	ff f1                	push   %rcx
    986d:	48 33 c9             	xor    %rcx,%rcx
    9870:	ff f1                	push   %rcx
    9872:	48 33 c9             	xor    %rcx,%rcx
    9875:	ff f1                	push   %rcx
    9877:	48 33 c9             	xor    %rcx,%rcx
    987a:	ff f1                	push   %rcx
    987c:	b9 01 00 00 00       	mov    $0x1,%ecx
    9881:	ff f1                	push   %rcx
    9883:	48 33 c9             	xor    %rcx,%rcx
    9886:	ff f1                	push   %rcx
    9888:	48 33 c9             	xor    %rcx,%rcx
    988b:	ff f1                	push   %rcx
    988d:	48 33 c9             	xor    %rcx,%rcx
    9890:	ff f1                	push   %rcx
    9892:	48 33 c9             	xor    %rcx,%rcx
    9895:	ff f1                	push   %rcx
    9897:	48 33 c9             	xor    %rcx,%rcx
    989a:	ff f1                	push   %rcx
    989c:	b9 00 00 00 00       	mov    $0x0,%ecx
    98a1:	ff f1                	push   %rcx
    98a3:	b9 00 00 00 00       	mov    $0x0,%ecx
    98a8:	ff f1                	push   %rcx
    98aa:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    98af:	ff f1                	push   %rcx
    98b1:	48 33 c9             	xor    %rcx,%rcx
    98b4:	ff f1                	push   %rcx
    98b6:	48 33 c9             	xor    %rcx,%rcx
    98b9:	ff f1                	push   %rcx
    98bb:	48 33 c9             	xor    %rcx,%rcx
    98be:	ff f1                	push   %rcx
    98c0:	b9 01 00 00 00       	mov    $0x1,%ecx
    98c5:	ff f1                	push   %rcx
    98c7:	48 33 c9             	xor    %rcx,%rcx
    98ca:	ff f1                	push   %rcx
    98cc:	48 33 c9             	xor    %rcx,%rcx
    98cf:	ff f1                	push   %rcx
    98d1:	48 33 c9             	xor    %rcx,%rcx
    98d4:	ff f1                	push   %rcx
    98d6:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    98dd:	48 03 cd             	add    %rbp,%rcx
    98e0:	48 8b 11             	mov    (%rcx),%rdx
    98e3:	8f c1                	pop    %rcx
    98e5:	48 89 0a             	mov    %rcx,(%rdx)
    98e8:	8f c1                	pop    %rcx
    98ea:	89 4a 08             	mov    %ecx,0x8(%rdx)
    98ed:	8f c1                	pop    %rcx
    98ef:	89 4a 0c             	mov    %ecx,0xc(%rdx)
    98f2:	8f c1                	pop    %rcx
    98f4:	88 4a 10             	mov    %cl,0x10(%rdx)
    98f7:	8f c1                	pop    %rcx
    98f9:	88 4a 11             	mov    %cl,0x11(%rdx)
    98fc:	8f c1                	pop    %rcx
    98fe:	89 4a 14             	mov    %ecx,0x14(%rdx)
    9901:	8f c1                	pop    %rcx
    9903:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
    9907:	8f c1                	pop    %rcx
    9909:	89 4a 20             	mov    %ecx,0x20(%rdx)
    990c:	8f c1                	pop    %rcx
    990e:	89 4a 24             	mov    %ecx,0x24(%rdx)
    9911:	8f c1                	pop    %rcx
    9913:	89 4a 28             	mov    %ecx,0x28(%rdx)
    9916:	8f c1                	pop    %rcx
    9918:	89 4a 2c             	mov    %ecx,0x2c(%rdx)
    991b:	8f c1                	pop    %rcx
    991d:	48 89 4a 30          	mov    %rcx,0x30(%rdx)
    9921:	8f c1                	pop    %rcx
    9923:	89 4a 38             	mov    %ecx,0x38(%rdx)
    9926:	8f c1                	pop    %rcx
    9928:	89 4a 3c             	mov    %ecx,0x3c(%rdx)
    992b:	8f c1                	pop    %rcx
    992d:	89 4a 40             	mov    %ecx,0x40(%rdx)
    9930:	8f c1                	pop    %rcx
    9932:	88 4a 44             	mov    %cl,0x44(%rdx)
    9935:	8f c1                	pop    %rcx
    9937:	89 4a 48             	mov    %ecx,0x48(%rdx)
    993a:	8f c1                	pop    %rcx
    993c:	89 8a 98 00 00 00    	mov    %ecx,0x98(%rdx)
    9942:	8f c1                	pop    %rcx
    9944:	89 8a 9c 00 00 00    	mov    %ecx,0x9c(%rdx)
    994a:	8f c1                	pop    %rcx
    994c:	48 89 8a a0 00 00 00 	mov    %rcx,0xa0(%rdx)
    9953:	8f c1                	pop    %rcx
    9955:	89 8a a8 00 00 00    	mov    %ecx,0xa8(%rdx)
    995b:	8f c1                	pop    %rcx
    995d:	89 8a ac 00 00 00    	mov    %ecx,0xac(%rdx)
    9963:	8f c1                	pop    %rcx
    9965:	89 8a b0 00 00 00    	mov    %ecx,0xb0(%rdx)
    996b:	8f c1                	pop    %rcx
    996d:	89 8a b4 00 00 00    	mov    %ecx,0xb4(%rdx)
    9973:	8f c1                	pop    %rcx
    9975:	89 8a b8 00 00 00    	mov    %ecx,0xb8(%rdx)
    997b:	8f c1                	pop    %rcx
    997d:	89 8a bc 00 00 00    	mov    %ecx,0xbc(%rdx)
    9983:	8f c1                	pop    %rcx
    9985:	89 8a c0 00 00 00    	mov    %ecx,0xc0(%rdx)
    998b:	8f c1                	pop    %rcx
    998d:	89 8a c4 00 00 00    	mov    %ecx,0xc4(%rdx)
    9993:	8f c1                	pop    %rcx
    9995:	89 8a c8 00 00 00    	mov    %ecx,0xc8(%rdx)
    999b:	8f c1                	pop    %rcx
    999d:	89 8a cc 00 00 00    	mov    %ecx,0xcc(%rdx)
    window.glfw_window = glfw_window
    99a3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    99a7:	ff f1                	push   %rcx
    99a9:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    99b0:	48 03 cd             	add    %rbp,%rcx
    99b3:	48 8b 11             	mov    (%rcx),%rdx
    99b6:	8f c1                	pop    %rcx
    99b8:	48 89 0a             	mov    %rcx,(%rdx)
    window.width = width
    99bb:	8b 4d 10             	mov    0x10(%rbp),%ecx
    99be:	48 63 c9             	movslq %ecx,%rcx
    99c1:	ff f1                	push   %rcx
    99c3:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    99ca:	48 03 cd             	add    %rbp,%rcx
    99cd:	48 8b 11             	mov    (%rcx),%rdx
    99d0:	b9 08 00 00 00       	mov    $0x8,%ecx
    99d5:	48 03 d1             	add    %rcx,%rdx
    99d8:	8f c1                	pop    %rcx
    99da:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    99de:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    window.height = height
    99e2:	8b 4d 14             	mov    0x14(%rbp),%ecx
    99e5:	48 63 c9             	movslq %ecx,%rcx
    99e8:	ff f1                	push   %rcx
    99ea:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    99f1:	48 03 cd             	add    %rbp,%rcx
    99f4:	48 8b 11             	mov    (%rcx),%rdx
    99f7:	b9 0c 00 00 00       	mov    $0xc,%ecx
    99fc:	48 03 d1             	add    %rcx,%rdx
    99ff:	8f c1                	pop    %rcx
    9a01:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    9a05:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    
    MapWindowContext(window)
    9a09:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9a10:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    9a14:	48 89 0c 24          	mov    %rcx,(%rsp)
    9a18:	e8 bd 37 00 00       	call   d1da <main+0xd1da>
    9a1d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    
    glfwSetKeyCallback(glfw_window, KeyCallback);
    9a24:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9a2b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9a2f:	ff f1                	push   %rcx
    9a31:	48 8d 0d 54 38 00 00 	lea    0x3854(%rip),%rcx        # d28c <main+0xd28c>
    9a38:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9a3d:	8f c1                	pop    %rcx
    9a3f:	48 89 0c 24          	mov    %rcx,(%rsp)
    9a43:	33 c9                	xor    %ecx,%ecx
    9a45:	48 8b 0c 24          	mov    (%rsp),%rcx
    9a49:	33 d2                	xor    %edx,%edx
    9a4b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9a50:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9a56 <main+0x9a56>
    9a56:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glfwSetMouseButtonCallback(glfw_window, MouseCallback);
    9a5d:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9a64:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9a68:	ff f1                	push   %rcx
    9a6a:	48 8d 0d a3 3d 00 00 	lea    0x3da3(%rip),%rcx        # d814 <main+0xd814>
    9a71:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9a76:	8f c1                	pop    %rcx
    9a78:	48 89 0c 24          	mov    %rcx,(%rsp)
    9a7c:	33 c9                	xor    %ecx,%ecx
    9a7e:	48 8b 0c 24          	mov    (%rsp),%rcx
    9a82:	33 d2                	xor    %edx,%edx
    9a84:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9a89:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9a8f <main+0x9a8f>
    9a8f:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glfwSetCursorPosCallback(glfw_window, CursorPosCallback);
    9a96:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9a9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9aa1:	ff f1                	push   %rcx
    9aa3:	48 8d 0d 88 3e 00 00 	lea    0x3e88(%rip),%rcx        # d932 <main+0xd932>
    9aaa:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9aaf:	8f c1                	pop    %rcx
    9ab1:	48 89 0c 24          	mov    %rcx,(%rsp)
    9ab5:	33 c9                	xor    %ecx,%ecx
    9ab7:	48 8b 0c 24          	mov    (%rsp),%rcx
    9abb:	33 d2                	xor    %edx,%edx
    9abd:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9ac2:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9ac8 <main+0x9ac8>
    9ac8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glfwSetScrollCallback(glfw_window, ScrollCallback);
    9acf:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9ad6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9ada:	ff f1                	push   %rcx
    9adc:	48 8d 0d 8a 3f 00 00 	lea    0x3f8a(%rip),%rcx        # da6d <main+0xda6d>
    9ae3:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9ae8:	8f c1                	pop    %rcx
    9aea:	48 89 0c 24          	mov    %rcx,(%rsp)
    9aee:	33 c9                	xor    %ecx,%ecx
    9af0:	48 8b 0c 24          	mov    (%rsp),%rcx
    9af4:	33 d2                	xor    %edx,%edx
    9af6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9afb:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9b01 <main+0x9b01>
    9b01:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    glfwSetWindowSizeCallback(glfw_window, ResizeCallback);
    9b08:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9b0f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9b13:	ff f1                	push   %rcx
    9b15:	48 8d 0d 8c 40 00 00 	lea    0x408c(%rip),%rcx        # dba8 <main+0xdba8>
    9b1c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9b21:	8f c1                	pop    %rcx
    9b23:	48 89 0c 24          	mov    %rcx,(%rsp)
    9b27:	33 c9                	xor    %ecx,%ecx
    9b29:	48 8b 0c 24          	mov    (%rsp),%rcx
    9b2d:	33 d2                	xor    %edx,%edx
    9b2f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9b34:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9b3a <main+0x9b3a>
    9b3a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    // glfwSetWindowFocusCallback(window, FocusCallback);
    // glfwSetWindowCloseCallback(window, CloseCallback);
    // glfwSetWindowPosCallback(window, PosCallback);
    // log("char callback ", cast_unsafe<void*>CharCallback)
    glfwSetCharCallback(glfw_window, CharCallback);
    9b41:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9b48:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    9b4c:	ff f1                	push   %rcx
    9b4e:	48 8d 0d 6c 41 00 00 	lea    0x416c(%rip),%rcx        # dcc1 <main+0xdcc1>
    9b55:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9b5a:	8f c1                	pop    %rcx
    9b5c:	48 89 0c 24          	mov    %rcx,(%rsp)
    9b60:	33 c9                	xor    %ecx,%ecx
    9b62:	48 8b 0c 24          	mov    (%rsp),%rcx
    9b66:	33 d2                	xor    %edx,%edx
    9b68:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9b6d:	ff 15 00 00 00 00    	call   *0x0(%rip)        # 9b73 <main+0x9b73>
    9b73:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    // glfwSetDropCallback(window, DropCallback);
    // err := glfwGetError(null)
    // log(err)
    
    vshader := @strbeg
    9b7a:	b9 47 02 00 00       	mov    $0x247,%ecx
    9b7f:	ff f1                	push   %rcx
    9b81:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9b88 <main+0x9b88>
    9b88:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    9b8c:	8f c1                	pop    %rcx
    9b8e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)

            gl_Position = vec4((vPos.x)/uWindow.x*2.0-1.0, 1.0-(vPos.y)/uWindow.y*2.0, 0, 1);
            // gl_Position = vec4(vPos.x,vPos.y, 0, 1);
        };
        @strend;
    fshader := @strbeg
    9b92:	b9 dc 06 00 00       	mov    $0x6dc,%ecx
    9b97:	ff f1                	push   %rcx
    9b99:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9ba0 <main+0x9ba0>
    9ba0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    9ba4:	8f c1                	pop    %rcx
    9ba6:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
            }
        };

        @strend
    
    window.base_shader = CreateShaderProgram(vshader, fshader)
    9baa:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9bb1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    9bb5:	ff f1                	push   %rcx
    9bb7:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    9bbb:	ff f1                	push   %rcx
    9bbd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    9bc1:	ff f1                	push   %rcx
    9bc3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
    9bc7:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    9bcc:	8f c1                	pop    %rcx
    9bce:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
    9bd3:	8f c1                	pop    %rcx
    9bd5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9bda:	8f c1                	pop    %rcx
    9bdc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9be1:	e8 47 42 00 00       	call   de2d <main+0xde2d>
    9be6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    9bed:	8b 4c 24 c8          	mov    -0x38(%rsp),%ecx
    9bf1:	8b c9                	mov    %ecx,%ecx
    9bf3:	ff f1                	push   %rcx
    9bf5:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    9bfc:	48 03 cd             	add    %rbp,%rcx
    9bff:	48 8b 11             	mov    (%rcx),%rdx
    9c02:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    9c07:	48 03 d1             	add    %rcx,%rdx
    9c0a:	8f c1                	pop    %rcx
    9c0c:	89 0a                	mov    %ecx,(%rdx)
    
    VBO: u32;
    9c0e:	33 c9                	xor    %ecx,%ecx
    9c10:	89 4d b8             	mov    %ecx,-0x48(%rbp)
    VAO: u32;
    9c13:	33 c9                	xor    %ecx,%ecx
    9c15:	89 4d b0             	mov    %ecx,-0x50(%rbp)
    IBO: u32;
    9c18:	33 c9                	xor    %ecx,%ecx
    9c1a:	89 4d a8             	mov    %ecx,-0x58(%rbp)

    glGenVertexArrays(1, &VAO);
    9c1d:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9c24:	b9 01 00 00 00       	mov    $0x1,%ecx
    9c29:	ff f1                	push   %rcx
    9c2b:	48 c7 c1 b0 ff ff ff 	mov    $0xffffffffffffffb0,%rcx
    9c32:	48 03 cd             	add    %rbp,%rcx
    9c35:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9c3a:	8f c1                	pop    %rcx
    9c3c:	89 0c 24             	mov    %ecx,(%rsp)
    9c3f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9c46 <main+0x9c46>
    9c46:	48 8b 11             	mov    (%rcx),%rdx
    9c49:	4c 8b d2             	mov    %rdx,%r10
    9c4c:	33 c9                	xor    %ecx,%ecx
    9c4e:	8b 0c 24             	mov    (%rsp),%ecx
    9c51:	33 d2                	xor    %edx,%edx
    9c53:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9c58:	41 ff d2             	call   *%r10
    9c5b:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    9c62:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9c69:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9c70 <main+0x9c70>
    9c70:	48 8b 11             	mov    (%rcx),%rdx
    9c73:	4c 8b d2             	mov    %rdx,%r10
    9c76:	41 ff d2             	call   *%r10
    9c79:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    9c80:	8b c8                	mov    %eax,%ecx
    9c82:	ff f1                	push   %rcx
    9c84:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9c8b <main+0x9c8b>
    9c8b:	8f c2                	pop    %rdx
    9c8d:	48 63 da             	movslq %edx,%rbx
    9c90:	88 19                	mov    %bl,(%rcx)
    9c92:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9c99 <main+0x9c99>
    9c99:	48 8a 11             	rex.W mov (%rcx),%dl
    9c9c:	48 0f b6 d2          	movzbq %dl,%rdx
    9ca0:	48 83 fa 00          	cmp    $0x0,%rdx
    9ca4:	0f 84 17 01 00 00    	je     9dc1 <main+0x9dc1>
    9caa:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9cb1:	b9 06 00 00 00       	mov    $0x6,%ecx
    9cb6:	ff f1                	push   %rcx
    9cb8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9cbf <main+0x9cbf>
    9cbf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9cc4:	8f c1                	pop    %rcx
    9cc6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9ccb:	e8 c2 a3 ff ff       	call   4092 <main+0x4092>
    9cd0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9cd7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9cde:	b9 18 00 00 00       	mov    $0x18,%ecx
    9ce3:	ff f1                	push   %rcx
    9ce5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9cec <main+0x9cec>
    9cec:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9cf1:	8f c1                	pop    %rcx
    9cf3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9cf8:	e8 95 a3 ff ff       	call   4092 <main+0x4092>
    9cfd:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9d04:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9d0b:	b9 01 00 00 00       	mov    $0x1,%ecx
    9d10:	ff f1                	push   %rcx
    9d12:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9d19 <main+0x9d19>
    9d19:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9d1e:	8f c1                	pop    %rcx
    9d20:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9d25:	e8 68 a3 ff ff       	call   4092 <main+0x4092>
    9d2a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9d31:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9d38:	b9 c3 01 00 00       	mov    $0x1c3,%ecx
    9d3d:	48 63 d1             	movslq %ecx,%rdx
    9d40:	48 89 14 24          	mov    %rdx,(%rsp)
    9d44:	e8 ad a0 ff ff       	call   3df6 <main+0x3df6>
    9d49:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    9d50:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9d57:	b9 08 00 00 00       	mov    $0x8,%ecx
    9d5c:	ff f1                	push   %rcx
    9d5e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9d65 <main+0x9d65>
    9d65:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9d6a:	8f c1                	pop    %rcx
    9d6c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9d71:	e8 1c a3 ff ff       	call   4092 <main+0x4092>
    9d76:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9d7d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9d84:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9d8b <main+0x9d8b>
    9d8b:	48 8a 11             	rex.W mov (%rcx),%dl
    9d8e:	48 0f b6 d2          	movzbq %dl,%rdx
    9d92:	48 0f be ca          	movsbq %dl,%rcx
    9d96:	48 89 0c 24          	mov    %rcx,(%rsp)
    9d9a:	e8 57 a0 ff ff       	call   3df6 <main+0x3df6>
    9d9f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9da6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9dad:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9db2:	88 0c 24             	mov    %cl,(%rsp)
    9db5:	e8 37 a2 ff ff       	call   3ff1 <main+0x3ff1>
    9dba:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glGenBuffers(1, &VBO);
    9dc1:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9dc8:	b9 01 00 00 00       	mov    $0x1,%ecx
    9dcd:	ff f1                	push   %rcx
    9dcf:	48 c7 c1 b8 ff ff ff 	mov    $0xffffffffffffffb8,%rcx
    9dd6:	48 03 cd             	add    %rbp,%rcx
    9dd9:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9dde:	8f c1                	pop    %rcx
    9de0:	89 0c 24             	mov    %ecx,(%rsp)
    9de3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9dea <main+0x9dea>
    9dea:	48 8b 11             	mov    (%rcx),%rdx
    9ded:	4c 8b d2             	mov    %rdx,%r10
    9df0:	33 c9                	xor    %ecx,%ecx
    9df2:	8b 0c 24             	mov    (%rsp),%ecx
    9df5:	33 d2                	xor    %edx,%edx
    9df7:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9dfc:	41 ff d2             	call   *%r10
    9dff:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    9e06:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9e0d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9e14 <main+0x9e14>
    9e14:	48 8b 11             	mov    (%rcx),%rdx
    9e17:	4c 8b d2             	mov    %rdx,%r10
    9e1a:	41 ff d2             	call   *%r10
    9e1d:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    9e24:	8b c8                	mov    %eax,%ecx
    9e26:	ff f1                	push   %rcx
    9e28:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9e2f <main+0x9e2f>
    9e2f:	8f c2                	pop    %rdx
    9e31:	48 63 da             	movslq %edx,%rbx
    9e34:	88 19                	mov    %bl,(%rcx)
    9e36:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9e3d <main+0x9e3d>
    9e3d:	48 8a 11             	rex.W mov (%rcx),%dl
    9e40:	48 0f b6 d2          	movzbq %dl,%rdx
    9e44:	48 83 fa 00          	cmp    $0x0,%rdx
    9e48:	0f 84 17 01 00 00    	je     9f65 <main+0x9f65>
    9e4e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9e55:	b9 06 00 00 00       	mov    $0x6,%ecx
    9e5a:	ff f1                	push   %rcx
    9e5c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9e63 <main+0x9e63>
    9e63:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9e68:	8f c1                	pop    %rcx
    9e6a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9e6f:	e8 1e a2 ff ff       	call   4092 <main+0x4092>
    9e74:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9e7b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9e82:	b9 18 00 00 00       	mov    $0x18,%ecx
    9e87:	ff f1                	push   %rcx
    9e89:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9e90 <main+0x9e90>
    9e90:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9e95:	8f c1                	pop    %rcx
    9e97:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9e9c:	e8 f1 a1 ff ff       	call   4092 <main+0x4092>
    9ea1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9ea8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9eaf:	b9 01 00 00 00       	mov    $0x1,%ecx
    9eb4:	ff f1                	push   %rcx
    9eb6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9ebd <main+0x9ebd>
    9ebd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9ec2:	8f c1                	pop    %rcx
    9ec4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9ec9:	e8 c4 a1 ff ff       	call   4092 <main+0x4092>
    9ece:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9ed5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9edc:	b9 c5 01 00 00       	mov    $0x1c5,%ecx
    9ee1:	48 63 d1             	movslq %ecx,%rdx
    9ee4:	48 89 14 24          	mov    %rdx,(%rsp)
    9ee8:	e8 09 9f ff ff       	call   3df6 <main+0x3df6>
    9eed:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    9ef4:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9efb:	b9 08 00 00 00       	mov    $0x8,%ecx
    9f00:	ff f1                	push   %rcx
    9f02:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9f09 <main+0x9f09>
    9f09:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9f0e:	8f c1                	pop    %rcx
    9f10:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    9f15:	e8 78 a1 ff ff       	call   4092 <main+0x4092>
    9f1a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9f21:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9f28:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9f2f <main+0x9f2f>
    9f2f:	48 8a 11             	rex.W mov (%rcx),%dl
    9f32:	48 0f b6 d2          	movzbq %dl,%rdx
    9f36:	48 0f be ca          	movsbq %dl,%rcx
    9f3a:	48 89 0c 24          	mov    %rcx,(%rsp)
    9f3e:	e8 b3 9e ff ff       	call   3df6 <main+0x3df6>
    9f43:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    9f4a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9f51:	b9 0a 00 00 00       	mov    $0xa,%ecx
    9f56:	88 0c 24             	mov    %cl,(%rsp)
    9f59:	e8 93 a0 ff ff       	call   3ff1 <main+0x3ff1>
    9f5e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glGenBuffers(1, &IBO);
    9f65:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9f6c:	b9 01 00 00 00       	mov    $0x1,%ecx
    9f71:	ff f1                	push   %rcx
    9f73:	48 c7 c1 a8 ff ff ff 	mov    $0xffffffffffffffa8,%rcx
    9f7a:	48 03 cd             	add    %rbp,%rcx
    9f7d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    9f82:	8f c1                	pop    %rcx
    9f84:	89 0c 24             	mov    %ecx,(%rsp)
    9f87:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9f8e <main+0x9f8e>
    9f8e:	48 8b 11             	mov    (%rcx),%rdx
    9f91:	4c 8b d2             	mov    %rdx,%r10
    9f94:	33 c9                	xor    %ecx,%ecx
    9f96:	8b 0c 24             	mov    (%rsp),%ecx
    9f99:	33 d2                	xor    %edx,%edx
    9f9b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    9fa0:	41 ff d2             	call   *%r10
    9fa3:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    9faa:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    9fb1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9fb8 <main+0x9fb8>
    9fb8:	48 8b 11             	mov    (%rcx),%rdx
    9fbb:	4c 8b d2             	mov    %rdx,%r10
    9fbe:	41 ff d2             	call   *%r10
    9fc1:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    9fc8:	8b c8                	mov    %eax,%ecx
    9fca:	ff f1                	push   %rcx
    9fcc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9fd3 <main+0x9fd3>
    9fd3:	8f c2                	pop    %rdx
    9fd5:	48 63 da             	movslq %edx,%rbx
    9fd8:	88 19                	mov    %bl,(%rcx)
    9fda:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 9fe1 <main+0x9fe1>
    9fe1:	48 8a 11             	rex.W mov (%rcx),%dl
    9fe4:	48 0f b6 d2          	movzbq %dl,%rdx
    9fe8:	48 83 fa 00          	cmp    $0x0,%rdx
    9fec:	0f 84 17 01 00 00    	je     a109 <main+0xa109>
    9ff2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    9ff9:	b9 06 00 00 00       	mov    $0x6,%ecx
    9ffe:	ff f1                	push   %rcx
    a000:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a007 <main+0xa007>
    a007:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a00c:	8f c1                	pop    %rcx
    a00e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a013:	e8 7a a0 ff ff       	call   4092 <main+0x4092>
    a018:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a01f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a026:	b9 18 00 00 00       	mov    $0x18,%ecx
    a02b:	ff f1                	push   %rcx
    a02d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a034 <main+0xa034>
    a034:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a039:	8f c1                	pop    %rcx
    a03b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a040:	e8 4d a0 ff ff       	call   4092 <main+0x4092>
    a045:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a04c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a053:	b9 01 00 00 00       	mov    $0x1,%ecx
    a058:	ff f1                	push   %rcx
    a05a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a061 <main+0xa061>
    a061:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a066:	8f c1                	pop    %rcx
    a068:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a06d:	e8 20 a0 ff ff       	call   4092 <main+0x4092>
    a072:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a079:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a080:	b9 c7 01 00 00       	mov    $0x1c7,%ecx
    a085:	48 63 d1             	movslq %ecx,%rdx
    a088:	48 89 14 24          	mov    %rdx,(%rsp)
    a08c:	e8 65 9d ff ff       	call   3df6 <main+0x3df6>
    a091:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    a098:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a09f:	b9 08 00 00 00       	mov    $0x8,%ecx
    a0a4:	ff f1                	push   %rcx
    a0a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a0ad <main+0xa0ad>
    a0ad:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a0b2:	8f c1                	pop    %rcx
    a0b4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a0b9:	e8 d4 9f ff ff       	call   4092 <main+0x4092>
    a0be:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a0c5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a0cc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a0d3 <main+0xa0d3>
    a0d3:	48 8a 11             	rex.W mov (%rcx),%dl
    a0d6:	48 0f b6 d2          	movzbq %dl,%rdx
    a0da:	48 0f be ca          	movsbq %dl,%rcx
    a0de:	48 89 0c 24          	mov    %rcx,(%rsp)
    a0e2:	e8 0f 9d ff ff       	call   3df6 <main+0x3df6>
    a0e7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a0ee:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a0f5:	b9 0a 00 00 00       	mov    $0xa,%ecx
    a0fa:	88 0c 24             	mov    %cl,(%rsp)
    a0fd:	e8 ef 9e ff ff       	call   3ff1 <main+0x3ff1>
    a102:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    window.vao = VAO
    a109:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    a10c:	ff f1                	push   %rcx
    a10e:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    a115:	48 03 cd             	add    %rbp,%rcx
    a118:	48 8b 11             	mov    (%rcx),%rdx
    a11b:	b9 3c 00 00 00       	mov    $0x3c,%ecx
    a120:	48 03 d1             	add    %rcx,%rdx
    a123:	8f c1                	pop    %rcx
    a125:	89 0a                	mov    %ecx,(%rdx)
    window.vbo = VBO
    a127:	8b 4d b8             	mov    -0x48(%rbp),%ecx
    a12a:	ff f1                	push   %rcx
    a12c:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    a133:	48 03 cd             	add    %rbp,%rcx
    a136:	48 8b 11             	mov    (%rcx),%rdx
    a139:	b9 38 00 00 00       	mov    $0x38,%ecx
    a13e:	48 03 d1             	add    %rcx,%rdx
    a141:	8f c1                	pop    %rcx
    a143:	89 0a                	mov    %ecx,(%rdx)
    window.ibo = IBO
    a145:	8b 4d a8             	mov    -0x58(%rbp),%ecx
    a148:	ff f1                	push   %rcx
    a14a:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    a151:	48 03 cd             	add    %rbp,%rcx
    a154:	48 8b 11             	mov    (%rcx),%rdx
    a157:	b9 40 00 00 00       	mov    $0x40,%ecx
    a15c:	48 03 d1             	add    %rcx,%rdx
    a15f:	8f c1                	pop    %rcx
    a161:	89 0a                	mov    %ecx,(%rdx)

    glBindVertexArray(VAO);
    a163:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a16a:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    a16d:	89 0c 24             	mov    %ecx,(%rsp)
    a170:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a177 <main+0xa177>
    a177:	48 8b 11             	mov    (%rcx),%rdx
    a17a:	4c 8b d2             	mov    %rdx,%r10
    a17d:	33 c9                	xor    %ecx,%ecx
    a17f:	8b 0c 24             	mov    (%rsp),%ecx
    a182:	41 ff d2             	call   *%r10
    a185:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    a18c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a193:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a19a <main+0xa19a>
    a19a:	48 8b 11             	mov    (%rcx),%rdx
    a19d:	4c 8b d2             	mov    %rdx,%r10
    a1a0:	41 ff d2             	call   *%r10
    a1a3:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    a1aa:	8b c8                	mov    %eax,%ecx
    a1ac:	ff f1                	push   %rcx
    a1ae:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a1b5 <main+0xa1b5>
    a1b5:	8f c2                	pop    %rdx
    a1b7:	48 63 da             	movslq %edx,%rbx
    a1ba:	88 19                	mov    %bl,(%rcx)
    a1bc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a1c3 <main+0xa1c3>
    a1c3:	48 8a 11             	rex.W mov (%rcx),%dl
    a1c6:	48 0f b6 d2          	movzbq %dl,%rdx
    a1ca:	48 83 fa 00          	cmp    $0x0,%rdx
    a1ce:	0f 84 17 01 00 00    	je     a2eb <main+0xa2eb>
    a1d4:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a1db:	b9 06 00 00 00       	mov    $0x6,%ecx
    a1e0:	ff f1                	push   %rcx
    a1e2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a1e9 <main+0xa1e9>
    a1e9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a1ee:	8f c1                	pop    %rcx
    a1f0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a1f5:	e8 98 9e ff ff       	call   4092 <main+0x4092>
    a1fa:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a201:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a208:	b9 18 00 00 00       	mov    $0x18,%ecx
    a20d:	ff f1                	push   %rcx
    a20f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a216 <main+0xa216>
    a216:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a21b:	8f c1                	pop    %rcx
    a21d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a222:	e8 6b 9e ff ff       	call   4092 <main+0x4092>
    a227:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a22e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a235:	b9 01 00 00 00       	mov    $0x1,%ecx
    a23a:	ff f1                	push   %rcx
    a23c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a243 <main+0xa243>
    a243:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a248:	8f c1                	pop    %rcx
    a24a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a24f:	e8 3e 9e ff ff       	call   4092 <main+0x4092>
    a254:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a25b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a262:	b9 ce 01 00 00       	mov    $0x1ce,%ecx
    a267:	48 63 d1             	movslq %ecx,%rdx
    a26a:	48 89 14 24          	mov    %rdx,(%rsp)
    a26e:	e8 83 9b ff ff       	call   3df6 <main+0x3df6>
    a273:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    a27a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a281:	b9 08 00 00 00       	mov    $0x8,%ecx
    a286:	ff f1                	push   %rcx
    a288:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a28f <main+0xa28f>
    a28f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a294:	8f c1                	pop    %rcx
    a296:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a29b:	e8 f2 9d ff ff       	call   4092 <main+0x4092>
    a2a0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a2a7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a2ae:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a2b5 <main+0xa2b5>
    a2b5:	48 8a 11             	rex.W mov (%rcx),%dl
    a2b8:	48 0f b6 d2          	movzbq %dl,%rdx
    a2bc:	48 0f be ca          	movsbq %dl,%rcx
    a2c0:	48 89 0c 24          	mov    %rcx,(%rsp)
    a2c4:	e8 2d 9b ff ff       	call   3df6 <main+0x3df6>
    a2c9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a2d0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a2d7:	b9 0a 00 00 00       	mov    $0xa,%ecx
    a2dc:	88 0c 24             	mov    %cl,(%rsp)
    a2df:	e8 0d 9d ff ff       	call   3ff1 <main+0x3ff1>
    a2e4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    a2eb:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a2f2:	b9 92 88 00 00       	mov    $0x8892,%ecx
    a2f7:	8b d1                	mov    %ecx,%edx
    a2f9:	ff f2                	push   %rdx
    a2fb:	8b 4d b8             	mov    -0x48(%rbp),%ecx
    a2fe:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    a302:	8f c1                	pop    %rcx
    a304:	89 0c 24             	mov    %ecx,(%rsp)
    a307:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a30e <main+0xa30e>
    a30e:	48 8b 11             	mov    (%rcx),%rdx
    a311:	4c 8b d2             	mov    %rdx,%r10
    a314:	33 c9                	xor    %ecx,%ecx
    a316:	8b 0c 24             	mov    (%rsp),%ecx
    a319:	33 d2                	xor    %edx,%edx
    a31b:	8b 54 24 08          	mov    0x8(%rsp),%edx
    a31f:	41 ff d2             	call   *%r10
    a322:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    a329:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a330:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a337 <main+0xa337>
    a337:	48 8b 11             	mov    (%rcx),%rdx
    a33a:	4c 8b d2             	mov    %rdx,%r10
    a33d:	41 ff d2             	call   *%r10
    a340:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    a347:	8b c8                	mov    %eax,%ecx
    a349:	ff f1                	push   %rcx
    a34b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a352 <main+0xa352>
    a352:	8f c2                	pop    %rdx
    a354:	48 63 da             	movslq %edx,%rbx
    a357:	88 19                	mov    %bl,(%rcx)
    a359:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a360 <main+0xa360>
    a360:	48 8a 11             	rex.W mov (%rcx),%dl
    a363:	48 0f b6 d2          	movzbq %dl,%rdx
    a367:	48 83 fa 00          	cmp    $0x0,%rdx
    a36b:	0f 84 17 01 00 00    	je     a488 <main+0xa488>
    a371:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a378:	b9 06 00 00 00       	mov    $0x6,%ecx
    a37d:	ff f1                	push   %rcx
    a37f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a386 <main+0xa386>
    a386:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a38b:	8f c1                	pop    %rcx
    a38d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a392:	e8 fb 9c ff ff       	call   4092 <main+0x4092>
    a397:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a39e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a3a5:	b9 18 00 00 00       	mov    $0x18,%ecx
    a3aa:	ff f1                	push   %rcx
    a3ac:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a3b3 <main+0xa3b3>
    a3b3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a3b8:	8f c1                	pop    %rcx
    a3ba:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a3bf:	e8 ce 9c ff ff       	call   4092 <main+0x4092>
    a3c4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a3cb:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a3d2:	b9 01 00 00 00       	mov    $0x1,%ecx
    a3d7:	ff f1                	push   %rcx
    a3d9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a3e0 <main+0xa3e0>
    a3e0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a3e5:	8f c1                	pop    %rcx
    a3e7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a3ec:	e8 a1 9c ff ff       	call   4092 <main+0x4092>
    a3f1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a3f8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a3ff:	b9 d1 01 00 00       	mov    $0x1d1,%ecx
    a404:	48 63 d1             	movslq %ecx,%rdx
    a407:	48 89 14 24          	mov    %rdx,(%rsp)
    a40b:	e8 e6 99 ff ff       	call   3df6 <main+0x3df6>
    a410:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    a417:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a41e:	b9 08 00 00 00       	mov    $0x8,%ecx
    a423:	ff f1                	push   %rcx
    a425:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a42c <main+0xa42c>
    a42c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a431:	8f c1                	pop    %rcx
    a433:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a438:	e8 55 9c ff ff       	call   4092 <main+0x4092>
    a43d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a444:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a44b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a452 <main+0xa452>
    a452:	48 8a 11             	rex.W mov (%rcx),%dl
    a455:	48 0f b6 d2          	movzbq %dl,%rdx
    a459:	48 0f be ca          	movsbq %dl,%rcx
    a45d:	48 89 0c 24          	mov    %rcx,(%rsp)
    a461:	e8 90 99 ff ff       	call   3df6 <main+0x3df6>
    a466:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a46d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a474:	b9 0a 00 00 00       	mov    $0xa,%ecx
    a479:	88 0c 24             	mov    %cl,(%rsp)
    a47c:	e8 70 9b ff ff       	call   3ff1 <main+0x3ff1>
    a481:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    #macro BASE_SHADER_MAX_RECT 50
    #macro BASE_SHADER_MAX_VERTEX (4*BASE_SHADER_MAX_RECT)
    // #macro BASE_SHADER_VERTEX_STRIDE 2
    #macro BASE_SHADER_VERTEX_STRIDE 9
    glBufferData(GL_ARRAY_BUFFER, BASE_SHADER_MAX_VERTEX * BASE_SHADER_VERTEX_STRIDE * sizeof f32 , null, GL_DYNAMIC_DRAW);
    a488:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a48f:	b9 92 88 00 00       	mov    $0x8892,%ecx
    a494:	8b d1                	mov    %ecx,%edx
    a496:	ff f2                	push   %rdx
    a498:	b9 04 00 00 00       	mov    $0x4,%ecx
    a49d:	ff f1                	push   %rcx
    a49f:	b9 32 00 00 00       	mov    $0x32,%ecx
    a4a4:	8f c2                	pop    %rdx
    a4a6:	0f af d1             	imul   %ecx,%edx
    a4a9:	ff f2                	push   %rdx
    a4ab:	b9 09 00 00 00       	mov    $0x9,%ecx
    a4b0:	8f c2                	pop    %rdx
    a4b2:	0f af d1             	imul   %ecx,%edx
    a4b5:	ff f2                	push   %rdx
    a4b7:	b9 04 00 00 00       	mov    $0x4,%ecx
    a4bc:	8f c2                	pop    %rdx
    a4be:	0f af d1             	imul   %ecx,%edx
    a4c1:	8b ca                	mov    %edx,%ecx
    a4c3:	ff f1                	push   %rcx
    a4c5:	b9 00 00 00 00       	mov    $0x0,%ecx
    a4ca:	ff f1                	push   %rcx
    a4cc:	b9 e8 88 00 00       	mov    $0x88e8,%ecx
    a4d1:	8b d1                	mov    %ecx,%edx
    a4d3:	89 54 24 30          	mov    %edx,0x30(%rsp)
    a4d7:	8f c1                	pop    %rcx
    a4d9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    a4de:	8f c1                	pop    %rcx
    a4e0:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    a4e5:	8f c1                	pop    %rcx
    a4e7:	89 0c 24             	mov    %ecx,(%rsp)
    a4ea:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a4f1 <main+0xa4f1>
    a4f1:	48 8b 11             	mov    (%rcx),%rdx
    a4f4:	4c 8b d2             	mov    %rdx,%r10
    a4f7:	33 c9                	xor    %ecx,%ecx
    a4f9:	8b 0c 24             	mov    (%rsp),%ecx
    a4fc:	33 d2                	xor    %edx,%edx
    a4fe:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    a503:	45 33 c0             	xor    %r8d,%r8d
    a506:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    a50b:	45 33 c9             	xor    %r9d,%r9d
    a50e:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
    a513:	41 ff d2             	call   *%r10
    a516:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    a51d:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a524:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a52b <main+0xa52b>
    a52b:	48 8b 11             	mov    (%rcx),%rdx
    a52e:	4c 8b d2             	mov    %rdx,%r10
    a531:	41 ff d2             	call   *%r10
    a534:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    a53b:	8b c8                	mov    %eax,%ecx
    a53d:	ff f1                	push   %rcx
    a53f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a546 <main+0xa546>
    a546:	8f c2                	pop    %rdx
    a548:	48 63 da             	movslq %edx,%rbx
    a54b:	88 19                	mov    %bl,(%rcx)
    a54d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a554 <main+0xa554>
    a554:	48 8a 11             	rex.W mov (%rcx),%dl
    a557:	48 0f b6 d2          	movzbq %dl,%rdx
    a55b:	48 83 fa 00          	cmp    $0x0,%rdx
    a55f:	0f 84 17 01 00 00    	je     a67c <main+0xa67c>
    a565:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a56c:	b9 06 00 00 00       	mov    $0x6,%ecx
    a571:	ff f1                	push   %rcx
    a573:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a57a <main+0xa57a>
    a57a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a57f:	8f c1                	pop    %rcx
    a581:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a586:	e8 07 9b ff ff       	call   4092 <main+0x4092>
    a58b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a592:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a599:	b9 18 00 00 00       	mov    $0x18,%ecx
    a59e:	ff f1                	push   %rcx
    a5a0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a5a7 <main+0xa5a7>
    a5a7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a5ac:	8f c1                	pop    %rcx
    a5ae:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a5b3:	e8 da 9a ff ff       	call   4092 <main+0x4092>
    a5b8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a5bf:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a5c6:	b9 01 00 00 00       	mov    $0x1,%ecx
    a5cb:	ff f1                	push   %rcx
    a5cd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a5d4 <main+0xa5d4>
    a5d4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a5d9:	8f c1                	pop    %rcx
    a5db:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a5e0:	e8 ad 9a ff ff       	call   4092 <main+0x4092>
    a5e5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a5ec:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a5f3:	b9 d7 01 00 00       	mov    $0x1d7,%ecx
    a5f8:	48 63 d1             	movslq %ecx,%rdx
    a5fb:	48 89 14 24          	mov    %rdx,(%rsp)
    a5ff:	e8 f2 97 ff ff       	call   3df6 <main+0x3df6>
    a604:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    a60b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a612:	b9 08 00 00 00       	mov    $0x8,%ecx
    a617:	ff f1                	push   %rcx
    a619:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a620 <main+0xa620>
    a620:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a625:	8f c1                	pop    %rcx
    a627:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    a62c:	e8 61 9a ff ff       	call   4092 <main+0x4092>
    a631:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a638:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a63f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a646 <main+0xa646>
    a646:	48 8a 11             	rex.W mov (%rcx),%dl
    a649:	48 0f b6 d2          	movzbq %dl,%rdx
    a64d:	48 0f be ca          	movsbq %dl,%rcx
    a651:	48 89 0c 24          	mov    %rcx,(%rsp)
    a655:	e8 9c 97 ff ff       	call   3df6 <main+0x3df6>
    a65a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a661:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a668:	b9 0a 00 00 00       	mov    $0xa,%ecx
    a66d:	88 0c 24             	mov    %cl,(%rsp)
    a670:	e8 7c 99 ff ff       	call   3ff1 <main+0x3ff1>
    a675:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(0 * sizeof f32));
    a67c:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    a683:	b9 00 00 00 00       	mov    $0x0,%ecx
    a688:	8b d1                	mov    %ecx,%edx
    a68a:	ff f2                	push   %rdx
    a68c:	b9 02 00 00 00       	mov    $0x2,%ecx
    a691:	ff f1                	push   %rcx
    a693:	b9 06 14 00 00       	mov    $0x1406,%ecx
    a698:	8b d1                	mov    %ecx,%edx
    a69a:	ff f2                	push   %rdx
    a69c:	b9 00 00 00 00       	mov    $0x0,%ecx
    a6a1:	48 63 d1             	movslq %ecx,%rdx
    a6a4:	ff f2                	push   %rdx
    a6a6:	b9 09 00 00 00       	mov    $0x9,%ecx
    a6ab:	ff f1                	push   %rcx
    a6ad:	b9 04 00 00 00       	mov    $0x4,%ecx
    a6b2:	8f c2                	pop    %rdx
    a6b4:	0f af d1             	imul   %ecx,%edx
    a6b7:	ff f2                	push   %rdx
    a6b9:	b9 00 00 00 00       	mov    $0x0,%ecx
    a6be:	ff f1                	push   %rcx
    a6c0:	b9 04 00 00 00       	mov    $0x4,%ecx
    a6c5:	8f c2                	pop    %rdx
    a6c7:	0f af d1             	imul   %ecx,%edx
    a6ca:	8b ca                	mov    %edx,%ecx
    a6cc:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    a6d1:	8f c1                	pop    %rcx
    a6d3:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    a6d7:	8f c1                	pop    %rcx
    a6d9:	88 4c 24 30          	mov    %cl,0x30(%rsp)
    a6dd:	8f c1                	pop    %rcx
    a6df:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    a6e3:	8f c1                	pop    %rcx
    a6e5:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    a6e9:	8f c1                	pop    %rcx
    a6eb:	89 0c 24             	mov    %ecx,(%rsp)
    a6ee:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a6f5 <main+0xa6f5>
    a6f5:	48 8b 11             	mov    (%rcx),%rdx
    a6f8:	4c 8b d2             	mov    %rdx,%r10
    a6fb:	33 c9                	xor    %ecx,%ecx
    a6fd:	8b 0c 24             	mov    (%rsp),%ecx
    a700:	33 d2                	xor    %edx,%edx
    a702:	8b 54 24 08          	mov    0x8(%rsp),%edx
    a706:	45 33 c0             	xor    %r8d,%r8d
    a709:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    a70e:	45 33 c9             	xor    %r9d,%r9d
    a711:	4c 8a 4c 24 18       	rex.WR mov 0x18(%rsp),%r9b
    a716:	41 ff d2             	call   *%r10
    a719:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    glEnableVertexAttribArray(0);
    a720:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a727:	b9 00 00 00 00       	mov    $0x0,%ecx
    a72c:	8b d1                	mov    %ecx,%edx
    a72e:	89 14 24             	mov    %edx,(%rsp)
    a731:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a738 <main+0xa738>
    a738:	48 8b 11             	mov    (%rcx),%rdx
    a73b:	4c 8b d2             	mov    %rdx,%r10
    a73e:	33 c9                	xor    %ecx,%ecx
    a740:	8b 0c 24             	mov    (%rsp),%ecx
    a743:	41 ff d2             	call   *%r10
    a746:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(2 * sizeof f32));
    a74d:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    a754:	b9 01 00 00 00       	mov    $0x1,%ecx
    a759:	8b d1                	mov    %ecx,%edx
    a75b:	ff f2                	push   %rdx
    a75d:	b9 02 00 00 00       	mov    $0x2,%ecx
    a762:	ff f1                	push   %rcx
    a764:	b9 06 14 00 00       	mov    $0x1406,%ecx
    a769:	8b d1                	mov    %ecx,%edx
    a76b:	ff f2                	push   %rdx
    a76d:	b9 00 00 00 00       	mov    $0x0,%ecx
    a772:	48 63 d1             	movslq %ecx,%rdx
    a775:	ff f2                	push   %rdx
    a777:	b9 09 00 00 00       	mov    $0x9,%ecx
    a77c:	ff f1                	push   %rcx
    a77e:	b9 04 00 00 00       	mov    $0x4,%ecx
    a783:	8f c2                	pop    %rdx
    a785:	0f af d1             	imul   %ecx,%edx
    a788:	ff f2                	push   %rdx
    a78a:	b9 02 00 00 00       	mov    $0x2,%ecx
    a78f:	ff f1                	push   %rcx
    a791:	b9 04 00 00 00       	mov    $0x4,%ecx
    a796:	8f c2                	pop    %rdx
    a798:	0f af d1             	imul   %ecx,%edx
    a79b:	8b ca                	mov    %edx,%ecx
    a79d:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    a7a2:	8f c1                	pop    %rcx
    a7a4:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    a7a8:	8f c1                	pop    %rcx
    a7aa:	88 4c 24 30          	mov    %cl,0x30(%rsp)
    a7ae:	8f c1                	pop    %rcx
    a7b0:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    a7b4:	8f c1                	pop    %rcx
    a7b6:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    a7ba:	8f c1                	pop    %rcx
    a7bc:	89 0c 24             	mov    %ecx,(%rsp)
    a7bf:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a7c6 <main+0xa7c6>
    a7c6:	48 8b 11             	mov    (%rcx),%rdx
    a7c9:	4c 8b d2             	mov    %rdx,%r10
    a7cc:	33 c9                	xor    %ecx,%ecx
    a7ce:	8b 0c 24             	mov    (%rsp),%ecx
    a7d1:	33 d2                	xor    %edx,%edx
    a7d3:	8b 54 24 08          	mov    0x8(%rsp),%edx
    a7d7:	45 33 c0             	xor    %r8d,%r8d
    a7da:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    a7df:	45 33 c9             	xor    %r9d,%r9d
    a7e2:	4c 8a 4c 24 18       	rex.WR mov 0x18(%rsp),%r9b
    a7e7:	41 ff d2             	call   *%r10
    a7ea:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    glEnableVertexAttribArray(1);
    a7f1:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a7f8:	b9 01 00 00 00       	mov    $0x1,%ecx
    a7fd:	8b d1                	mov    %ecx,%edx
    a7ff:	89 14 24             	mov    %edx,(%rsp)
    a802:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a809 <main+0xa809>
    a809:	48 8b 11             	mov    (%rcx),%rdx
    a80c:	4c 8b d2             	mov    %rdx,%r10
    a80f:	33 c9                	xor    %ecx,%ecx
    a811:	8b 0c 24             	mov    (%rsp),%ecx
    a814:	41 ff d2             	call   *%r10
    a817:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(4 * sizeof f32));
    a81e:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    a825:	b9 02 00 00 00       	mov    $0x2,%ecx
    a82a:	8b d1                	mov    %ecx,%edx
    a82c:	ff f2                	push   %rdx
    a82e:	b9 04 00 00 00       	mov    $0x4,%ecx
    a833:	ff f1                	push   %rcx
    a835:	b9 06 14 00 00       	mov    $0x1406,%ecx
    a83a:	8b d1                	mov    %ecx,%edx
    a83c:	ff f2                	push   %rdx
    a83e:	b9 00 00 00 00       	mov    $0x0,%ecx
    a843:	48 63 d1             	movslq %ecx,%rdx
    a846:	ff f2                	push   %rdx
    a848:	b9 09 00 00 00       	mov    $0x9,%ecx
    a84d:	ff f1                	push   %rcx
    a84f:	b9 04 00 00 00       	mov    $0x4,%ecx
    a854:	8f c2                	pop    %rdx
    a856:	0f af d1             	imul   %ecx,%edx
    a859:	ff f2                	push   %rdx
    a85b:	b9 04 00 00 00       	mov    $0x4,%ecx
    a860:	ff f1                	push   %rcx
    a862:	b9 04 00 00 00       	mov    $0x4,%ecx
    a867:	8f c2                	pop    %rdx
    a869:	0f af d1             	imul   %ecx,%edx
    a86c:	8b ca                	mov    %edx,%ecx
    a86e:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    a873:	8f c1                	pop    %rcx
    a875:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    a879:	8f c1                	pop    %rcx
    a87b:	88 4c 24 30          	mov    %cl,0x30(%rsp)
    a87f:	8f c1                	pop    %rcx
    a881:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    a885:	8f c1                	pop    %rcx
    a887:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    a88b:	8f c1                	pop    %rcx
    a88d:	89 0c 24             	mov    %ecx,(%rsp)
    a890:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a897 <main+0xa897>
    a897:	48 8b 11             	mov    (%rcx),%rdx
    a89a:	4c 8b d2             	mov    %rdx,%r10
    a89d:	33 c9                	xor    %ecx,%ecx
    a89f:	8b 0c 24             	mov    (%rsp),%ecx
    a8a2:	33 d2                	xor    %edx,%edx
    a8a4:	8b 54 24 08          	mov    0x8(%rsp),%edx
    a8a8:	45 33 c0             	xor    %r8d,%r8d
    a8ab:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    a8b0:	45 33 c9             	xor    %r9d,%r9d
    a8b3:	4c 8a 4c 24 18       	rex.WR mov 0x18(%rsp),%r9b
    a8b8:	41 ff d2             	call   *%r10
    a8bb:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    glEnableVertexAttribArray(2);
    a8c2:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a8c9:	b9 02 00 00 00       	mov    $0x2,%ecx
    a8ce:	8b d1                	mov    %ecx,%edx
    a8d0:	89 14 24             	mov    %edx,(%rsp)
    a8d3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a8da <main+0xa8da>
    a8da:	48 8b 11             	mov    (%rcx),%rdx
    a8dd:	4c 8b d2             	mov    %rdx,%r10
    a8e0:	33 c9                	xor    %ecx,%ecx
    a8e2:	8b 0c 24             	mov    (%rsp),%ecx
    a8e5:	41 ff d2             	call   *%r10
    a8e8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(8 * sizeof f32));
    a8ef:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    a8f6:	b9 03 00 00 00       	mov    $0x3,%ecx
    a8fb:	8b d1                	mov    %ecx,%edx
    a8fd:	ff f2                	push   %rdx
    a8ff:	b9 01 00 00 00       	mov    $0x1,%ecx
    a904:	ff f1                	push   %rcx
    a906:	b9 06 14 00 00       	mov    $0x1406,%ecx
    a90b:	8b d1                	mov    %ecx,%edx
    a90d:	ff f2                	push   %rdx
    a90f:	b9 00 00 00 00       	mov    $0x0,%ecx
    a914:	48 63 d1             	movslq %ecx,%rdx
    a917:	ff f2                	push   %rdx
    a919:	b9 09 00 00 00       	mov    $0x9,%ecx
    a91e:	ff f1                	push   %rcx
    a920:	b9 04 00 00 00       	mov    $0x4,%ecx
    a925:	8f c2                	pop    %rdx
    a927:	0f af d1             	imul   %ecx,%edx
    a92a:	ff f2                	push   %rdx
    a92c:	b9 08 00 00 00       	mov    $0x8,%ecx
    a931:	ff f1                	push   %rcx
    a933:	b9 04 00 00 00       	mov    $0x4,%ecx
    a938:	8f c2                	pop    %rdx
    a93a:	0f af d1             	imul   %ecx,%edx
    a93d:	8b ca                	mov    %edx,%ecx
    a93f:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    a944:	8f c1                	pop    %rcx
    a946:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    a94a:	8f c1                	pop    %rcx
    a94c:	88 4c 24 30          	mov    %cl,0x30(%rsp)
    a950:	8f c1                	pop    %rcx
    a952:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    a956:	8f c1                	pop    %rcx
    a958:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    a95c:	8f c1                	pop    %rcx
    a95e:	89 0c 24             	mov    %ecx,(%rsp)
    a961:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a968 <main+0xa968>
    a968:	48 8b 11             	mov    (%rcx),%rdx
    a96b:	4c 8b d2             	mov    %rdx,%r10
    a96e:	33 c9                	xor    %ecx,%ecx
    a970:	8b 0c 24             	mov    (%rsp),%ecx
    a973:	33 d2                	xor    %edx,%edx
    a975:	8b 54 24 08          	mov    0x8(%rsp),%edx
    a979:	45 33 c0             	xor    %r8d,%r8d
    a97c:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    a981:	45 33 c9             	xor    %r9d,%r9d
    a984:	4c 8a 4c 24 18       	rex.WR mov 0x18(%rsp),%r9b
    a989:	41 ff d2             	call   *%r10
    a98c:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    glEnableVertexAttribArray(3);
    a993:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    a99a:	b9 03 00 00 00       	mov    $0x3,%ecx
    a99f:	8b d1                	mov    %ecx,%edx
    a9a1:	89 14 24             	mov    %edx,(%rsp)
    a9a4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # a9ab <main+0xa9ab>
    a9ab:	48 8b 11             	mov    (%rcx),%rdx
    a9ae:	4c 8b d2             	mov    %rdx,%r10
    a9b1:	33 c9                	xor    %ecx,%ecx
    a9b3:	8b 0c 24             	mov    (%rsp),%ecx
    a9b6:	41 ff d2             	call   *%r10
    a9b9:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    indices: u32* = Allocate(6*BASE_SHADER_MAX_RECT * sizeof u32);
    a9c0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    a9c7:	b9 06 00 00 00       	mov    $0x6,%ecx
    a9cc:	ff f1                	push   %rcx
    a9ce:	b9 32 00 00 00       	mov    $0x32,%ecx
    a9d3:	8f c2                	pop    %rdx
    a9d5:	0f af d1             	imul   %ecx,%edx
    a9d8:	ff f2                	push   %rdx
    a9da:	b9 04 00 00 00       	mov    $0x4,%ecx
    a9df:	8f c2                	pop    %rdx
    a9e1:	0f af d1             	imul   %ecx,%edx
    a9e4:	48 63 ca             	movslq %edx,%rcx
    a9e7:	48 89 0c 24          	mov    %rcx,(%rsp)
    a9eb:	e8 ab cf ff ff       	call   799b <main+0x799b>
    a9f0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    a9f7:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    a9fc:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
    defer Free(indices)
    for i: 0..BASE_SHADER_MAX_RECT {
    aa00:	b9 00 00 00 00       	mov    $0x0,%ecx
    aa05:	ff f1                	push   %rcx
    aa07:	8f c1                	pop    %rcx
    aa09:	48 81 e9 01 00 00 00 	sub    $0x1,%rcx
    aa10:	89 4d 98             	mov    %ecx,-0x68(%rbp)
    aa13:	b9 32 00 00 00       	mov    $0x32,%ecx
    aa18:	ff f1                	push   %rcx
    aa1a:	8f c1                	pop    %rcx
    aa1c:	8b 55 98             	mov    -0x68(%rbp),%edx
    aa1f:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    aa26:	89 55 98             	mov    %edx,-0x68(%rbp)
    aa29:	3b d1                	cmp    %ecx,%edx
    aa2b:	40 0f 9c c2          	rex setl %dl
    aa2f:	48 0f b6 d2          	movzbq %dl,%rdx
    aa33:	48 83 fa 00          	cmp    $0x0,%rdx
    aa37:	0f 84 2e 02 00 00    	je     ac6b <main+0xac6b>
        indices[i * 6] = i * 4 + 0;
    aa3d:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    aa40:	ff f1                	push   %rcx
    aa42:	b9 04 00 00 00       	mov    $0x4,%ecx
    aa47:	8f c2                	pop    %rdx
    aa49:	0f af d1             	imul   %ecx,%edx
    aa4c:	ff f2                	push   %rdx
    aa4e:	b9 00 00 00 00       	mov    $0x0,%ecx
    aa53:	8f c2                	pop    %rdx
    aa55:	03 d1                	add    %ecx,%edx
    aa57:	ff f2                	push   %rdx
    aa59:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    aa60:	48 03 cd             	add    %rbp,%rcx
    aa63:	ff f1                	push   %rcx
    aa65:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    aa68:	ff f1                	push   %rcx
    aa6a:	b9 06 00 00 00       	mov    $0x6,%ecx
    aa6f:	8f c2                	pop    %rdx
    aa71:	0f af d1             	imul   %ecx,%edx
    aa74:	8f c1                	pop    %rcx
    aa76:	48 8b 19             	mov    (%rcx),%rbx
    aa79:	b9 04 00 00 00       	mov    $0x4,%ecx
    aa7e:	48 8b c2             	mov    %rdx,%rax
    aa81:	48 f7 e1             	mul    %rcx
    aa84:	48 8b d0             	mov    %rax,%rdx
    aa87:	48 03 da             	add    %rdx,%rbx
    aa8a:	8f c1                	pop    %rcx
    aa8c:	8b d1                	mov    %ecx,%edx
    aa8e:	89 13                	mov    %edx,(%rbx)
        indices[i * 6 + 1] = i * 4 + 1;
    aa90:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    aa93:	ff f1                	push   %rcx
    aa95:	b9 04 00 00 00       	mov    $0x4,%ecx
    aa9a:	8f c2                	pop    %rdx
    aa9c:	0f af d1             	imul   %ecx,%edx
    aa9f:	ff f2                	push   %rdx
    aaa1:	b9 01 00 00 00       	mov    $0x1,%ecx
    aaa6:	8f c2                	pop    %rdx
    aaa8:	03 d1                	add    %ecx,%edx
    aaaa:	ff f2                	push   %rdx
    aaac:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    aab3:	48 03 cd             	add    %rbp,%rcx
    aab6:	ff f1                	push   %rcx
    aab8:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    aabb:	ff f1                	push   %rcx
    aabd:	b9 06 00 00 00       	mov    $0x6,%ecx
    aac2:	8f c2                	pop    %rdx
    aac4:	0f af d1             	imul   %ecx,%edx
    aac7:	ff f2                	push   %rdx
    aac9:	b9 01 00 00 00       	mov    $0x1,%ecx
    aace:	8f c2                	pop    %rdx
    aad0:	03 d1                	add    %ecx,%edx
    aad2:	8f c1                	pop    %rcx
    aad4:	48 8b 19             	mov    (%rcx),%rbx
    aad7:	b9 04 00 00 00       	mov    $0x4,%ecx
    aadc:	48 8b c2             	mov    %rdx,%rax
    aadf:	48 f7 e1             	mul    %rcx
    aae2:	48 8b d0             	mov    %rax,%rdx
    aae5:	48 03 da             	add    %rdx,%rbx
    aae8:	8f c1                	pop    %rcx
    aaea:	8b d1                	mov    %ecx,%edx
    aaec:	89 13                	mov    %edx,(%rbx)
        indices[i * 6 + 2] = i * 4 + 2;
    aaee:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    aaf1:	ff f1                	push   %rcx
    aaf3:	b9 04 00 00 00       	mov    $0x4,%ecx
    aaf8:	8f c2                	pop    %rdx
    aafa:	0f af d1             	imul   %ecx,%edx
    aafd:	ff f2                	push   %rdx
    aaff:	b9 02 00 00 00       	mov    $0x2,%ecx
    ab04:	8f c2                	pop    %rdx
    ab06:	03 d1                	add    %ecx,%edx
    ab08:	ff f2                	push   %rdx
    ab0a:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    ab11:	48 03 cd             	add    %rbp,%rcx
    ab14:	ff f1                	push   %rcx
    ab16:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    ab19:	ff f1                	push   %rcx
    ab1b:	b9 06 00 00 00       	mov    $0x6,%ecx
    ab20:	8f c2                	pop    %rdx
    ab22:	0f af d1             	imul   %ecx,%edx
    ab25:	ff f2                	push   %rdx
    ab27:	b9 02 00 00 00       	mov    $0x2,%ecx
    ab2c:	8f c2                	pop    %rdx
    ab2e:	03 d1                	add    %ecx,%edx
    ab30:	8f c1                	pop    %rcx
    ab32:	48 8b 19             	mov    (%rcx),%rbx
    ab35:	b9 04 00 00 00       	mov    $0x4,%ecx
    ab3a:	48 8b c2             	mov    %rdx,%rax
    ab3d:	48 f7 e1             	mul    %rcx
    ab40:	48 8b d0             	mov    %rax,%rdx
    ab43:	48 03 da             	add    %rdx,%rbx
    ab46:	8f c1                	pop    %rcx
    ab48:	8b d1                	mov    %ecx,%edx
    ab4a:	89 13                	mov    %edx,(%rbx)
        indices[i * 6 + 3] = i * 4 + 2;
    ab4c:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    ab4f:	ff f1                	push   %rcx
    ab51:	b9 04 00 00 00       	mov    $0x4,%ecx
    ab56:	8f c2                	pop    %rdx
    ab58:	0f af d1             	imul   %ecx,%edx
    ab5b:	ff f2                	push   %rdx
    ab5d:	b9 02 00 00 00       	mov    $0x2,%ecx
    ab62:	8f c2                	pop    %rdx
    ab64:	03 d1                	add    %ecx,%edx
    ab66:	ff f2                	push   %rdx
    ab68:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    ab6f:	48 03 cd             	add    %rbp,%rcx
    ab72:	ff f1                	push   %rcx
    ab74:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    ab77:	ff f1                	push   %rcx
    ab79:	b9 06 00 00 00       	mov    $0x6,%ecx
    ab7e:	8f c2                	pop    %rdx
    ab80:	0f af d1             	imul   %ecx,%edx
    ab83:	ff f2                	push   %rdx
    ab85:	b9 03 00 00 00       	mov    $0x3,%ecx
    ab8a:	8f c2                	pop    %rdx
    ab8c:	03 d1                	add    %ecx,%edx
    ab8e:	8f c1                	pop    %rcx
    ab90:	48 8b 19             	mov    (%rcx),%rbx
    ab93:	b9 04 00 00 00       	mov    $0x4,%ecx
    ab98:	48 8b c2             	mov    %rdx,%rax
    ab9b:	48 f7 e1             	mul    %rcx
    ab9e:	48 8b d0             	mov    %rax,%rdx
    aba1:	48 03 da             	add    %rdx,%rbx
    aba4:	8f c1                	pop    %rcx
    aba6:	8b d1                	mov    %ecx,%edx
    aba8:	89 13                	mov    %edx,(%rbx)
        indices[i * 6 + 4] = i * 4 + 3;
    abaa:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    abad:	ff f1                	push   %rcx
    abaf:	b9 04 00 00 00       	mov    $0x4,%ecx
    abb4:	8f c2                	pop    %rdx
    abb6:	0f af d1             	imul   %ecx,%edx
    abb9:	ff f2                	push   %rdx
    abbb:	b9 03 00 00 00       	mov    $0x3,%ecx
    abc0:	8f c2                	pop    %rdx
    abc2:	03 d1                	add    %ecx,%edx
    abc4:	ff f2                	push   %rdx
    abc6:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    abcd:	48 03 cd             	add    %rbp,%rcx
    abd0:	ff f1                	push   %rcx
    abd2:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    abd5:	ff f1                	push   %rcx
    abd7:	b9 06 00 00 00       	mov    $0x6,%ecx
    abdc:	8f c2                	pop    %rdx
    abde:	0f af d1             	imul   %ecx,%edx
    abe1:	ff f2                	push   %rdx
    abe3:	b9 04 00 00 00       	mov    $0x4,%ecx
    abe8:	8f c2                	pop    %rdx
    abea:	03 d1                	add    %ecx,%edx
    abec:	8f c1                	pop    %rcx
    abee:	48 8b 19             	mov    (%rcx),%rbx
    abf1:	b9 04 00 00 00       	mov    $0x4,%ecx
    abf6:	48 8b c2             	mov    %rdx,%rax
    abf9:	48 f7 e1             	mul    %rcx
    abfc:	48 8b d0             	mov    %rax,%rdx
    abff:	48 03 da             	add    %rdx,%rbx
    ac02:	8f c1                	pop    %rcx
    ac04:	8b d1                	mov    %ecx,%edx
    ac06:	89 13                	mov    %edx,(%rbx)
        indices[i * 6 + 5] = i * 4 + 0;
    ac08:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    ac0b:	ff f1                	push   %rcx
    ac0d:	b9 04 00 00 00       	mov    $0x4,%ecx
    ac12:	8f c2                	pop    %rdx
    ac14:	0f af d1             	imul   %ecx,%edx
    ac17:	ff f2                	push   %rdx
    ac19:	b9 00 00 00 00       	mov    $0x0,%ecx
    ac1e:	8f c2                	pop    %rdx
    ac20:	03 d1                	add    %ecx,%edx
    ac22:	ff f2                	push   %rdx
    ac24:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    ac2b:	48 03 cd             	add    %rbp,%rcx
    ac2e:	ff f1                	push   %rcx
    ac30:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    ac33:	ff f1                	push   %rcx
    ac35:	b9 06 00 00 00       	mov    $0x6,%ecx
    ac3a:	8f c2                	pop    %rdx
    ac3c:	0f af d1             	imul   %ecx,%edx
    ac3f:	ff f2                	push   %rdx
    ac41:	b9 05 00 00 00       	mov    $0x5,%ecx
    ac46:	8f c2                	pop    %rdx
    ac48:	03 d1                	add    %ecx,%edx
    ac4a:	8f c1                	pop    %rcx
    ac4c:	48 8b 19             	mov    (%rcx),%rbx
    ac4f:	b9 04 00 00 00       	mov    $0x4,%ecx
    ac54:	48 8b c2             	mov    %rdx,%rax
    ac57:	48 f7 e1             	mul    %rcx
    ac5a:	48 8b d0             	mov    %rax,%rdx
    ac5d:	48 03 da             	add    %rdx,%rbx
    ac60:	8f c1                	pop    %rcx
    ac62:	8b d1                	mov    %ecx,%edx
    ac64:	89 13                	mov    %edx,(%rbx)
    ac66:	e9 a8 fd ff ff       	jmp    aa13 <main+0xaa13>
    }
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);
    ac6b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ac72:	b9 93 88 00 00       	mov    $0x8893,%ecx
    ac77:	8b d1                	mov    %ecx,%edx
    ac79:	ff f2                	push   %rdx
    ac7b:	8b 4d a8             	mov    -0x58(%rbp),%ecx
    ac7e:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    ac82:	8f c1                	pop    %rcx
    ac84:	89 0c 24             	mov    %ecx,(%rsp)
    ac87:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ac8e <main+0xac8e>
    ac8e:	48 8b 11             	mov    (%rcx),%rdx
    ac91:	4c 8b d2             	mov    %rdx,%r10
    ac94:	33 c9                	xor    %ecx,%ecx
    ac96:	8b 0c 24             	mov    (%rsp),%ecx
    ac99:	33 d2                	xor    %edx,%edx
    ac9b:	8b 54 24 08          	mov    0x8(%rsp),%edx
    ac9f:	41 ff d2             	call   *%r10
    aca2:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6*BASE_SHADER_MAX_RECT*sizeof u32, indices, GL_STATIC_DRAW);
    aca9:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    acb0:	b9 93 88 00 00       	mov    $0x8893,%ecx
    acb5:	8b d1                	mov    %ecx,%edx
    acb7:	ff f2                	push   %rdx
    acb9:	b9 06 00 00 00       	mov    $0x6,%ecx
    acbe:	ff f1                	push   %rcx
    acc0:	b9 32 00 00 00       	mov    $0x32,%ecx
    acc5:	8f c2                	pop    %rdx
    acc7:	0f af d1             	imul   %ecx,%edx
    acca:	ff f2                	push   %rdx
    accc:	b9 04 00 00 00       	mov    $0x4,%ecx
    acd1:	8f c2                	pop    %rdx
    acd3:	0f af d1             	imul   %ecx,%edx
    acd6:	8b ca                	mov    %edx,%ecx
    acd8:	ff f1                	push   %rcx
    acda:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    acde:	ff f1                	push   %rcx
    ace0:	b9 e4 88 00 00       	mov    $0x88e4,%ecx
    ace5:	8b d1                	mov    %ecx,%edx
    ace7:	89 54 24 30          	mov    %edx,0x30(%rsp)
    aceb:	8f c1                	pop    %rcx
    aced:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    acf2:	8f c1                	pop    %rcx
    acf4:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    acf9:	8f c1                	pop    %rcx
    acfb:	89 0c 24             	mov    %ecx,(%rsp)
    acfe:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ad05 <main+0xad05>
    ad05:	48 8b 11             	mov    (%rcx),%rdx
    ad08:	4c 8b d2             	mov    %rdx,%r10
    ad0b:	33 c9                	xor    %ecx,%ecx
    ad0d:	8b 0c 24             	mov    (%rsp),%ecx
    ad10:	33 d2                	xor    %edx,%edx
    ad12:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    ad17:	45 33 c0             	xor    %r8d,%r8d
    ad1a:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    ad1f:	45 33 c9             	xor    %r9d,%r9d
    ad22:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
    ad27:	41 ff d2             	call   *%r10
    ad2a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    // TODO: Don't hardcode font path
    window.font = CreateFont("assets/fonts/consolas42.png")
    ad31:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ad38:	b9 1b 00 00 00       	mov    $0x1b,%ecx
    ad3d:	ff f1                	push   %rcx
    ad3f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ad46 <main+0xad46>
    ad46:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ad4b:	8f c1                	pop    %rcx
    ad4d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ad52:	e8 b9 4b 00 00       	call   f910 <main+0xf910>
    ad57:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ad5e:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    ad63:	ff f1                	push   %rcx
    ad65:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    ad6c:	48 03 cd             	add    %rbp,%rcx
    ad6f:	48 8b 11             	mov    (%rcx),%rdx
    ad72:	b9 30 00 00 00       	mov    $0x30,%ecx
    ad77:	48 03 d1             	add    %rcx,%rdx
    ad7a:	8f c1                	pop    %rcx
    ad7c:	48 89 0a             	mov    %rcx,(%rdx)
    defer Free(indices)
    ad7f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ad86:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
    ad8a:	ff f1                	push   %rcx
    ad8c:	b9 00 00 00 00       	mov    $0x0,%ecx
    ad91:	48 63 d1             	movslq %ecx,%rdx
    ad94:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    ad99:	8f c1                	pop    %rcx
    ad9b:	48 89 0c 24          	mov    %rcx,(%rsp)
    ad9f:	e8 ad cc ff ff       	call   7a51 <main+0x7a51>
    ada4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    return window;
    adab:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    adaf:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    adb3:	48 81 c4 70 00 00 00 	add    $0x70,%rsp
    adba:	8f c5                	pop    %rbp
    adbc:	c3                   	ret
    adbd:	48 81 c4 70 00 00 00 	add    $0x70,%rsp
    adc4:	8f c5                	pop    %rbp
    adc6:	c3                   	ret
}
// refresh screen buffer, poll events
fn RefreshWindow(window: WindowContext*) {
    adc7:	ff f5                	push   %rbp
    adc9:	48 8b ec             	mov    %rsp,%rbp
    adcc:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    
    // prev_timestamp 
    timestamp := StartMeasure()
    add3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    adda:	e8 1a c5 ff ff       	call   72f9 <main+0x72f9>
    addf:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ade6:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    adeb:	48 8b c9             	mov    %rcx,%rcx
    adee:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    if window.prev_timestamp != 0
    adf2:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    adf9:	48 03 cd             	add    %rbp,%rcx
    adfc:	48 8b 11             	mov    (%rcx),%rdx
    adff:	b9 18 00 00 00       	mov    $0x18,%ecx
    ae04:	48 03 d1             	add    %rcx,%rdx
    ae07:	48 8b 0a             	mov    (%rdx),%rcx
    ae0a:	ff f1                	push   %rcx
    ae0c:	b9 00 00 00 00       	mov    $0x0,%ecx
    ae11:	8f c2                	pop    %rdx
    ae13:	48 8b da             	mov    %rdx,%rbx
    ae16:	48 63 d1             	movslq %ecx,%rdx
    ae19:	48 3b da             	cmp    %rdx,%rbx
    ae1c:	40 0f 95 c3          	rex setne %bl
    ae20:	48 0f b6 db          	movzbq %bl,%rbx
    ae24:	48 83 fb 00          	cmp    $0x0,%rbx
    ae28:	0f 84 7d 00 00 00    	je     aeab <main+0xaeab>
        window.delta = DiffMeasure(timestamp - window.prev_timestamp)
    ae2e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ae35:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    ae39:	ff f1                	push   %rcx
    ae3b:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    ae42:	48 03 cd             	add    %rbp,%rcx
    ae45:	48 8b 11             	mov    (%rcx),%rdx
    ae48:	b9 18 00 00 00       	mov    $0x18,%ecx
    ae4d:	48 03 d1             	add    %rcx,%rdx
    ae50:	48 8b 0a             	mov    (%rdx),%rcx
    ae53:	8f c2                	pop    %rdx
    ae55:	48 8b d9             	mov    %rcx,%rbx
    ae58:	48 2b d3             	sub    %rbx,%rdx
    ae5b:	48 89 14 24          	mov    %rdx,(%rsp)
    ae5f:	e8 e1 c4 ff ff       	call   7345 <main+0x7345>
    ae64:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ae6b:	f2 0f 10 44 24 e0    	movsd  -0x20(%rsp),%xmm0
    ae71:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ae78:	f2 0f 11 04 24       	movsd  %xmm0,(%rsp)
    ae7d:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    ae84:	48 03 cd             	add    %rbp,%rcx
    ae87:	48 8b 11             	mov    (%rcx),%rdx
    ae8a:	b9 14 00 00 00       	mov    $0x14,%ecx
    ae8f:	48 03 d1             	add    %rcx,%rdx
    ae92:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
    ae97:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ae9e:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    aea2:	f3 0f 11 0a          	movss  %xmm1,(%rdx)
    aea6:	e9 4a 00 00 00       	jmp    aef5 <main+0xaef5>
    else
        window.delta = 1./60.
    aeab:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    aeb0:	ff f1                	push   %rcx
    aeb2:	c7 44 24 f8 00 00 70 	movl   $0x42700000,-0x8(%rsp)
    aeb9:	42 
    aeba:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    aec0:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    aec5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    aecc:	f3 0f 5e c8          	divss  %xmm0,%xmm1
    aed0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    aed7:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    aedc:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    aee3:	48 03 cd             	add    %rbp,%rcx
    aee6:	48 8b 11             	mov    (%rcx),%rdx
    aee9:	b9 14 00 00 00       	mov    $0x14,%ecx
    aeee:	48 03 d1             	add    %rcx,%rdx
    aef1:	8f c1                	pop    %rcx
    aef3:	89 0a                	mov    %ecx,(%rdx)
    window.prev_timestamp = timestamp
    aef5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    aef9:	ff f1                	push   %rcx
    aefb:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    af02:	48 03 cd             	add    %rbp,%rcx
    af05:	48 8b 11             	mov    (%rcx),%rdx
    af08:	b9 18 00 00 00       	mov    $0x18,%ecx
    af0d:	48 03 d1             	add    %rcx,%rdx
    af10:	8f c1                	pop    %rcx
    af12:	48 8b d9             	mov    %rcx,%rbx
    af15:	48 89 1a             	mov    %rbx,(%rdx)
    
    window.resetEvents(false)
    af18:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    af1f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    af26:	48 03 cd             	add    %rbp,%rcx
    af29:	48 8b 11             	mov    (%rcx),%rdx
    af2c:	ff f2                	push   %rdx
    af2e:	b9 00 00 00 00       	mov    $0x0,%ecx
    af33:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    af37:	8f c1                	pop    %rcx
    af39:	48 89 0c 24          	mov    %rcx,(%rsp)
    af3d:	e8 49 58 00 00       	call   1078b <main+0x1078b>
    af42:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    window.resetPollChar()
    af49:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    af50:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    af57:	48 03 cd             	add    %rbp,%rcx
    af5a:	48 8b 11             	mov    (%rcx),%rdx
    af5d:	48 89 14 24          	mov    %rdx,(%rsp)
    af61:	e8 e9 57 00 00       	call   1074f <main+0x1074f>
    af66:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    
    glfwSwapBuffers(window.glfw_window);
    af6d:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    af74:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    af7b:	48 03 cd             	add    %rbp,%rcx
    af7e:	48 8b 11             	mov    (%rcx),%rdx
    af81:	48 8b 0a             	mov    (%rdx),%rcx
    af84:	48 89 0c 24          	mov    %rcx,(%rsp)
    af88:	33 c9                	xor    %ecx,%ecx
    af8a:	48 8b 0c 24          	mov    (%rsp),%rcx
    af8e:	ff 15 00 00 00 00    	call   *0x0(%rip)        # af94 <main+0xaf94>
    af94:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    // temporary sleep to avoid overuse of CPU resources
    if window.delta < 0.001
    af9b:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    afa2:	48 03 cd             	add    %rbp,%rcx
    afa5:	48 8b 11             	mov    (%rcx),%rdx
    afa8:	b9 14 00 00 00       	mov    $0x14,%ecx
    afad:	48 03 d1             	add    %rcx,%rdx
    afb0:	8b 0a                	mov    (%rdx),%ecx
    afb2:	ff f1                	push   %rcx
    afb4:	c7 44 24 f8 6f 12 83 	movl   $0x3a83126f,-0x8(%rsp)
    afbb:	3a 
    afbc:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    afc2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    afc7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    afce:	0f 2f c8             	comiss %xmm0,%xmm1
    afd1:	40 0f 92 c1          	rex setb %cl
    afd5:	40 0f b6 c9          	rex movzbl %cl,%ecx
    afd9:	48 83 f9 00          	cmp    $0x0,%rcx
    afdd:	0f 84 26 00 00 00    	je     b009 <main+0xb009>
        ProcessSleep(0.001)
    afe3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    afea:	c7 44 24 f8 6f 12 83 	movl   $0x3a83126f,-0x8(%rsp)
    aff1:	3a 
    aff2:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    aff8:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    affd:	e8 bd c3 ff ff       	call   73bf <main+0x73bf>
    b002:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    
    glfwPollEvents();
    b009:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    b010:	ff 15 00 00 00 00    	call   *0x0(%rip)        # b016 <main+0xb016>
    b016:	48 81 c4 28 00 00 00 	add    $0x28,%rsp

    window.running = !glfwWindowShouldClose(window.glfw_window) && !window.schedule_close
    b01d:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    b024:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b02b:	48 03 cd             	add    %rbp,%rcx
    b02e:	48 8b 11             	mov    (%rcx),%rdx
    b031:	48 8b 0a             	mov    (%rdx),%rcx
    b034:	48 89 0c 24          	mov    %rcx,(%rsp)
    b038:	33 c9                	xor    %ecx,%ecx
    b03a:	48 8b 0c 24          	mov    (%rsp),%rcx
    b03e:	ff 15 00 00 00 00    	call   *0x0(%rip)        # b044 <main+0xb044>
    b044:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    b04b:	48 63 c8             	movslq %eax,%rcx
    b04e:	48 85 c9             	test   %rcx,%rcx
    b051:	40 0f 94 c1          	rex sete %cl
    b055:	48 0f b6 c9          	movzbq %cl,%rcx
    b059:	ff f1                	push   %rcx
    b05b:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b062:	48 03 cd             	add    %rbp,%rcx
    b065:	48 8b 11             	mov    (%rcx),%rdx
    b068:	b9 11 00 00 00       	mov    $0x11,%ecx
    b06d:	48 03 d1             	add    %rcx,%rdx
    b070:	48 8a 0a             	rex.W mov (%rdx),%cl
    b073:	48 0f b6 c9          	movzbq %cl,%rcx
    b077:	48 85 c9             	test   %rcx,%rcx
    b07a:	40 0f 94 c1          	rex sete %cl
    b07e:	48 0f b6 c9          	movzbq %cl,%rcx
    b082:	8f c2                	pop    %rdx
    b084:	48 85 d2             	test   %rdx,%rdx
    b087:	74 0a                	je     b093 <main+0xb093>
    b089:	48 85 c9             	test   %rcx,%rcx
    b08c:	74 05                	je     b093 <main+0xb093>
    b08e:	c6 c2 01             	mov    $0x1,%dl
    b091:	eb 03                	jmp    b096 <main+0xb096>
    b093:	c6 c2 00             	mov    $0x0,%dl
    b096:	48 0f b6 d2          	movzbq %dl,%rdx
    b09a:	ff f2                	push   %rdx
    b09c:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b0a3:	48 03 cd             	add    %rbp,%rcx
    b0a6:	48 8b 11             	mov    (%rcx),%rdx
    b0a9:	b9 10 00 00 00       	mov    $0x10,%ecx
    b0ae:	48 03 d1             	add    %rcx,%rdx
    b0b1:	8f c1                	pop    %rcx
    b0b3:	88 0a                	mov    %cl,(%rdx)

    
    glViewport(0, 0, window.width, window.height)
    b0b5:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    b0bc:	b9 00 00 00 00       	mov    $0x0,%ecx
    b0c1:	ff f1                	push   %rcx
    b0c3:	b9 00 00 00 00       	mov    $0x0,%ecx
    b0c8:	ff f1                	push   %rcx
    b0ca:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b0d1:	48 03 cd             	add    %rbp,%rcx
    b0d4:	48 8b 11             	mov    (%rcx),%rdx
    b0d7:	b9 08 00 00 00       	mov    $0x8,%ecx
    b0dc:	48 03 d1             	add    %rcx,%rdx
    b0df:	f3 0f 10 02          	movss  (%rdx),%xmm0
    b0e3:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
    b0e7:	ff f1                	push   %rcx
    b0e9:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b0f0:	48 03 cd             	add    %rbp,%rcx
    b0f3:	48 8b 11             	mov    (%rcx),%rdx
    b0f6:	b9 0c 00 00 00       	mov    $0xc,%ecx
    b0fb:	48 03 d1             	add    %rcx,%rdx
    b0fe:	f3 0f 10 02          	movss  (%rdx),%xmm0
    b102:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
    b106:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
    b10a:	8f c1                	pop    %rcx
    b10c:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    b110:	8f c1                	pop    %rcx
    b112:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    b116:	8f c1                	pop    %rcx
    b118:	89 0c 24             	mov    %ecx,(%rsp)
    b11b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b122 <main+0xb122>
    b122:	48 8b 11             	mov    (%rcx),%rdx
    b125:	4c 8b d2             	mov    %rdx,%r10
    b128:	33 c9                	xor    %ecx,%ecx
    b12a:	8b 0c 24             	mov    (%rsp),%ecx
    b12d:	33 d2                	xor    %edx,%edx
    b12f:	8b 54 24 08          	mov    0x8(%rsp),%edx
    b133:	45 33 c0             	xor    %r8d,%r8d
    b136:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    b13b:	45 33 c9             	xor    %r9d,%r9d
    b13e:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
    b143:	41 ff d2             	call   *%r10
    b146:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    b14d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b154:	8f c5                	pop    %rbp
    b156:	c3                   	ret
        return box.x + box.w > x && box.x < x + w &&
            box.y + box.h > y && box.y < y + h
    }
}

fn FillColor(window: WindowContext*, color: Color) {
    b157:	ff f5                	push   %rbp
    b159:	48 8b ec             	mov    %rsp,%rbp
    glClearColor(color.r, color.g, color.b, color.a);
    b15c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b163:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    b16a:	48 03 cd             	add    %rbp,%rcx
    b16d:	8b 11                	mov    (%rcx),%edx
    b16f:	ff f2                	push   %rdx
    b171:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    b178:	48 03 cd             	add    %rbp,%rcx
    b17b:	ba 04 00 00 00       	mov    $0x4,%edx
    b180:	48 03 ca             	add    %rdx,%rcx
    b183:	8b 11                	mov    (%rcx),%edx
    b185:	ff f2                	push   %rdx
    b187:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    b18e:	48 03 cd             	add    %rbp,%rcx
    b191:	ba 08 00 00 00       	mov    $0x8,%edx
    b196:	48 03 ca             	add    %rdx,%rcx
    b199:	8b 11                	mov    (%rcx),%edx
    b19b:	ff f2                	push   %rdx
    b19d:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
    b1a4:	48 03 cd             	add    %rbp,%rcx
    b1a7:	ba 0c 00 00 00       	mov    $0xc,%edx
    b1ac:	48 03 ca             	add    %rdx,%rcx
    b1af:	f3 0f 10 01          	movss  (%rcx),%xmm0
    b1b3:	f3 0f 11 44 24 30    	movss  %xmm0,0x30(%rsp)
    b1b9:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b1be:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b1c5:	f3 0f 11 44 24 20    	movss  %xmm0,0x20(%rsp)
    b1cb:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b1d0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b1d7:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    b1dd:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b1e2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b1e9:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    b1ee:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b1f5 <main+0xb1f5>
    b1f5:	48 8b 11             	mov    (%rcx),%rdx
    b1f8:	4c 8b d2             	mov    %rdx,%r10
    b1fb:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b200:	f3 0f 10 4c 24 08    	movss  0x8(%rsp),%xmm1
    b206:	f3 0f 10 54 24 10    	movss  0x10(%rsp),%xmm2
    b20c:	f3 0f 10 5c 24 18    	movss  0x18(%rsp),%xmm3
    b212:	41 ff d2             	call   *%r10
    b215:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glClear(GL_COLOR_BUFFER_BIT);
    b21c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b223:	b9 00 40 00 00       	mov    $0x4000,%ecx
    b228:	8b d1                	mov    %ecx,%edx
    b22a:	89 14 24             	mov    %edx,(%rsp)
    b22d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b234 <main+0xb234>
    b234:	48 8b 11             	mov    (%rcx),%rdx
    b237:	4c 8b d2             	mov    %rdx,%r10
    b23a:	33 c9                	xor    %ecx,%ecx
    b23c:	8b 0c 24             	mov    (%rsp),%ecx
    b23f:	41 ff d2             	call   *%r10
    b242:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    b249:	8f c5                	pop    %rbp
    b24b:	c3                   	ret
    }
#endmacro
fn FillRect(window: WindowContext*, box: Box, color: Color) {
    FillRect(window, box.x, box.y, box.w, box.h, color)
}
fn FillRect(window: WindowContext*, x: f32, y: f32, w: f32, h: f32, color: Color) {
    b24c:	ff f5                	push   %rbp
    b24e:	48 8b ec             	mov    %rsp,%rbp
    b251:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
    // @dumpbc
    glUseProgram(window.base_shader);
    b258:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b25f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b266:	48 03 cd             	add    %rbp,%rcx
    b269:	48 8b 11             	mov    (%rcx),%rdx
    b26c:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    b271:	48 03 d1             	add    %rcx,%rdx
    b274:	8b 0a                	mov    (%rdx),%ecx
    b276:	89 0c 24             	mov    %ecx,(%rsp)
    b279:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b280 <main+0xb280>
    b280:	48 8b 11             	mov    (%rcx),%rdx
    b283:	4c 8b d2             	mov    %rdx,%r10
    b286:	33 c9                	xor    %ecx,%ecx
    b288:	8b 0c 24             	mov    (%rsp),%ecx
    b28b:	41 ff d2             	call   *%r10
    b28e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    glDisable(GL_DEPTH_TEST)
    b295:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b29c:	b9 71 0b 00 00       	mov    $0xb71,%ecx
    b2a1:	8b d1                	mov    %ecx,%edx
    b2a3:	89 14 24             	mov    %edx,(%rsp)
    b2a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b2ad <main+0xb2ad>
    b2ad:	48 8b 11             	mov    (%rcx),%rdx
    b2b0:	4c 8b d2             	mov    %rdx,%r10
    b2b3:	33 c9                	xor    %ecx,%ecx
    b2b5:	8b 0c 24             	mov    (%rsp),%ecx
    b2b8:	41 ff d2             	call   *%r10
    b2bb:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glEnable(GL_BLEND)
    b2c2:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b2c9:	b9 e2 0b 00 00       	mov    $0xbe2,%ecx
    b2ce:	8b d1                	mov    %ecx,%edx
    b2d0:	89 14 24             	mov    %edx,(%rsp)
    b2d3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b2da <main+0xb2da>
    b2da:	48 8b 11             	mov    (%rcx),%rdx
    b2dd:	4c 8b d2             	mov    %rdx,%r10
    b2e0:	33 c9                	xor    %ecx,%ecx
    b2e2:	8b 0c 24             	mov    (%rsp),%ecx
    b2e5:	41 ff d2             	call   *%r10
    b2e8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    // glDisable(GL_CULL)
    
    // TODO: Store location in a map
    loc := glGetUniformLocation(window.base_shader, "uWindow".ptr)
    b2ef:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b2f6:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b2fd:	48 03 cd             	add    %rbp,%rcx
    b300:	48 8b 11             	mov    (%rcx),%rdx
    b303:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    b308:	48 03 d1             	add    %rcx,%rdx
    b30b:	8b 0a                	mov    (%rdx),%ecx
    b30d:	ff f1                	push   %rcx
    b30f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b316 <main+0xb316>
    b316:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    b31b:	8f c1                	pop    %rcx
    b31d:	89 0c 24             	mov    %ecx,(%rsp)
    b320:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b327 <main+0xb327>
    b327:	48 8b 11             	mov    (%rcx),%rdx
    b32a:	4c 8b d2             	mov    %rdx,%r10
    b32d:	33 c9                	xor    %ecx,%ecx
    b32f:	8b 0c 24             	mov    (%rsp),%ecx
    b332:	33 d2                	xor    %edx,%edx
    b334:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    b339:	41 ff d2             	call   *%r10
    b33c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    b343:	8b c8                	mov    %eax,%ecx
    b345:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    
    glUniform2f(loc,window.width,window.height);
    b348:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    b34f:	8b 4d f8             	mov    -0x8(%rbp),%ecx
    b352:	8b d1                	mov    %ecx,%edx
    b354:	ff f2                	push   %rdx
    b356:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b35d:	48 03 cd             	add    %rbp,%rcx
    b360:	48 8b 11             	mov    (%rcx),%rdx
    b363:	b9 08 00 00 00       	mov    $0x8,%ecx
    b368:	48 03 d1             	add    %rcx,%rdx
    b36b:	8b 0a                	mov    (%rdx),%ecx
    b36d:	ff f1                	push   %rcx
    b36f:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b376:	48 03 cd             	add    %rbp,%rcx
    b379:	48 8b 11             	mov    (%rcx),%rdx
    b37c:	b9 0c 00 00 00       	mov    $0xc,%ecx
    b381:	48 03 d1             	add    %rcx,%rdx
    b384:	f3 0f 10 02          	movss  (%rdx),%xmm0
    b388:	f3 0f 11 44 24 20    	movss  %xmm0,0x20(%rsp)
    b38e:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b393:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b39a:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    b3a0:	8f c1                	pop    %rcx
    b3a2:	89 0c 24             	mov    %ecx,(%rsp)
    b3a5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # b3ac <main+0xb3ac>
    b3ac:	48 8b 11             	mov    (%rcx),%rdx
    b3af:	4c 8b d2             	mov    %rdx,%r10
    b3b2:	33 c9                	xor    %ecx,%ecx
    b3b4:	8b 0c 24             	mov    (%rsp),%ecx
    b3b7:	f3 0f 10 4c 24 08    	movss  0x8(%rsp),%xmm1
    b3bd:	f3 0f 10 54 24 10    	movss  0x10(%rsp),%xmm2
    b3c3:	41 ff d2             	call   *%r10
    b3c6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    CAM_VALUES
    b3cd:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    b3d2:	f3 0f 11 45 f0       	movss  %xmm0,-0x10(%rbp)
    
    b3d7:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    b3dc:	f3 0f 11 45 e8       	movss  %xmm0,-0x18(%rbp)
    vertices: f32[] {
    b3e1:	b9 00 00 00 00       	mov    $0x0,%ecx
    b3e6:	89 4d e0             	mov    %ecx,-0x20(%rbp)
        // x ,y, uv.x, uv.y, color.rgba, texture
    b3e9:	b9 00 00 00 00       	mov    $0x0,%ecx
    b3ee:	89 4d d8             	mov    %ecx,-0x28(%rbp)
        (bx) *      zoom + ox, (by) *       zoom + oy, 0, 0, color.r, color.g, color.b, color.a, -1,
    b3f1:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    b3f6:	89 4d d0             	mov    %ecx,-0x30(%rbp)
        (bx) *      zoom + ox, (by + h) *   zoom + oy, 0, 1, color.r, color.g, color.b, color.a, -1,
    b3f9:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b400:	48 03 cd             	add    %rbp,%rcx
    b403:	48 8b 11             	mov    (%rcx),%rdx
    b406:	b9 44 00 00 00       	mov    $0x44,%ecx
    b40b:	48 03 d1             	add    %rcx,%rdx
    b40e:	48 8a 0a             	rex.W mov (%rdx),%cl
    b411:	48 0f b6 c9          	movzbq %cl,%rcx
    b415:	48 85 c9             	test   %rcx,%rcx
    b418:	40 0f 94 c1          	rex sete %cl
    b41c:	48 0f b6 c9          	movzbq %cl,%rcx
    b420:	48 83 f9 00          	cmp    $0x0,%rcx
    b424:	0f 84 ac 01 00 00    	je     b5d6 <main+0xb5d6>
        (bx + w) *  zoom + ox, (by + h) *   zoom + oy, 1, 1, color.r, color.g, color.b, color.a, -1,
    b42a:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b431:	48 03 cd             	add    %rbp,%rcx
    b434:	48 8b 11             	mov    (%rcx),%rdx
    b437:	b9 20 00 00 00       	mov    $0x20,%ecx
    b43c:	48 03 d1             	add    %rcx,%rdx
    b43f:	8b 0a                	mov    (%rdx),%ecx
    b441:	ff f1                	push   %rcx
    b443:	48 c7 c1 d0 ff ff ff 	mov    $0xffffffffffffffd0,%rcx
    b44a:	48 03 cd             	add    %rbp,%rcx
    b44d:	8f c2                	pop    %rdx
    b44f:	89 11                	mov    %edx,(%rcx)
        (bx + w) *  zoom + ox, (by) *       zoom + oy, 1, 0, color.r, color.g, color.b, color.a, -1,
    b451:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    b454:	ff f1                	push   %rcx
    b456:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b45d:	48 03 cd             	add    %rbp,%rcx
    b460:	48 8b 11             	mov    (%rcx),%rdx
    b463:	b9 24 00 00 00       	mov    $0x24,%ecx
    b468:	48 03 d1             	add    %rcx,%rdx
    b46b:	f3 0f 10 02          	movss  (%rdx),%xmm0
    b46f:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b474:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b47b:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    b47f:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b486:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b48b:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    b492:	48 03 cd             	add    %rbp,%rcx
    b495:	8f c2                	pop    %rdx
    b497:	89 11                	mov    %edx,(%rcx)
    }
    b499:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    b49c:	ff f1                	push   %rcx
    b49e:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b4a5:	48 03 cd             	add    %rbp,%rcx
    b4a8:	48 8b 11             	mov    (%rcx),%rdx
    b4ab:	b9 28 00 00 00       	mov    $0x28,%ecx
    b4b0:	48 03 d1             	add    %rcx,%rdx
    b4b3:	f3 0f 10 02          	movss  (%rdx),%xmm0
    b4b7:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b4bc:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b4c3:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    b4c7:	c7 44 24 f8 00 00 00 	movl   $0x0,-0x8(%rsp)
    b4ce:	00 
    b4cf:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    b4d5:	f3 0f 5c c1          	subss  %xmm1,%xmm0
    b4d9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b4e0:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    b4e5:	f3 0f 10 45 24       	movss  0x24(%rbp),%xmm0
    b4ea:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b4ef:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b4f6:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    b4fa:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b501:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b506:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    b50d:	48 03 cd             	add    %rbp,%rcx
    b510:	8f c2                	pop    %rdx
    b512:	89 11                	mov    %edx,(%rcx)
    glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
    b514:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    b517:	ff f1                	push   %rcx
    b519:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b520:	48 03 cd             	add    %rbp,%rcx
    b523:	48 8b 11             	mov    (%rcx),%rdx
    b526:	b9 08 00 00 00       	mov    $0x8,%ecx
    b52b:	48 03 d1             	add    %rcx,%rdx
    b52e:	8b 0a                	mov    (%rdx),%ecx
    b530:	ff f1                	push   %rcx
    b532:	b9 02 00 00 00       	mov    $0x2,%ecx
    b537:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b53c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b543:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    b547:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    b54b:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b550:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b557:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b55b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b562:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b567:	48 c7 c1 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rcx
    b56e:	48 03 cd             	add    %rbp,%rcx
    b571:	8f c2                	pop    %rdx
    b573:	89 11                	mov    %edx,(%rcx)
    glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
    b575:	8b 4d d8             	mov    -0x28(%rbp),%ecx
    b578:	ff f1                	push   %rcx
    b57a:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    b581:	48 03 cd             	add    %rbp,%rcx
    b584:	48 8b 11             	mov    (%rcx),%rdx
    b587:	b9 0c 00 00 00       	mov    $0xc,%ecx
    b58c:	48 03 d1             	add    %rcx,%rdx
    b58f:	8b 0a                	mov    (%rdx),%ecx
    b591:	ff f1                	push   %rcx
    b593:	b9 02 00 00 00       	mov    $0x2,%ecx
    b598:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    b59d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b5a4:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    b5a8:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    b5ac:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b5b1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b5b8:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b5bc:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b5c3:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b5c8:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    b5cf:	48 03 cd             	add    %rbp,%rcx
    b5d2:	8f c2                	pop    %rdx
    b5d4:	89 11                	mov    %edx,(%rcx)
    vertices: f32[] {
    b5d6:	b9 90 00 00 00       	mov    $0x90,%ecx
    b5db:	48 ba 40 ff ff ff ff 	movabs $0xffffffffffffff40,%rdx
    b5e2:	ff ff ff 
    b5e5:	48 03 d5             	add    %rbp,%rdx
    b5e8:	48 83 c2 00          	add    $0x0,%rdx
    b5ec:	ff f2                	push   %rdx
    b5ee:	ff f1                	push   %rcx
    b5f0:	48 01 d1             	add    %rdx,%rcx
    b5f3:	48 3b ca             	cmp    %rdx,%rcx
    b5f6:	74 0d                	je     b605 <main+0xb605>
    b5f8:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    b5ff:	48 83 c2 08          	add    $0x8,%rdx
    b603:	eb ee                	jmp    b5f3 <main+0xb5f3>
    b605:	8f c1                	pop    %rcx
    b607:	8f c2                	pop    %rdx
    b609:	b9 24 00 00 00       	mov    $0x24,%ecx
    b60e:	ff f1                	push   %rcx
    b610:	48 c7 c1 40 ff ff ff 	mov    $0xffffffffffffff40,%rcx
    b617:	48 03 cd             	add    %rbp,%rcx
    b61a:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
    b621:	8f c1                	pop    %rcx
    b623:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
    b62a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    b62d:	ff f1                	push   %rcx
    b62f:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b634:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b639:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b640:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b644:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b64b:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b650:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
    b655:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b65a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b661:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b665:	f3 0f 11 8d 40 ff ff 	movss  %xmm1,-0xc0(%rbp)
    b66c:	ff 
    b66d:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    b670:	ff f1                	push   %rcx
    b672:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b677:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b67c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b683:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b687:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b68e:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b693:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
    b698:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b69d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b6a4:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b6a8:	f3 0f 11 8d 44 ff ff 	movss  %xmm1,-0xbc(%rbp)
    b6af:	ff 
    b6b0:	b9 00 00 00 00       	mov    $0x0,%ecx
    b6b5:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b6b9:	f3 0f 11 85 48 ff ff 	movss  %xmm0,-0xb8(%rbp)
    b6c0:	ff 
    b6c1:	b9 00 00 00 00       	mov    $0x0,%ecx
    b6c6:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b6ca:	f3 0f 11 85 4c ff ff 	movss  %xmm0,-0xb4(%rbp)
    b6d1:	ff 
    b6d2:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b6d9:	48 03 cd             	add    %rbp,%rcx
    b6dc:	8b 11                	mov    (%rcx),%edx
    b6de:	89 95 50 ff ff ff    	mov    %edx,-0xb0(%rbp)
    b6e4:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b6eb:	48 03 cd             	add    %rbp,%rcx
    b6ee:	ba 04 00 00 00       	mov    $0x4,%edx
    b6f3:	48 03 ca             	add    %rdx,%rcx
    b6f6:	8b 11                	mov    (%rcx),%edx
    b6f8:	89 95 54 ff ff ff    	mov    %edx,-0xac(%rbp)
    b6fe:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b705:	48 03 cd             	add    %rbp,%rcx
    b708:	ba 08 00 00 00       	mov    $0x8,%edx
    b70d:	48 03 ca             	add    %rdx,%rcx
    b710:	8b 11                	mov    (%rcx),%edx
    b712:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
    b718:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b71f:	48 03 cd             	add    %rbp,%rcx
    b722:	ba 0c 00 00 00       	mov    $0xc,%edx
    b727:	48 03 ca             	add    %rdx,%rcx
    b72a:	8b 11                	mov    (%rcx),%edx
    b72c:	89 95 5c ff ff ff    	mov    %edx,-0xa4(%rbp)
    b732:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    b737:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b73b:	f3 0f 11 85 60 ff ff 	movss  %xmm0,-0xa0(%rbp)
    b742:	ff 
    b743:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    b746:	ff f1                	push   %rcx
    b748:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b74d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b752:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b759:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b75d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b764:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b769:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
    b76e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b773:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b77a:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b77e:	f3 0f 11 8d 64 ff ff 	movss  %xmm1,-0x9c(%rbp)
    b785:	ff 
    b786:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    b789:	ff f1                	push   %rcx
    b78b:	f3 0f 10 45 24       	movss  0x24(%rbp),%xmm0
    b790:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b795:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b79c:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b7a0:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b7a7:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b7ac:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b7b1:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b7b6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b7bd:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b7c1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b7c8:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b7cd:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
    b7d2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b7d7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b7de:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b7e2:	f3 0f 11 8d 68 ff ff 	movss  %xmm1,-0x98(%rbp)
    b7e9:	ff 
    b7ea:	b9 00 00 00 00       	mov    $0x0,%ecx
    b7ef:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b7f3:	f3 0f 11 85 6c ff ff 	movss  %xmm0,-0x94(%rbp)
    b7fa:	ff 
    b7fb:	b9 01 00 00 00       	mov    $0x1,%ecx
    b800:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b804:	f3 0f 11 85 70 ff ff 	movss  %xmm0,-0x90(%rbp)
    b80b:	ff 
    b80c:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b813:	48 03 cd             	add    %rbp,%rcx
    b816:	8b 11                	mov    (%rcx),%edx
    b818:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%rbp)
    b81e:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b825:	48 03 cd             	add    %rbp,%rcx
    b828:	ba 04 00 00 00       	mov    $0x4,%edx
    b82d:	48 03 ca             	add    %rdx,%rcx
    b830:	8b 11                	mov    (%rcx),%edx
    b832:	89 95 78 ff ff ff    	mov    %edx,-0x88(%rbp)
    b838:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b83f:	48 03 cd             	add    %rbp,%rcx
    b842:	ba 08 00 00 00       	mov    $0x8,%edx
    b847:	48 03 ca             	add    %rdx,%rcx
    b84a:	8b 11                	mov    (%rcx),%edx
    b84c:	89 95 7c ff ff ff    	mov    %edx,-0x84(%rbp)
    b852:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b859:	48 03 cd             	add    %rbp,%rcx
    b85c:	ba 0c 00 00 00       	mov    $0xc,%edx
    b861:	48 03 ca             	add    %rdx,%rcx
    b864:	8b 11                	mov    (%rcx),%edx
    b866:	89 55 80             	mov    %edx,-0x80(%rbp)
    b869:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    b86e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b872:	f3 0f 11 45 84       	movss  %xmm0,-0x7c(%rbp)
    b877:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    b87a:	ff f1                	push   %rcx
    b87c:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    b881:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b886:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b88d:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b891:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b898:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b89d:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b8a2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b8a7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b8ae:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b8b2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b8b9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b8be:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
    b8c3:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b8c8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b8cf:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b8d3:	f3 0f 11 4d 88       	movss  %xmm1,-0x78(%rbp)
    b8d8:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    b8db:	ff f1                	push   %rcx
    b8dd:	f3 0f 10 45 24       	movss  0x24(%rbp),%xmm0
    b8e2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b8e7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b8ee:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b8f2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b8f9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b8fe:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b903:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b908:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b90f:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b913:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b91a:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b91f:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
    b924:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b929:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b930:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b934:	f3 0f 11 4d 8c       	movss  %xmm1,-0x74(%rbp)
    b939:	b9 01 00 00 00       	mov    $0x1,%ecx
    b93e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b942:	f3 0f 11 45 90       	movss  %xmm0,-0x70(%rbp)
    b947:	b9 01 00 00 00       	mov    $0x1,%ecx
    b94c:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b950:	f3 0f 11 45 94       	movss  %xmm0,-0x6c(%rbp)
    b955:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b95c:	48 03 cd             	add    %rbp,%rcx
    b95f:	8b 11                	mov    (%rcx),%edx
    b961:	89 55 98             	mov    %edx,-0x68(%rbp)
    b964:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b96b:	48 03 cd             	add    %rbp,%rcx
    b96e:	ba 04 00 00 00       	mov    $0x4,%edx
    b973:	48 03 ca             	add    %rdx,%rcx
    b976:	8b 11                	mov    (%rcx),%edx
    b978:	89 55 9c             	mov    %edx,-0x64(%rbp)
    b97b:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b982:	48 03 cd             	add    %rbp,%rcx
    b985:	ba 08 00 00 00       	mov    $0x8,%edx
    b98a:	48 03 ca             	add    %rdx,%rcx
    b98d:	8b 11                	mov    (%rcx),%edx
    b98f:	89 55 a0             	mov    %edx,-0x60(%rbp)
    b992:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    b999:	48 03 cd             	add    %rbp,%rcx
    b99c:	ba 0c 00 00 00       	mov    $0xc,%edx
    b9a1:	48 03 ca             	add    %rdx,%rcx
    b9a4:	8b 11                	mov    (%rcx),%edx
    b9a6:	89 55 a4             	mov    %edx,-0x5c(%rbp)
    b9a9:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    b9ae:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    b9b2:	f3 0f 11 45 a8       	movss  %xmm0,-0x58(%rbp)
    b9b7:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    b9ba:	ff f1                	push   %rcx
    b9bc:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    b9c1:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b9c6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b9cd:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    b9d1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b9d8:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b9dd:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    b9e2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    b9e7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    b9ee:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    b9f2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    b9f9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    b9fe:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
    ba03:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ba08:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ba0f:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ba13:	f3 0f 11 4d ac       	movss  %xmm1,-0x54(%rbp)
    ba18:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    ba1b:	ff f1                	push   %rcx
    ba1d:	f3 0f 10 45 d0       	movss  -0x30(%rbp),%xmm0
    ba22:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ba27:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ba2e:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    ba32:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ba39:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    ba3e:	f3 0f 10 45 d8       	movss  -0x28(%rbp),%xmm0
    ba43:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ba48:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ba4f:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ba53:	f3 0f 11 4d b0       	movss  %xmm1,-0x50(%rbp)
    ba58:	b9 01 00 00 00       	mov    $0x1,%ecx
    ba5d:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    ba61:	f3 0f 11 45 b4       	movss  %xmm0,-0x4c(%rbp)
    ba66:	b9 00 00 00 00       	mov    $0x0,%ecx
    ba6b:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    ba6f:	f3 0f 11 45 b8       	movss  %xmm0,-0x48(%rbp)
    ba74:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    ba7b:	48 03 cd             	add    %rbp,%rcx
    ba7e:	8b 11                	mov    (%rcx),%edx
    ba80:	89 55 bc             	mov    %edx,-0x44(%rbp)
    ba83:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    ba8a:	48 03 cd             	add    %rbp,%rcx
    ba8d:	ba 04 00 00 00       	mov    $0x4,%edx
    ba92:	48 03 ca             	add    %rdx,%rcx
    ba95:	8b 11                	mov    (%rcx),%edx
    ba97:	89 55 c0             	mov    %edx,-0x40(%rbp)
    ba9a:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    baa1:	48 03 cd             	add    %rbp,%rcx
    baa4:	ba 08 00 00 00       	mov    $0x8,%edx
    baa9:	48 03 ca             	add    %rdx,%rcx
    baac:	8b 11                	mov    (%rcx),%edx
    baae:	89 55 c4             	mov    %edx,-0x3c(%rbp)
    bab1:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    bab8:	48 03 cd             	add    %rbp,%rcx
    babb:	ba 0c 00 00 00       	mov    $0xc,%edx
    bac0:	48 03 ca             	add    %rdx,%rcx
    bac3:	8b 11                	mov    (%rcx),%edx
    bac5:	89 55 c8             	mov    %edx,-0x38(%rbp)
    bac8:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    bacd:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    bad1:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
    glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
    bad6:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    badd:	b9 92 88 00 00       	mov    $0x8892,%ecx
    bae2:	8b d1                	mov    %ecx,%edx
    bae4:	ff f2                	push   %rdx
    bae6:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    baed:	48 03 cd             	add    %rbp,%rcx
    baf0:	48 8b 11             	mov    (%rcx),%rdx
    baf3:	b9 38 00 00 00       	mov    $0x38,%ecx
    baf8:	48 03 d1             	add    %rcx,%rdx
    bafb:	8b 0a                	mov    (%rdx),%ecx
    bafd:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    bb01:	8f c1                	pop    %rcx
    bb03:	89 0c 24             	mov    %ecx,(%rsp)
    bb06:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bb0d <main+0xbb0d>
    bb0d:	48 8b 11             	mov    (%rcx),%rdx
    bb10:	4c 8b d2             	mov    %rdx,%r10
    bb13:	33 c9                	xor    %ecx,%ecx
    bb15:	8b 0c 24             	mov    (%rsp),%ecx
    bb18:	33 d2                	xor    %edx,%edx
    bb1a:	8b 54 24 08          	mov    0x8(%rsp),%edx
    bb1e:	41 ff d2             	call   *%r10
    bb21:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
    bb28:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    bb2f:	b9 92 88 00 00       	mov    $0x8892,%ecx
    bb34:	8b d1                	mov    %ecx,%edx
    bb36:	ff f2                	push   %rdx
    bb38:	b9 00 00 00 00       	mov    $0x0,%ecx
    bb3d:	48 63 d1             	movslq %ecx,%rdx
    bb40:	ff f2                	push   %rdx
    bb42:	b9 04 00 00 00       	mov    $0x4,%ecx
    bb47:	ff f1                	push   %rcx
    bb49:	b9 09 00 00 00       	mov    $0x9,%ecx
    bb4e:	8f c2                	pop    %rdx
    bb50:	0f af d1             	imul   %ecx,%edx
    bb53:	ff f2                	push   %rdx
    bb55:	b9 04 00 00 00       	mov    $0x4,%ecx
    bb5a:	8f c2                	pop    %rdx
    bb5c:	0f af d1             	imul   %ecx,%edx
    bb5f:	48 63 ca             	movslq %edx,%rcx
    bb62:	ff f1                	push   %rcx
    bb64:	48 c7 c1 30 ff ff ff 	mov    $0xffffffffffffff30,%rcx
    bb6b:	48 03 cd             	add    %rbp,%rcx
    bb6e:	48 8b 11             	mov    (%rcx),%rdx
    bb71:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    bb76:	8f c1                	pop    %rcx
    bb78:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    bb7d:	8f c1                	pop    %rcx
    bb7f:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    bb84:	8f c1                	pop    %rcx
    bb86:	89 0c 24             	mov    %ecx,(%rsp)
    bb89:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bb90 <main+0xbb90>
    bb90:	48 8b 11             	mov    (%rcx),%rdx
    bb93:	4c 8b d2             	mov    %rdx,%r10
    bb96:	33 c9                	xor    %ecx,%ecx
    bb98:	8b 0c 24             	mov    (%rsp),%ecx
    bb9b:	33 d2                	xor    %edx,%edx
    bb9d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    bba2:	45 33 c0             	xor    %r8d,%r8d
    bba5:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    bbaa:	45 33 c9             	xor    %r9d,%r9d
    bbad:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    bbb2:	41 ff d2             	call   *%r10
    bbb5:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glBindVertexArray(window.vao);
    bbbc:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    bbc3:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bbca:	48 03 cd             	add    %rbp,%rcx
    bbcd:	48 8b 11             	mov    (%rcx),%rdx
    bbd0:	b9 3c 00 00 00       	mov    $0x3c,%ecx
    bbd5:	48 03 d1             	add    %rcx,%rdx
    bbd8:	8b 0a                	mov    (%rdx),%ecx
    bbda:	89 0c 24             	mov    %ecx,(%rsp)
    bbdd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bbe4 <main+0xbbe4>
    bbe4:	48 8b 11             	mov    (%rcx),%rdx
    bbe7:	4c 8b d2             	mov    %rdx,%r10
    bbea:	33 c9                	xor    %ecx,%ecx
    bbec:	8b 0c 24             	mov    (%rsp),%ecx
    bbef:	41 ff d2             	call   *%r10
    bbf2:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, window.ibo);
    bbf9:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    bc00:	b9 93 88 00 00       	mov    $0x8893,%ecx
    bc05:	8b d1                	mov    %ecx,%edx
    bc07:	ff f2                	push   %rdx
    bc09:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bc10:	48 03 cd             	add    %rbp,%rcx
    bc13:	48 8b 11             	mov    (%rcx),%rdx
    bc16:	b9 40 00 00 00       	mov    $0x40,%ecx
    bc1b:	48 03 d1             	add    %rcx,%rdx
    bc1e:	8b 0a                	mov    (%rdx),%ecx
    bc20:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    bc24:	8f c1                	pop    %rcx
    bc26:	89 0c 24             	mov    %ecx,(%rsp)
    bc29:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bc30 <main+0xbc30>
    bc30:	48 8b 11             	mov    (%rcx),%rdx
    bc33:	4c 8b d2             	mov    %rdx,%r10
    bc36:	33 c9                	xor    %ecx,%ecx
    bc38:	8b 0c 24             	mov    (%rsp),%ecx
    bc3b:	33 d2                	xor    %edx,%edx
    bc3d:	8b 54 24 08          	mov    0x8(%rsp),%edx
    bc41:	41 ff d2             	call   *%r10
    bc44:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glDrawElements(GL_TRIANGLES, 6 * 1, GL_UNSIGNED_INT, null)
    bc4b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    bc52:	b9 04 00 00 00       	mov    $0x4,%ecx
    bc57:	8b d1                	mov    %ecx,%edx
    bc59:	ff f2                	push   %rdx
    bc5b:	b9 06 00 00 00       	mov    $0x6,%ecx
    bc60:	ff f1                	push   %rcx
    bc62:	b9 01 00 00 00       	mov    $0x1,%ecx
    bc67:	8f c2                	pop    %rdx
    bc69:	0f af d1             	imul   %ecx,%edx
    bc6c:	ff f2                	push   %rdx
    bc6e:	b9 05 14 00 00       	mov    $0x1405,%ecx
    bc73:	8b d1                	mov    %ecx,%edx
    bc75:	ff f2                	push   %rdx
    bc77:	b9 00 00 00 00       	mov    $0x0,%ecx
    bc7c:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    bc81:	8f c1                	pop    %rcx
    bc83:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    bc87:	8f c1                	pop    %rcx
    bc89:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    bc8d:	8f c1                	pop    %rcx
    bc8f:	89 0c 24             	mov    %ecx,(%rsp)
    bc92:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bc99 <main+0xbc99>
    bc99:	48 8b 11             	mov    (%rcx),%rdx
    bc9c:	4c 8b d2             	mov    %rdx,%r10
    bc9f:	33 c9                	xor    %ecx,%ecx
    bca1:	8b 0c 24             	mov    (%rsp),%ecx
    bca4:	33 d2                	xor    %edx,%edx
    bca6:	8b 54 24 08          	mov    0x8(%rsp),%edx
    bcaa:	45 33 c0             	xor    %r8d,%r8d
    bcad:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    bcb2:	45 33 c9             	xor    %r9d,%r9d
    bcb5:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    bcba:	41 ff d2             	call   *%r10
    bcbd:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    bcc4:	48 81 c4 d0 00 00 00 	add    $0xd0,%rsp
    bccb:	8f c5                	pop    %rbp
    bccd:	c3                   	ret
    DrawText(window, box.x, box.y, box.h, text, color, cursor, out_info)
}
// TODO: Font* argument?
// cursor is optional, -1 for no cursor
// DrawTextInfo if non-null, is filled with useful information about how much was drawn
fn DrawText(window: WindowContext*, x: f32, y: f32, h: f32, text: char[], color: Color = Color{1,1,1}, cursor: i32 = -1, out_info: DrawTextInfo* = null) {
    bcce:	ff f5                	push   %rbp
    bcd0:	48 8b ec             	mov    %rsp,%rbp
    bcd3:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    glUseProgram(window.base_shader);
    bcda:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bce1:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bce8:	48 03 cd             	add    %rbp,%rcx
    bceb:	48 8b 11             	mov    (%rcx),%rdx
    bcee:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    bcf3:	48 03 d1             	add    %rcx,%rdx
    bcf6:	8b 0a                	mov    (%rdx),%ecx
    bcf8:	89 0c 24             	mov    %ecx,(%rsp)
    bcfb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bd02 <main+0xbd02>
    bd02:	48 8b 11             	mov    (%rcx),%rdx
    bd05:	4c 8b d2             	mov    %rdx,%r10
    bd08:	33 c9                	xor    %ecx,%ecx
    bd0a:	8b 0c 24             	mov    (%rsp),%ecx
    bd0d:	41 ff d2             	call   *%r10
    bd10:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    glDisable(GL_DEPTH_TEST)
    bd17:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bd1e:	b9 71 0b 00 00       	mov    $0xb71,%ecx
    bd23:	8b d1                	mov    %ecx,%edx
    bd25:	89 14 24             	mov    %edx,(%rsp)
    bd28:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bd2f <main+0xbd2f>
    bd2f:	48 8b 11             	mov    (%rcx),%rdx
    bd32:	4c 8b d2             	mov    %rdx,%r10
    bd35:	33 c9                	xor    %ecx,%ecx
    bd37:	8b 0c 24             	mov    (%rsp),%ecx
    bd3a:	41 ff d2             	call   *%r10
    bd3d:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    glEnable(GL_BLEND)
    bd44:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bd4b:	b9 e2 0b 00 00       	mov    $0xbe2,%ecx
    bd50:	8b d1                	mov    %ecx,%edx
    bd52:	89 14 24             	mov    %edx,(%rsp)
    bd55:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bd5c <main+0xbd5c>
    bd5c:	48 8b 11             	mov    (%rcx),%rdx
    bd5f:	4c 8b d2             	mov    %rdx,%r10
    bd62:	33 c9                	xor    %ecx,%ecx
    bd64:	8b 0c 24             	mov    (%rsp),%ecx
    bd67:	41 ff d2             	call   *%r10
    bd6a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    // glDisable(GL_CULL)
    
    strbuf: StringBuilder
    bd71:	b9 10 00 00 00       	mov    $0x10,%ecx
    bd76:	48 ba f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rdx
    bd7d:	ff ff ff 
    bd80:	48 03 d5             	add    %rbp,%rdx
    bd83:	48 83 c2 00          	add    $0x0,%rdx
    bd87:	ff f2                	push   %rdx
    bd89:	ff f1                	push   %rcx
    bd8b:	48 01 d1             	add    %rdx,%rcx
    bd8e:	48 3b ca             	cmp    %rdx,%rcx
    bd91:	74 0d                	je     bda0 <main+0xbda0>
    bd93:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    bd9a:	48 83 c2 08          	add    $0x8,%rdx
    bd9e:	eb ee                	jmp    bd8e <main+0xbd8e>
    bda0:	8f c1                	pop    %rcx
    bda2:	8f c2                	pop    %rdx
    strbuf.append("uSampler[0]")
    bda4:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    bdab:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    bdb2:	48 03 cd             	add    %rbp,%rcx
    bdb5:	ff f1                	push   %rcx
    bdb7:	b9 0b 00 00 00       	mov    $0xb,%ecx
    bdbc:	ff f1                	push   %rcx
    bdbe:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bdc5 <main+0xbdc5>
    bdc5:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    bdca:	8f c1                	pop    %rcx
    bdcc:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
    bdd1:	8f c1                	pop    %rcx
    bdd3:	48 89 0c 24          	mov    %rcx,(%rsp)
    bdd7:	e8 14 8b ff ff       	call   48f0 <main+0x48f0>
    bddc:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    loc_sample := glGetUniformLocation(window.base_shader, strbuf.ptr)
    bde3:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bdea:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bdf1:	48 03 cd             	add    %rbp,%rcx
    bdf4:	48 8b 11             	mov    (%rcx),%rdx
    bdf7:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    bdfc:	48 03 d1             	add    %rcx,%rdx
    bdff:	8b 0a                	mov    (%rdx),%ecx
    be01:	ff f1                	push   %rcx
    be03:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    be0a:	48 03 cd             	add    %rbp,%rcx
    be0d:	48 8b 11             	mov    (%rcx),%rdx
    be10:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    be15:	8f c1                	pop    %rcx
    be17:	89 0c 24             	mov    %ecx,(%rsp)
    be1a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # be21 <main+0xbe21>
    be21:	48 8b 11             	mov    (%rcx),%rdx
    be24:	4c 8b d2             	mov    %rdx,%r10
    be27:	33 c9                	xor    %ecx,%ecx
    be29:	8b 0c 24             	mov    (%rsp),%ecx
    be2c:	33 d2                	xor    %edx,%edx
    be2e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    be33:	41 ff d2             	call   *%r10
    be36:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    be3d:	8b c8                	mov    %eax,%ecx
    be3f:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    sample_index := 0
    be42:	b9 00 00 00 00       	mov    $0x0,%ecx
    be47:	89 4d e0             	mov    %ecx,-0x20(%rbp)
    glUniform1i(loc_sample, sample_index);
    be4a:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    be51:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    be54:	8b d1                	mov    %ecx,%edx
    be56:	ff f2                	push   %rdx
    be58:	8b 4d e0             	mov    -0x20(%rbp),%ecx
    be5b:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    be5f:	8f c1                	pop    %rcx
    be61:	89 0c 24             	mov    %ecx,(%rsp)
    be64:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # be6b <main+0xbe6b>
    be6b:	48 8b 11             	mov    (%rcx),%rdx
    be6e:	4c 8b d2             	mov    %rdx,%r10
    be71:	33 c9                	xor    %ecx,%ecx
    be73:	8b 0c 24             	mov    (%rsp),%ecx
    be76:	33 d2                	xor    %edx,%edx
    be78:	8b 54 24 08          	mov    0x8(%rsp),%edx
    be7c:	41 ff d2             	call   *%r10
    be7f:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    font := window.font // force the font
    be86:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    be8d:	48 03 cd             	add    %rbp,%rcx
    be90:	48 8b 11             	mov    (%rcx),%rdx
    be93:	b9 30 00 00 00       	mov    $0x30,%ecx
    be98:	48 03 d1             	add    %rcx,%rdx
    be9b:	48 8b 0a             	mov    (%rdx),%rcx
    be9e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    
    glActiveTexture(GL_TEXTURE0+0);
    bea2:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bea9:	b9 c0 84 00 00       	mov    $0x84c0,%ecx
    beae:	ff f1                	push   %rcx
    beb0:	b9 00 00 00 00       	mov    $0x0,%ecx
    beb5:	8f c2                	pop    %rdx
    beb7:	03 d1                	add    %ecx,%edx
    beb9:	89 14 24             	mov    %edx,(%rsp)
    bebc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bec3 <main+0xbec3>
    bec3:	48 8b 11             	mov    (%rcx),%rdx
    bec6:	4c 8b d2             	mov    %rdx,%r10
    bec9:	33 c9                	xor    %ecx,%ecx
    becb:	8b 0c 24             	mov    (%rsp),%ecx
    bece:	41 ff d2             	call   *%r10
    bed1:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    glBindTexture(GL_TEXTURE_2D, font.id);
    bed8:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bedf:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    bee4:	8b d1                	mov    %ecx,%edx
    bee6:	ff f2                	push   %rdx
    bee8:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    beef:	48 03 cd             	add    %rbp,%rcx
    bef2:	48 8b 11             	mov    (%rcx),%rdx
    bef5:	8b 0a                	mov    (%rdx),%ecx
    bef7:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    befb:	8f c1                	pop    %rcx
    befd:	89 0c 24             	mov    %ecx,(%rsp)
    bf00:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bf07 <main+0xbf07>
    bf07:	48 8b 11             	mov    (%rcx),%rdx
    bf0a:	4c 8b d2             	mov    %rdx,%r10
    bf0d:	33 c9                	xor    %ecx,%ecx
    bf0f:	8b 0c 24             	mov    (%rsp),%ecx
    bf12:	33 d2                	xor    %edx,%edx
    bf14:	8b 54 24 08          	mov    0x8(%rsp),%edx
    bf18:	41 ff d2             	call   *%r10
    bf1b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    // TODO: Store location in a map
    loc := glGetUniformLocation(window.base_shader, "uWindow".ptr)
    bf22:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bf29:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bf30:	48 03 cd             	add    %rbp,%rcx
    bf33:	48 8b 11             	mov    (%rcx),%rdx
    bf36:	b9 2c 00 00 00       	mov    $0x2c,%ecx
    bf3b:	48 03 d1             	add    %rcx,%rdx
    bf3e:	8b 0a                	mov    (%rdx),%ecx
    bf40:	ff f1                	push   %rcx
    bf42:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bf49 <main+0xbf49>
    bf49:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    bf4e:	8f c1                	pop    %rcx
    bf50:	89 0c 24             	mov    %ecx,(%rsp)
    bf53:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bf5a <main+0xbf5a>
    bf5a:	48 8b 11             	mov    (%rcx),%rdx
    bf5d:	4c 8b d2             	mov    %rdx,%r10
    bf60:	33 c9                	xor    %ecx,%ecx
    bf62:	8b 0c 24             	mov    (%rsp),%ecx
    bf65:	33 d2                	xor    %edx,%edx
    bf67:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    bf6c:	41 ff d2             	call   *%r10
    bf6f:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    bf76:	8b c8                	mov    %eax,%ecx
    bf78:	89 4d d0             	mov    %ecx,-0x30(%rbp)
    
    glUniform2f(loc,window.width,window.height);
    bf7b:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    bf82:	8b 4d d0             	mov    -0x30(%rbp),%ecx
    bf85:	8b d1                	mov    %ecx,%edx
    bf87:	ff f2                	push   %rdx
    bf89:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bf90:	48 03 cd             	add    %rbp,%rcx
    bf93:	48 8b 11             	mov    (%rcx),%rdx
    bf96:	b9 08 00 00 00       	mov    $0x8,%ecx
    bf9b:	48 03 d1             	add    %rcx,%rdx
    bf9e:	8b 0a                	mov    (%rdx),%ecx
    bfa0:	ff f1                	push   %rcx
    bfa2:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    bfa9:	48 03 cd             	add    %rbp,%rcx
    bfac:	48 8b 11             	mov    (%rcx),%rdx
    bfaf:	b9 0c 00 00 00       	mov    $0xc,%ecx
    bfb4:	48 03 d1             	add    %rcx,%rdx
    bfb7:	f3 0f 10 02          	movss  (%rdx),%xmm0
    bfbb:	f3 0f 11 44 24 20    	movss  %xmm0,0x20(%rsp)
    bfc1:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    bfc6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    bfcd:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    bfd3:	8f c1                	pop    %rcx
    bfd5:	89 0c 24             	mov    %ecx,(%rsp)
    bfd8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # bfdf <main+0xbfdf>
    bfdf:	48 8b 11             	mov    (%rcx),%rdx
    bfe2:	4c 8b d2             	mov    %rdx,%r10
    bfe5:	33 c9                	xor    %ecx,%ecx
    bfe7:	8b 0c 24             	mov    (%rsp),%ecx
    bfea:	f3 0f 10 4c 24 08    	movss  0x8(%rsp),%xmm1
    bff0:	f3 0f 10 54 24 10    	movss  0x10(%rsp),%xmm2
    bff6:	41 ff d2             	call   *%r10
    bff9:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    // color := Color{1,1,1}
    
    CAM_VALUES
    c000:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    c005:	f3 0f 11 45 c8       	movss  %xmm0,-0x38(%rbp)

    c00a:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    c00f:	f3 0f 11 45 c0       	movss  %xmm0,-0x40(%rbp)
    
    c014:	b9 00 00 00 00       	mov    $0x0,%ecx
    c019:	89 4d b8             	mov    %ecx,-0x48(%rbp)
    // TODO: Batch draw calls
    c01c:	b9 00 00 00 00       	mov    $0x0,%ecx
    c021:	89 4d b0             	mov    %ecx,-0x50(%rbp)
    cursor
    c024:	b9 00 00 80 3f       	mov    $0x3f800000,%ecx
    c029:	89 4d a8             	mov    %ecx,-0x58(%rbp)
    off_x: f32 = 0
    c02c:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c033:	48 03 cd             	add    %rbp,%rcx
    c036:	48 8b 11             	mov    (%rcx),%rdx
    c039:	b9 44 00 00 00       	mov    $0x44,%ecx
    c03e:	48 03 d1             	add    %rcx,%rdx
    c041:	48 8a 0a             	rex.W mov (%rdx),%cl
    c044:	48 0f b6 c9          	movzbq %cl,%rcx
    c048:	48 85 c9             	test   %rcx,%rcx
    c04b:	40 0f 94 c1          	rex sete %cl
    c04f:	48 0f b6 c9          	movzbq %cl,%rcx
    c053:	48 83 f9 00          	cmp    $0x0,%rcx
    c057:	0f 84 ac 01 00 00    	je     c209 <main+0xc209>
    off_y: f32 = 0
    c05d:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c064:	48 03 cd             	add    %rbp,%rcx
    c067:	48 8b 11             	mov    (%rcx),%rdx
    c06a:	b9 20 00 00 00       	mov    $0x20,%ecx
    c06f:	48 03 d1             	add    %rcx,%rdx
    c072:	8b 0a                	mov    (%rdx),%ecx
    c074:	ff f1                	push   %rcx
    c076:	48 c7 c1 a8 ff ff ff 	mov    $0xffffffffffffffa8,%rcx
    c07d:	48 03 cd             	add    %rbp,%rcx
    c080:	8f c2                	pop    %rdx
    c082:	89 11                	mov    %edx,(%rcx)
    cur_x: f32 = 0
    c084:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    c087:	ff f1                	push   %rcx
    c089:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c090:	48 03 cd             	add    %rbp,%rcx
    c093:	48 8b 11             	mov    (%rcx),%rdx
    c096:	b9 24 00 00 00       	mov    $0x24,%ecx
    c09b:	48 03 d1             	add    %rcx,%rdx
    c09e:	f3 0f 10 02          	movss  (%rdx),%xmm0
    c0a2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c0a7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c0ae:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    c0b2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c0b9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c0be:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
    c0c5:	48 03 cd             	add    %rbp,%rcx
    c0c8:	8f c2                	pop    %rdx
    c0ca:	89 11                	mov    %edx,(%rcx)
    cur_y: f32 = 0
    c0cc:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    c0cf:	ff f1                	push   %rcx
    c0d1:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c0d8:	48 03 cd             	add    %rbp,%rcx
    c0db:	48 8b 11             	mov    (%rcx),%rdx
    c0de:	b9 28 00 00 00       	mov    $0x28,%ecx
    c0e3:	48 03 d1             	add    %rcx,%rdx
    c0e6:	f3 0f 10 02          	movss  (%rdx),%xmm0
    c0ea:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c0ef:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c0f6:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    c0fa:	c7 44 24 f8 00 00 00 	movl   $0x0,-0x8(%rsp)
    c101:	00 
    c102:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
    c108:	f3 0f 5c c1          	subss  %xmm1,%xmm0
    c10c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c113:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c118:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c11d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c122:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c129:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    c12d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c134:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c139:	48 c7 c1 c0 ff ff ff 	mov    $0xffffffffffffffc0,%rcx
    c140:	48 03 cd             	add    %rbp,%rcx
    c143:	8f c2                	pop    %rdx
    c145:	89 11                	mov    %edx,(%rcx)
    lines := 1 // always one
    c147:	8b 4d b8             	mov    -0x48(%rbp),%ecx
    c14a:	ff f1                	push   %rcx
    c14c:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c153:	48 03 cd             	add    %rbp,%rcx
    c156:	48 8b 11             	mov    (%rcx),%rdx
    c159:	b9 08 00 00 00       	mov    $0x8,%ecx
    c15e:	48 03 d1             	add    %rcx,%rdx
    c161:	8b 0a                	mov    (%rdx),%ecx
    c163:	ff f1                	push   %rcx
    c165:	b9 02 00 00 00       	mov    $0x2,%ecx
    c16a:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    c16f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c176:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    c17a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    c17e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c183:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c18a:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c18e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c195:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c19a:	48 c7 c1 b8 ff ff ff 	mov    $0xffffffffffffffb8,%rcx
    c1a1:	48 03 cd             	add    %rbp,%rcx
    c1a4:	8f c2                	pop    %rdx
    c1a6:	89 11                	mov    %edx,(%rcx)
    for text {
    c1a8:	8b 4d b0             	mov    -0x50(%rbp),%ecx
    c1ab:	ff f1                	push   %rcx
    c1ad:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c1b4:	48 03 cd             	add    %rbp,%rcx
    c1b7:	48 8b 11             	mov    (%rcx),%rdx
    c1ba:	b9 0c 00 00 00       	mov    $0xc,%ecx
    c1bf:	48 03 d1             	add    %rcx,%rdx
    c1c2:	8b 0a                	mov    (%rdx),%ecx
    c1c4:	ff f1                	push   %rcx
    c1c6:	b9 02 00 00 00       	mov    $0x2,%ecx
    c1cb:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    c1d0:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c1d7:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    c1db:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    c1df:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c1e4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c1eb:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c1ef:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c1f6:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c1fb:	48 c7 c1 b0 ff ff ff 	mov    $0xffffffffffffffb0,%rcx
    c202:	48 03 cd             	add    %rbp,%rcx
    c205:	8f c2                	pop    %rdx
    c207:	89 11                	mov    %edx,(%rcx)
    off_x: f32 = 0
    c209:	b9 00 00 00 00       	mov    $0x0,%ecx
    c20e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    c212:	f3 0f 11 45 a0       	movss  %xmm0,-0x60(%rbp)
    off_y: f32 = 0
    c217:	b9 00 00 00 00       	mov    $0x0,%ecx
    c21c:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    c220:	f3 0f 11 45 98       	movss  %xmm0,-0x68(%rbp)
    cur_x: f32 = 0
    c225:	b9 00 00 00 00       	mov    $0x0,%ecx
    c22a:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    c22e:	f3 0f 11 45 90       	movss  %xmm0,-0x70(%rbp)
    cur_y: f32 = 0
    c233:	b9 00 00 00 00       	mov    $0x0,%ecx
    c238:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    c23c:	f3 0f 11 45 88       	movss  %xmm0,-0x78(%rbp)
    lines := 1 // always one
    c241:	b9 01 00 00 00       	mov    $0x1,%ecx
    c246:	89 4d 80             	mov    %ecx,-0x80(%rbp)
    for text {
    c249:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffffffff,%rcx
    c250:	ff ff ff 
    c253:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
    c25a:	32 c9                	xor    %cl,%cl
    c25c:	88 8d 70 ff ff ff    	mov    %cl,-0x90(%rbp)
    c262:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
    c266:	48 8b c9             	mov    %rcx,%rcx
    c269:	ff f1                	push   %rcx
    c26b:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
    c26f:	8f c2                	pop    %rdx
    c271:	48 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%rbx
    c278:	48 81 c3 01 00 00 00 	add    $0x1,%rbx
    c27f:	48 89 9d 78 ff ff ff 	mov    %rbx,-0x88(%rbp)
    c286:	48 3b d3             	cmp    %rbx,%rdx
    c289:	40 0f 9f c2          	rex setg %dl
    c28d:	48 0f b6 d2          	movzbq %dl,%rdx
    c291:	48 83 fa 00          	cmp    $0x0,%rdx
    c295:	0f 84 7e 0b 00 00    	je     ce19 <main+0xce19>
    c29b:	48 8b d3             	mov    %rbx,%rdx
    c29e:	48 03 ca             	add    %rdx,%rcx
    c2a1:	48 c7 c2 70 ff ff ff 	mov    $0xffffffffffffff70,%rdx
    c2a8:	48 03 d5             	add    %rbp,%rdx
    c2ab:	48 8a 19             	rex.W mov (%rcx),%bl
    c2ae:	48 0f b6 db          	movzbq %bl,%rbx
    c2b2:	88 1a                	mov    %bl,(%rdx)
        // log(it)
        if it == '\n' {
    c2b4:	48 8a 8d 70 ff ff ff 	rex.W mov -0x90(%rbp),%cl
    c2bb:	48 0f b6 c9          	movzbq %cl,%rcx
    c2bf:	ff f1                	push   %rcx
    c2c1:	b9 0a 00 00 00       	mov    $0xa,%ecx
    c2c6:	8f c2                	pop    %rdx
    c2c8:	40 3a d1             	rex cmp %cl,%dl
    c2cb:	40 0f 94 c2          	rex sete %dl
    c2cf:	48 0f b6 d2          	movzbq %dl,%rdx
    c2d3:	48 83 fa 00          	cmp    $0x0,%rdx
    c2d7:	0f 84 0f 01 00 00    	je     c3ec <main+0xc3ec>
            lines++
    c2dd:	48 c7 c1 80 ff ff ff 	mov    $0xffffffffffffff80,%rcx
    c2e4:	48 03 cd             	add    %rbp,%rcx
    c2e7:	8b 11                	mov    (%rcx),%edx
    c2e9:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
    c2f0:	89 11                	mov    %edx,(%rcx)
            if !window.enable_ui_space
    c2f2:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    c2f9:	48 03 cd             	add    %rbp,%rcx
    c2fc:	48 8b 11             	mov    (%rcx),%rdx
    c2ff:	b9 44 00 00 00       	mov    $0x44,%ecx
    c304:	48 03 d1             	add    %rcx,%rdx
    c307:	48 8a 0a             	rex.W mov (%rdx),%cl
    c30a:	48 0f b6 c9          	movzbq %cl,%rcx
    c30e:	48 85 c9             	test   %rcx,%rcx
    c311:	40 0f 94 c1          	rex sete %cl
    c315:	48 0f b6 c9          	movzbq %cl,%rcx
    c319:	48 83 f9 00          	cmp    $0x0,%rcx
    c31d:	0f 84 39 00 00 00    	je     c35c <main+0xc35c>
                off_y -= h
    c323:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    c326:	ff f1                	push   %rcx
    c328:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c32d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c332:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c339:	f3 0f 5c c8          	subss  %xmm0,%xmm1
    c33d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c344:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c349:	48 c7 c1 98 ff ff ff 	mov    $0xffffffffffffff98,%rcx
    c350:	48 03 cd             	add    %rbp,%rcx
    c353:	8f c2                	pop    %rdx
    c355:	89 11                	mov    %edx,(%rcx)
    c357:	e9 34 00 00 00       	jmp    c390 <main+0xc390>
            else
                off_y += h
    c35c:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    c35f:	ff f1                	push   %rcx
    c361:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c366:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c36b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c372:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c376:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c37d:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c382:	48 c7 c1 98 ff ff ff 	mov    $0xffffffffffffff98,%rcx
    c389:	48 03 cd             	add    %rbp,%rcx
    c38c:	8f c2                	pop    %rdx
    c38e:	89 11                	mov    %edx,(%rcx)
            off_x = 0
    c390:	b9 00 00 00 00       	mov    $0x0,%ecx
    c395:	ff f1                	push   %rcx
    c397:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    c39e:	48 03 cd             	add    %rbp,%rcx
    c3a1:	8f c2                	pop    %rdx
    c3a3:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
    c3a7:	f3 0f 11 01          	movss  %xmm0,(%rcx)
            if nr == cursor
    c3ab:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    c3b2:	ff f1                	push   %rcx
    c3b4:	8b 4d 48             	mov    0x48(%rbp),%ecx
    c3b7:	48 63 c9             	movslq %ecx,%rcx
    c3ba:	8f c2                	pop    %rdx
    c3bc:	48 63 d9             	movslq %ecx,%rbx
    c3bf:	48 3b d3             	cmp    %rbx,%rdx
    c3c2:	40 0f 94 c2          	rex sete %dl
    c3c6:	48 0f b6 d2          	movzbq %dl,%rdx
    c3ca:	48 83 fa 00          	cmp    $0x0,%rdx
    c3ce:	0f 84 13 00 00 00    	je     c3e7 <main+0xc3e7>
                cur_y = off_y
    c3d4:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    c3d7:	ff f1                	push   %rcx
    c3d9:	48 c7 c1 88 ff ff ff 	mov    $0xffffffffffffff88,%rcx
    c3e0:	48 03 cd             	add    %rbp,%rcx
    c3e3:	8f c2                	pop    %rdx
    c3e5:	89 11                	mov    %edx,(%rcx)
            continue
    c3e7:	e9 76 fe ff ff       	jmp    c262 <main+0xc262>
        }

        u, v, uw, vh := font.get_uvwh(it)
    c3ec:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    c3f3:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c3fa:	48 03 cd             	add    %rbp,%rcx
    c3fd:	48 8b 11             	mov    (%rcx),%rdx
    c400:	ff f2                	push   %rdx
    c402:	48 8a 8d 70 ff ff ff 	rex.W mov -0x90(%rbp),%cl
    c409:	48 0f b6 c9          	movzbq %cl,%rcx
    c40d:	88 4c 24 10          	mov    %cl,0x10(%rsp)
    c411:	8f c1                	pop    %rcx
    c413:	48 89 0c 24          	mov    %rcx,(%rsp)
    c417:	e8 16 46 00 00       	call   10a32 <main+0x10a32>
    c41c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    c423:	f3 0f 10 44 24 d4    	movss  -0x2c(%rsp),%xmm0
    c429:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c430:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c435:	f3 0f 10 44 24 d8    	movss  -0x28(%rsp),%xmm0
    c43b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c442:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c447:	f3 0f 10 44 24 dc    	movss  -0x24(%rsp),%xmm0
    c44d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c454:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c459:	f3 0f 10 44 24 e0    	movss  -0x20(%rsp),%xmm0
    c45f:	f3 0f 11 85 50 ff ff 	movss  %xmm0,-0xb0(%rbp)
    c466:	ff 
    c467:	8f c1                	pop    %rcx
    c469:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%rbp)
    c46f:	8f c1                	pop    %rcx
    c471:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%rbp)
    c477:	8f c1                	pop    %rcx
    c479:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%rbp)
        
        defer off_x += cast<f32> (font.char_width) / font.cell_h * h
        if nr == cursor
    c47f:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    c486:	ff f1                	push   %rcx
    c488:	8b 4d 48             	mov    0x48(%rbp),%ecx
    c48b:	48 63 c9             	movslq %ecx,%rcx
    c48e:	8f c2                	pop    %rdx
    c490:	48 63 d9             	movslq %ecx,%rbx
    c493:	48 3b d3             	cmp    %rbx,%rdx
    c496:	40 0f 94 c2          	rex sete %dl
    c49a:	48 0f b6 d2          	movzbq %dl,%rdx
    c49e:	48 83 fa 00          	cmp    $0x0,%rdx
    c4a2:	0f 84 13 00 00 00    	je     c4bb <main+0xc4bb>
            cur_x = off_x
    c4a8:	8b 4d a0             	mov    -0x60(%rbp),%ecx
    c4ab:	ff f1                	push   %rcx
    c4ad:	48 c7 c1 90 ff ff ff 	mov    $0xffffffffffffff90,%rcx
    c4b4:	48 03 cd             	add    %rbp,%rcx
    c4b7:	8f c2                	pop    %rdx
    c4b9:	89 11                	mov    %edx,(%rcx)
        w := cast<f32> font.char_width / font.cell_w * h
    c4bb:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c4c2:	48 03 cd             	add    %rbp,%rcx
    c4c5:	48 8b 11             	mov    (%rcx),%rdx
    c4c8:	b9 0c 00 00 00       	mov    $0xc,%ecx
    c4cd:	48 03 d1             	add    %rcx,%rdx
    c4d0:	8b 0a                	mov    (%rdx),%ecx
    c4d2:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    c4d6:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c4dd:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c4e2:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c4e9:	48 03 cd             	add    %rbp,%rcx
    c4ec:	48 8b 11             	mov    (%rcx),%rdx
    c4ef:	b9 10 00 00 00       	mov    $0x10,%ecx
    c4f4:	48 03 d1             	add    %rcx,%rdx
    c4f7:	8b 0a                	mov    (%rdx),%ecx
    c4f9:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    c4fe:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c505:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    c509:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    c50d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c514:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    c519:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c51e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c523:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c52a:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c52e:	f3 0f 11 8d 48 ff ff 	movss  %xmm1,-0xb8(%rbp)
    c535:	ff 
        
        // log(it," ", off," ", w, " ", font.char_width)
        // log(it," ",u," ",v," ",uw," ",vh)
        
        vertices: f32[] {
    c536:	b9 90 00 00 00       	mov    $0x90,%ecx
    c53b:	48 ba b8 fe ff ff ff 	movabs $0xfffffffffffffeb8,%rdx
    c542:	ff ff ff 
    c545:	48 03 d5             	add    %rbp,%rdx
    c548:	48 83 c2 00          	add    $0x0,%rdx
    c54c:	ff f2                	push   %rdx
    c54e:	ff f1                	push   %rcx
    c550:	48 01 d1             	add    %rdx,%rcx
    c553:	48 3b ca             	cmp    %rdx,%rcx
    c556:	74 0d                	je     c565 <main+0xc565>
    c558:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    c55f:	48 83 c2 08          	add    $0x8,%rdx
    c563:	eb ee                	jmp    c553 <main+0xc553>
    c565:	8f c1                	pop    %rcx
    c567:	8f c2                	pop    %rdx
    c569:	b9 24 00 00 00       	mov    $0x24,%ecx
    c56e:	ff f1                	push   %rcx
    c570:	48 c7 c1 b8 fe ff ff 	mov    $0xfffffffffffffeb8,%rcx
    c577:	48 03 cd             	add    %rbp,%rcx
    c57a:	48 89 8d a8 fe ff ff 	mov    %rcx,-0x158(%rbp)
    c581:	8f c1                	pop    %rcx
    c583:	48 89 8d b0 fe ff ff 	mov    %rcx,-0x150(%rbp)
    c58a:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    c58d:	ff f1                	push   %rcx
    c58f:	f3 0f 10 45 a0       	movss  -0x60(%rbp),%xmm0
    c594:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c599:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c5a0:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c5a4:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c5ab:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c5b0:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c5b5:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c5ba:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c5c1:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c5c5:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c5cc:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c5d1:	f3 0f 10 45 b8       	movss  -0x48(%rbp),%xmm0
    c5d6:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c5db:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c5e2:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c5e6:	f3 0f 11 8d b8 fe ff 	movss  %xmm1,-0x148(%rbp)
    c5ed:	ff 
    c5ee:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    c5f1:	ff f1                	push   %rcx
    c5f3:	f3 0f 10 45 98       	movss  -0x68(%rbp),%xmm0
    c5f8:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c5fd:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c604:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c608:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c60f:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c614:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c619:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c61e:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c625:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c629:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c630:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c635:	f3 0f 10 45 b0       	movss  -0x50(%rbp),%xmm0
    c63a:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c63f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c646:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c64a:	f3 0f 11 8d bc fe ff 	movss  %xmm1,-0x144(%rbp)
    c651:	ff 
    c652:	8b 8d 68 ff ff ff    	mov    -0x98(%rbp),%ecx
    c658:	89 8d c0 fe ff ff    	mov    %ecx,-0x140(%rbp)
    c65e:	8b 8d 60 ff ff ff    	mov    -0xa0(%rbp),%ecx
    c664:	89 8d c4 fe ff ff    	mov    %ecx,-0x13c(%rbp)
    c66a:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c671:	48 03 cd             	add    %rbp,%rcx
    c674:	8b 11                	mov    (%rcx),%edx
    c676:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
    c67c:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c683:	48 03 cd             	add    %rbp,%rcx
    c686:	ba 04 00 00 00       	mov    $0x4,%edx
    c68b:	48 03 ca             	add    %rdx,%rcx
    c68e:	8b 11                	mov    (%rcx),%edx
    c690:	89 95 cc fe ff ff    	mov    %edx,-0x134(%rbp)
    c696:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c69d:	48 03 cd             	add    %rbp,%rcx
    c6a0:	ba 08 00 00 00       	mov    $0x8,%edx
    c6a5:	48 03 ca             	add    %rdx,%rcx
    c6a8:	8b 11                	mov    (%rcx),%edx
    c6aa:	89 95 d0 fe ff ff    	mov    %edx,-0x130(%rbp)
    c6b0:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c6b7:	48 03 cd             	add    %rbp,%rcx
    c6ba:	ba 0c 00 00 00       	mov    $0xc,%edx
    c6bf:	48 03 ca             	add    %rdx,%rcx
    c6c2:	8b 11                	mov    (%rcx),%edx
    c6c4:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%rbp)
    c6ca:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c6d1:	48 03 cd             	add    %rbp,%rcx
    c6d4:	48 8b 11             	mov    (%rcx),%rdx
    c6d7:	8b 0a                	mov    (%rdx),%ecx
    c6d9:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    c6de:	f3 0f 11 85 d8 fe ff 	movss  %xmm0,-0x128(%rbp)
    c6e5:	ff 
    c6e6:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    c6e9:	ff f1                	push   %rcx
    c6eb:	f3 0f 10 45 a0       	movss  -0x60(%rbp),%xmm0
    c6f0:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c6f5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c6fc:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c700:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c707:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c70c:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c711:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c716:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c71d:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c721:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c728:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c72d:	f3 0f 10 45 b8       	movss  -0x48(%rbp),%xmm0
    c732:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c737:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c73e:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c742:	f3 0f 11 8d dc fe ff 	movss  %xmm1,-0x124(%rbp)
    c749:	ff 
    c74a:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    c74d:	ff f1                	push   %rcx
    c74f:	f3 0f 10 45 98       	movss  -0x68(%rbp),%xmm0
    c754:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c759:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c760:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c764:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c76b:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c770:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c775:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c77a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c781:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c785:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c78c:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c791:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c796:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c79b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c7a2:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c7a6:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c7ad:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c7b2:	f3 0f 10 45 b0       	movss  -0x50(%rbp),%xmm0
    c7b7:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c7bc:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c7c3:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c7c7:	f3 0f 11 8d e0 fe ff 	movss  %xmm1,-0x120(%rbp)
    c7ce:	ff 
    c7cf:	8b 8d 68 ff ff ff    	mov    -0x98(%rbp),%ecx
    c7d5:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
    c7db:	8b 8d 50 ff ff ff    	mov    -0xb0(%rbp),%ecx
    c7e1:	89 8d e8 fe ff ff    	mov    %ecx,-0x118(%rbp)
    c7e7:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c7ee:	48 03 cd             	add    %rbp,%rcx
    c7f1:	8b 11                	mov    (%rcx),%edx
    c7f3:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    c7f9:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c800:	48 03 cd             	add    %rbp,%rcx
    c803:	ba 04 00 00 00       	mov    $0x4,%edx
    c808:	48 03 ca             	add    %rdx,%rcx
    c80b:	8b 11                	mov    (%rcx),%edx
    c80d:	89 95 f0 fe ff ff    	mov    %edx,-0x110(%rbp)
    c813:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c81a:	48 03 cd             	add    %rbp,%rcx
    c81d:	ba 08 00 00 00       	mov    $0x8,%edx
    c822:	48 03 ca             	add    %rdx,%rcx
    c825:	8b 11                	mov    (%rcx),%edx
    c827:	89 95 f4 fe ff ff    	mov    %edx,-0x10c(%rbp)
    c82d:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c834:	48 03 cd             	add    %rbp,%rcx
    c837:	ba 0c 00 00 00       	mov    $0xc,%edx
    c83c:	48 03 ca             	add    %rdx,%rcx
    c83f:	8b 11                	mov    (%rcx),%edx
    c841:	89 95 f8 fe ff ff    	mov    %edx,-0x108(%rbp)
    c847:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c84e:	48 03 cd             	add    %rbp,%rcx
    c851:	48 8b 11             	mov    (%rcx),%rdx
    c854:	8b 0a                	mov    (%rdx),%ecx
    c856:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    c85b:	f3 0f 11 85 fc fe ff 	movss  %xmm0,-0x104(%rbp)
    c862:	ff 
    c863:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    c866:	ff f1                	push   %rcx
    c868:	f3 0f 10 45 a0       	movss  -0x60(%rbp),%xmm0
    c86d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c872:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c879:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c87d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c884:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c889:	f3 0f 10 85 48 ff ff 	movss  -0xb8(%rbp),%xmm0
    c890:	ff 
    c891:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c896:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c89d:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c8a1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c8a8:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c8ad:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c8b2:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c8b7:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c8be:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c8c2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c8c9:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c8ce:	f3 0f 10 45 b8       	movss  -0x48(%rbp),%xmm0
    c8d3:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c8d8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c8df:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c8e3:	f3 0f 11 8d 00 ff ff 	movss  %xmm1,-0x100(%rbp)
    c8ea:	ff 
    c8eb:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    c8ee:	ff f1                	push   %rcx
    c8f0:	f3 0f 10 45 98       	movss  -0x68(%rbp),%xmm0
    c8f5:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c8fa:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c901:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c905:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c90c:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c911:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    c916:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c91b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c922:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c926:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c92d:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c932:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    c937:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c93c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c943:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    c947:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    c94e:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    c953:	f3 0f 10 45 b0       	movss  -0x50(%rbp),%xmm0
    c958:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    c95d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    c964:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    c968:	f3 0f 11 8d 04 ff ff 	movss  %xmm1,-0xfc(%rbp)
    c96f:	ff 
    c970:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
    c976:	89 8d 08 ff ff ff    	mov    %ecx,-0xf8(%rbp)
    c97c:	8b 8d 50 ff ff ff    	mov    -0xb0(%rbp),%ecx
    c982:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%rbp)
    c988:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c98f:	48 03 cd             	add    %rbp,%rcx
    c992:	8b 11                	mov    (%rcx),%edx
    c994:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
    c99a:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c9a1:	48 03 cd             	add    %rbp,%rcx
    c9a4:	ba 04 00 00 00       	mov    $0x4,%edx
    c9a9:	48 03 ca             	add    %rdx,%rcx
    c9ac:	8b 11                	mov    (%rcx),%edx
    c9ae:	89 95 14 ff ff ff    	mov    %edx,-0xec(%rbp)
    c9b4:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c9bb:	48 03 cd             	add    %rbp,%rcx
    c9be:	ba 08 00 00 00       	mov    $0x8,%edx
    c9c3:	48 03 ca             	add    %rdx,%rcx
    c9c6:	8b 11                	mov    (%rcx),%edx
    c9c8:	89 95 18 ff ff ff    	mov    %edx,-0xe8(%rbp)
    c9ce:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    c9d5:	48 03 cd             	add    %rbp,%rcx
    c9d8:	ba 0c 00 00 00       	mov    $0xc,%edx
    c9dd:	48 03 ca             	add    %rdx,%rcx
    c9e0:	8b 11                	mov    (%rcx),%edx
    c9e2:	89 95 1c ff ff ff    	mov    %edx,-0xe4(%rbp)
    c9e8:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    c9ef:	48 03 cd             	add    %rbp,%rcx
    c9f2:	48 8b 11             	mov    (%rcx),%rdx
    c9f5:	8b 0a                	mov    (%rdx),%ecx
    c9f7:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    c9fc:	f3 0f 11 85 20 ff ff 	movss  %xmm0,-0xe0(%rbp)
    ca03:	ff 
    ca04:	8b 4d c8             	mov    -0x38(%rbp),%ecx
    ca07:	ff f1                	push   %rcx
    ca09:	f3 0f 10 45 a0       	movss  -0x60(%rbp),%xmm0
    ca0e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ca13:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ca1a:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ca1e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ca25:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    ca2a:	f3 0f 10 85 48 ff ff 	movss  -0xb8(%rbp),%xmm0
    ca31:	ff 
    ca32:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ca37:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ca3e:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ca42:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ca49:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    ca4e:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    ca53:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ca58:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ca5f:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    ca63:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ca6a:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    ca6f:	f3 0f 10 45 b8       	movss  -0x48(%rbp),%xmm0
    ca74:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ca79:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    ca80:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ca84:	f3 0f 11 8d 24 ff ff 	movss  %xmm1,-0xdc(%rbp)
    ca8b:	ff 
    ca8c:	8b 4d c0             	mov    -0x40(%rbp),%ecx
    ca8f:	ff f1                	push   %rcx
    ca91:	f3 0f 10 45 98       	movss  -0x68(%rbp),%xmm0
    ca96:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ca9b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    caa2:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    caa6:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    caad:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    cab2:	f3 0f 10 45 a8       	movss  -0x58(%rbp),%xmm0
    cab7:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    cabc:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cac3:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    cac7:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cace:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    cad3:	f3 0f 10 45 b0       	movss  -0x50(%rbp),%xmm0
    cad8:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    cadd:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cae4:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    cae8:	f3 0f 11 8d 28 ff ff 	movss  %xmm1,-0xd8(%rbp)
    caef:	ff 
    caf0:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
    caf6:	89 8d 2c ff ff ff    	mov    %ecx,-0xd4(%rbp)
    cafc:	8b 8d 60 ff ff ff    	mov    -0xa0(%rbp),%ecx
    cb02:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%rbp)
    cb08:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    cb0f:	48 03 cd             	add    %rbp,%rcx
    cb12:	8b 11                	mov    (%rcx),%edx
    cb14:	89 95 34 ff ff ff    	mov    %edx,-0xcc(%rbp)
    cb1a:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    cb21:	48 03 cd             	add    %rbp,%rcx
    cb24:	ba 04 00 00 00       	mov    $0x4,%edx
    cb29:	48 03 ca             	add    %rdx,%rcx
    cb2c:	8b 11                	mov    (%rcx),%edx
    cb2e:	89 95 38 ff ff ff    	mov    %edx,-0xc8(%rbp)
    cb34:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    cb3b:	48 03 cd             	add    %rbp,%rcx
    cb3e:	ba 08 00 00 00       	mov    $0x8,%edx
    cb43:	48 03 ca             	add    %rdx,%rcx
    cb46:	8b 11                	mov    (%rcx),%edx
    cb48:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%rbp)
    cb4e:	48 c7 c1 38 00 00 00 	mov    $0x38,%rcx
    cb55:	48 03 cd             	add    %rbp,%rcx
    cb58:	ba 0c 00 00 00       	mov    $0xc,%edx
    cb5d:	48 03 ca             	add    %rdx,%rcx
    cb60:	8b 11                	mov    (%rcx),%edx
    cb62:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
    cb68:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    cb6f:	48 03 cd             	add    %rbp,%rcx
    cb72:	48 8b 11             	mov    (%rcx),%rdx
    cb75:	8b 0a                	mov    (%rdx),%ecx
    cb77:	f3 48 0f 2a c1       	cvtsi2ss %rcx,%xmm0
    cb7c:	f3 0f 11 85 44 ff ff 	movss  %xmm0,-0xbc(%rbp)
    cb83:	ff 
            (bx + off_x) *     zoom + ox, (by + off_y) *     zoom + oy,  u,  v, color.r, color.g, color.b, color.a, font.id,
            (bx + off_x) *     zoom + ox, (by + off_y + h) * zoom + oy,  u, vh, color.r, color.g, color.b, color.a, font.id,
            (bx + off_x + w) * zoom + ox, (by + off_y + h) * zoom + oy, uw, vh, color.r, color.g, color.b, color.a, font.id,
            (bx + off_x + w) * zoom + ox, (by + off_y) *     zoom + oy, uw,  v, color.r, color.g, color.b, color.a, font.id,
        }
        glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
    cb84:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    cb8b:	b9 92 88 00 00       	mov    $0x8892,%ecx
    cb90:	8b d1                	mov    %ecx,%edx
    cb92:	ff f2                	push   %rdx
    cb94:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    cb9b:	48 03 cd             	add    %rbp,%rcx
    cb9e:	48 8b 11             	mov    (%rcx),%rdx
    cba1:	b9 38 00 00 00       	mov    $0x38,%ecx
    cba6:	48 03 d1             	add    %rcx,%rdx
    cba9:	8b 0a                	mov    (%rdx),%ecx
    cbab:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    cbaf:	8f c1                	pop    %rcx
    cbb1:	89 0c 24             	mov    %ecx,(%rsp)
    cbb4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # cbbb <main+0xcbbb>
    cbbb:	48 8b 11             	mov    (%rcx),%rdx
    cbbe:	4c 8b d2             	mov    %rdx,%r10
    cbc1:	33 c9                	xor    %ecx,%ecx
    cbc3:	8b 0c 24             	mov    (%rsp),%ecx
    cbc6:	33 d2                	xor    %edx,%edx
    cbc8:	8b 54 24 08          	mov    0x8(%rsp),%edx
    cbcc:	41 ff d2             	call   *%r10
    cbcf:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
    cbd6:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    cbdd:	b9 92 88 00 00       	mov    $0x8892,%ecx
    cbe2:	8b d1                	mov    %ecx,%edx
    cbe4:	ff f2                	push   %rdx
    cbe6:	b9 00 00 00 00       	mov    $0x0,%ecx
    cbeb:	48 63 d1             	movslq %ecx,%rdx
    cbee:	ff f2                	push   %rdx
    cbf0:	b9 04 00 00 00       	mov    $0x4,%ecx
    cbf5:	ff f1                	push   %rcx
    cbf7:	b9 09 00 00 00       	mov    $0x9,%ecx
    cbfc:	8f c2                	pop    %rdx
    cbfe:	0f af d1             	imul   %ecx,%edx
    cc01:	ff f2                	push   %rdx
    cc03:	b9 04 00 00 00       	mov    $0x4,%ecx
    cc08:	8f c2                	pop    %rdx
    cc0a:	0f af d1             	imul   %ecx,%edx
    cc0d:	48 63 ca             	movslq %edx,%rcx
    cc10:	ff f1                	push   %rcx
    cc12:	48 c7 c1 a8 fe ff ff 	mov    $0xfffffffffffffea8,%rcx
    cc19:	48 03 cd             	add    %rbp,%rcx
    cc1c:	48 8b 11             	mov    (%rcx),%rdx
    cc1f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    cc24:	8f c1                	pop    %rcx
    cc26:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    cc2b:	8f c1                	pop    %rcx
    cc2d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    cc32:	8f c1                	pop    %rcx
    cc34:	89 0c 24             	mov    %ecx,(%rsp)
    cc37:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # cc3e <main+0xcc3e>
    cc3e:	48 8b 11             	mov    (%rcx),%rdx
    cc41:	4c 8b d2             	mov    %rdx,%r10
    cc44:	33 c9                	xor    %ecx,%ecx
    cc46:	8b 0c 24             	mov    (%rsp),%ecx
    cc49:	33 d2                	xor    %edx,%edx
    cc4b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    cc50:	45 33 c0             	xor    %r8d,%r8d
    cc53:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    cc58:	45 33 c9             	xor    %r9d,%r9d
    cc5b:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    cc60:	41 ff d2             	call   *%r10
    cc63:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        glBindVertexArray(window.vao);
    cc6a:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    cc71:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    cc78:	48 03 cd             	add    %rbp,%rcx
    cc7b:	48 8b 11             	mov    (%rcx),%rdx
    cc7e:	b9 3c 00 00 00       	mov    $0x3c,%ecx
    cc83:	48 03 d1             	add    %rcx,%rdx
    cc86:	8b 0a                	mov    (%rdx),%ecx
    cc88:	89 0c 24             	mov    %ecx,(%rsp)
    cc8b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # cc92 <main+0xcc92>
    cc92:	48 8b 11             	mov    (%rcx),%rdx
    cc95:	4c 8b d2             	mov    %rdx,%r10
    cc98:	33 c9                	xor    %ecx,%ecx
    cc9a:	8b 0c 24             	mov    (%rsp),%ecx
    cc9d:	41 ff d2             	call   *%r10
    cca0:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, window.ibo);
    cca7:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    ccae:	b9 93 88 00 00       	mov    $0x8893,%ecx
    ccb3:	8b d1                	mov    %ecx,%edx
    ccb5:	ff f2                	push   %rdx
    ccb7:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    ccbe:	48 03 cd             	add    %rbp,%rcx
    ccc1:	48 8b 11             	mov    (%rcx),%rdx
    ccc4:	b9 40 00 00 00       	mov    $0x40,%ecx
    ccc9:	48 03 d1             	add    %rcx,%rdx
    cccc:	8b 0a                	mov    (%rdx),%ecx
    ccce:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    ccd2:	8f c1                	pop    %rcx
    ccd4:	89 0c 24             	mov    %ecx,(%rsp)
    ccd7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ccde <main+0xccde>
    ccde:	48 8b 11             	mov    (%rcx),%rdx
    cce1:	4c 8b d2             	mov    %rdx,%r10
    cce4:	33 c9                	xor    %ecx,%ecx
    cce6:	8b 0c 24             	mov    (%rsp),%ecx
    cce9:	33 d2                	xor    %edx,%edx
    cceb:	8b 54 24 08          	mov    0x8(%rsp),%edx
    ccef:	41 ff d2             	call   *%r10
    ccf2:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        glDrawElements(GL_TRIANGLES, 6 * 1, GL_UNSIGNED_INT, null)
    ccf9:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    cd00:	b9 04 00 00 00       	mov    $0x4,%ecx
    cd05:	8b d1                	mov    %ecx,%edx
    cd07:	ff f2                	push   %rdx
    cd09:	b9 06 00 00 00       	mov    $0x6,%ecx
    cd0e:	ff f1                	push   %rcx
    cd10:	b9 01 00 00 00       	mov    $0x1,%ecx
    cd15:	8f c2                	pop    %rdx
    cd17:	0f af d1             	imul   %ecx,%edx
    cd1a:	ff f2                	push   %rdx
    cd1c:	b9 05 14 00 00       	mov    $0x1405,%ecx
    cd21:	8b d1                	mov    %ecx,%edx
    cd23:	ff f2                	push   %rdx
    cd25:	b9 00 00 00 00       	mov    $0x0,%ecx
    cd2a:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    cd2f:	8f c1                	pop    %rcx
    cd31:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    cd35:	8f c1                	pop    %rcx
    cd37:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    cd3b:	8f c1                	pop    %rcx
    cd3d:	89 0c 24             	mov    %ecx,(%rsp)
    cd40:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # cd47 <main+0xcd47>
    cd47:	48 8b 11             	mov    (%rcx),%rdx
    cd4a:	4c 8b d2             	mov    %rdx,%r10
    cd4d:	33 c9                	xor    %ecx,%ecx
    cd4f:	8b 0c 24             	mov    (%rsp),%ecx
    cd52:	33 d2                	xor    %edx,%edx
    cd54:	8b 54 24 08          	mov    0x8(%rsp),%edx
    cd58:	45 33 c0             	xor    %r8d,%r8d
    cd5b:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    cd60:	45 33 c9             	xor    %r9d,%r9d
    cd63:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    cd68:	41 ff d2             	call   *%r10
    cd6b:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        defer off_x += cast<f32> (font.char_width) / font.cell_h * h
    cd72:	8b 4d a0             	mov    -0x60(%rbp),%ecx
    cd75:	ff f1                	push   %rcx
    cd77:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    cd7e:	48 03 cd             	add    %rbp,%rcx
    cd81:	48 8b 11             	mov    (%rcx),%rdx
    cd84:	b9 0c 00 00 00       	mov    $0xc,%ecx
    cd89:	48 03 d1             	add    %rcx,%rdx
    cd8c:	8b 0a                	mov    (%rdx),%ecx
    cd8e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    cd92:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cd99:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cd9e:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    cda5:	48 03 cd             	add    %rbp,%rcx
    cda8:	48 8b 11             	mov    (%rcx),%rdx
    cdab:	b9 14 00 00 00       	mov    $0x14,%ecx
    cdb0:	48 03 d1             	add    %rcx,%rdx
    cdb3:	8b 0a                	mov    (%rdx),%ecx
    cdb5:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cdba:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cdc1:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
    cdc5:	f3 0f 5e c1          	divss  %xmm1,%xmm0
    cdc9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cdd0:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cdd5:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    cdda:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    cddf:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cde6:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
    cdea:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cdef:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cdf6:	f3 0f 58 c1          	addss  %xmm1,%xmm0
    cdfa:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ce01:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    ce06:	48 c7 c1 a0 ff ff ff 	mov    $0xffffffffffffffa0,%rcx
    ce0d:	48 03 cd             	add    %rbp,%rcx
    ce10:	8f c2                	pop    %rdx
    ce12:	89 11                	mov    %edx,(%rcx)
    ce14:	e9 49 f4 ff ff       	jmp    c262 <main+0xc262>
    }
    if cursor != -1 {
    ce19:	8b 4d 48             	mov    0x48(%rbp),%ecx
    ce1c:	48 63 c9             	movslq %ecx,%rcx
    ce1f:	ff f1                	push   %rcx
    ce21:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    ce26:	8f c2                	pop    %rdx
    ce28:	3b d1                	cmp    %ecx,%edx
    ce2a:	40 0f 95 c2          	rex setne %dl
    ce2e:	48 0f b6 d2          	movzbq %dl,%rdx
    ce32:	48 83 fa 00          	cmp    $0x0,%rdx
    ce36:	0f 84 13 03 00 00    	je     d14f <main+0xd14f>
        thick := 2
    ce3c:	b9 02 00 00 00       	mov    $0x2,%ecx
    ce41:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%rbp)
        if cursor == text.len {
    ce47:	8b 4d 48             	mov    0x48(%rbp),%ecx
    ce4a:	48 63 c9             	movslq %ecx,%rcx
    ce4d:	ff f1                	push   %rcx
    ce4f:	48 c7 c1 28 00 00 00 	mov    $0x28,%rcx
    ce56:	48 03 cd             	add    %rbp,%rcx
    ce59:	ba 08 00 00 00       	mov    $0x8,%edx
    ce5e:	48 03 ca             	add    %rdx,%rcx
    ce61:	48 8b 11             	mov    (%rcx),%rdx
    ce64:	8f c1                	pop    %rcx
    ce66:	48 63 d9             	movslq %ecx,%rbx
    ce69:	48 3b da             	cmp    %rdx,%rbx
    ce6c:	40 0f 94 c3          	rex sete %bl
    ce70:	48 0f b6 db          	movzbq %bl,%rbx
    ce74:	48 83 fb 00          	cmp    $0x0,%rbx
    ce78:	0f 84 6b 01 00 00    	je     cfe9 <main+0xcfe9>
            FillRect(window, x + off_x, y + off_y, thick, h, color)
    ce7e:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    ce85:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    ce89:	ff f1                	push   %rcx
    ce8b:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    ce90:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ce97:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    ce9c:	f3 0f 10 45 a0       	movss  -0x60(%rbp),%xmm0
    cea1:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    cea6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cead:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    ceb1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ceb8:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    cebd:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    cec2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cec9:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cece:	f3 0f 10 45 98       	movss  -0x68(%rbp),%xmm0
    ced3:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    ced8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cedf:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    cee3:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    ceea:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    ceef:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    cef5:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    cef9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cf00:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cf05:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    cf0a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cf11:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cf16:	f3 0f 10 45 44       	movss  0x44(%rbp),%xmm0
    cf1b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cf22:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cf27:	f3 0f 10 45 40       	movss  0x40(%rbp),%xmm0
    cf2c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cf33:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cf38:	f3 0f 10 45 3c       	movss  0x3c(%rbp),%xmm0
    cf3d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    cf44:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    cf49:	f3 0f 10 45 38       	movss  0x38(%rbp),%xmm0
    cf4e:	f3 0f 11 44 24 58    	movss  %xmm0,0x58(%rsp)
    cf54:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cf59:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cf60:	f3 0f 11 44 24 54    	movss  %xmm0,0x54(%rsp)
    cf66:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cf6b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cf72:	f3 0f 11 44 24 50    	movss  %xmm0,0x50(%rsp)
    cf78:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cf7d:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cf84:	f3 0f 11 44 24 4c    	movss  %xmm0,0x4c(%rsp)
    cf8a:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cf8f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cf96:	f3 0f 11 44 24 34    	movss  %xmm0,0x34(%rsp)
    cf9c:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cfa1:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cfa8:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    cfae:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cfb3:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cfba:	f3 0f 11 44 24 1c    	movss  %xmm0,0x1c(%rsp)
    cfc0:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    cfc5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    cfcc:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    cfd2:	8f c1                	pop    %rcx
    cfd4:	48 89 0c 24          	mov    %rcx,(%rsp)
    cfd8:	e8 6f e2 ff ff       	call   b24c <main+0xb24c>
    cfdd:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    cfe4:	e9 66 01 00 00       	jmp    d14f <main+0xd14f>
        } else {
            FillRect(window, x + cur_x, y + cur_y, thick, h, color)
    cfe9:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    cff0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    cff4:	ff f1                	push   %rcx
    cff6:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
    cffb:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d002:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d007:	f3 0f 10 45 90       	movss  -0x70(%rbp),%xmm0
    d00c:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    d011:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d018:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    d01c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d023:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    d028:	f3 0f 10 45 1c       	movss  0x1c(%rbp),%xmm0
    d02d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d034:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d039:	f3 0f 10 45 88       	movss  -0x78(%rbp),%xmm0
    d03e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    d043:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d04a:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    d04e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d055:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    d05a:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
    d060:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    d064:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d06b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d070:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    d075:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d07c:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d081:	f3 0f 10 45 44       	movss  0x44(%rbp),%xmm0
    d086:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d08d:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d092:	f3 0f 10 45 40       	movss  0x40(%rbp),%xmm0
    d097:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d09e:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d0a3:	f3 0f 10 45 3c       	movss  0x3c(%rbp),%xmm0
    d0a8:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d0af:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
    d0b4:	f3 0f 10 45 38       	movss  0x38(%rbp),%xmm0
    d0b9:	f3 0f 11 44 24 58    	movss  %xmm0,0x58(%rsp)
    d0bf:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d0c4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d0cb:	f3 0f 11 44 24 54    	movss  %xmm0,0x54(%rsp)
    d0d1:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d0d6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d0dd:	f3 0f 11 44 24 50    	movss  %xmm0,0x50(%rsp)
    d0e3:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d0e8:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d0ef:	f3 0f 11 44 24 4c    	movss  %xmm0,0x4c(%rsp)
    d0f5:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d0fa:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d101:	f3 0f 11 44 24 34    	movss  %xmm0,0x34(%rsp)
    d107:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d10c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d113:	f3 0f 11 44 24 28    	movss  %xmm0,0x28(%rsp)
    d119:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d11e:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d125:	f3 0f 11 44 24 1c    	movss  %xmm0,0x1c(%rsp)
    d12b:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d130:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d137:	f3 0f 11 44 24 10    	movss  %xmm0,0x10(%rsp)
    d13d:	8f c1                	pop    %rcx
    d13f:	48 89 0c 24          	mov    %rcx,(%rsp)
    d143:	e8 04 e1 ff ff       	call   b24c <main+0xb24c>
    d148:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
        }
    }
    if out_info {
    d14f:	48 8b 4d 50          	mov    0x50(%rbp),%rcx
    d153:	ba 00 00 00 00       	mov    $0x0,%edx
    d158:	48 3b ca             	cmp    %rdx,%rcx
    d15b:	40 0f 95 c1          	rex setne %cl
    d15f:	48 0f b6 c9          	movzbq %cl,%rcx
    d163:	48 83 f9 00          	cmp    $0x0,%rcx
    d167:	0f 84 63 00 00 00    	je     d1d0 <main+0xd1d0>
        out_info.drawn_lines = lines
    d16d:	8b 4d 80             	mov    -0x80(%rbp),%ecx
    d170:	ff f1                	push   %rcx
    d172:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    d179:	48 03 cd             	add    %rbp,%rcx
    d17c:	48 8b 11             	mov    (%rcx),%rdx
    d17f:	8f c1                	pop    %rcx
    d181:	89 0a                	mov    %ecx,(%rdx)
        out_info.drawn_height = off_y + h
    d183:	8b 4d 98             	mov    -0x68(%rbp),%ecx
    d186:	ff f1                	push   %rcx
    d188:	f3 0f 10 45 20       	movss  0x20(%rbp),%xmm0
    d18d:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
    d192:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d199:	f3 0f 58 c8          	addss  %xmm0,%xmm1
    d19d:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d1a4:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
    d1a9:	48 c7 c1 50 00 00 00 	mov    $0x50,%rcx
    d1b0:	48 03 cd             	add    %rbp,%rcx
    d1b3:	48 8b 11             	mov    (%rcx),%rdx
    d1b6:	b9 04 00 00 00       	mov    $0x4,%ecx
    d1bb:	48 03 d1             	add    %rcx,%rdx
    d1be:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
    d1c3:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d1ca:	f3 0f 2c c8          	cvttss2si %xmm0,%ecx
    d1ce:	89 0a                	mov    %ecx,(%rdx)
    d1d0:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    d1d7:	8f c5                	pop    %rbp
    d1d9:	c3                   	ret
fn RestoreGraphicsGlobals(data: void*) {
    g_window_context = data
}

global g_window_context: WindowContext*;
fn MapWindowContext(window: WindowContext*) {
    d1da:	ff f5                	push   %rbp
    d1dc:	48 8b ec             	mov    %rsp,%rbp
    Assert(!g_window_context)
    d1df:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    d1e6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d1ed <main+0xd1ed>
    d1ed:	48 8b 11             	mov    (%rcx),%rdx
    d1f0:	48 85 d2             	test   %rdx,%rdx
    d1f3:	40 0f 94 c2          	rex sete %dl
    d1f7:	48 0f b6 d2          	movzbq %dl,%rdx
    d1fb:	ff f2                	push   %rdx
    d1fd:	b9 4e 03 00 00       	mov    $0x34e,%ecx
    d202:	ff f1                	push   %rcx
    d204:	b9 18 00 00 00       	mov    $0x18,%ecx
    d209:	ff f1                	push   %rcx
    d20b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d212 <main+0xd212>
    d212:	ff f1                	push   %rcx
    d214:	b9 11 00 00 00       	mov    $0x11,%ecx
    d219:	ff f1                	push   %rcx
    d21b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d222 <main+0xd222>
    d222:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d227:	8f c1                	pop    %rcx
    d229:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d22e:	8f c1                	pop    %rcx
    d230:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d235:	8f c1                	pop    %rcx
    d237:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d23c:	8f c1                	pop    %rcx
    d23e:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    d242:	8f c1                	pop    %rcx
    d244:	88 0c 24             	mov    %cl,(%rsp)
    d247:	e8 06 2e ff ff       	call   52 <main+0x52>
    d24c:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    // TODO: Do an actual mapping
    g_window_context = window;
    d253:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d257:	ff f1                	push   %rcx
    d259:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d260 <main+0xd260>
    d260:	8f c2                	pop    %rdx
    d262:	48 89 11             	mov    %rdx,(%rcx)
    d265:	8f c5                	pop    %rbp
    d267:	c3                   	ret
} 
fn GetWindowContextByGLFWWindow(glfw_window: void*) -> WindowContext* {
    d268:	ff f5                	push   %rbp
    d26a:	48 8b ec             	mov    %rsp,%rbp
    d26d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    // TODO: Do an actual mapping
    return g_window_context;
    d274:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d27b <main+0xd27b>
    d27b:	48 8b 11             	mov    (%rcx),%rdx
    d27e:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
    d282:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    d289:	8f c5                	pop    %rbp
    d28b:	c3                   	ret
}
// #macro LOG_GLFW_CALLBACK(...) log(...)
#macro LOG_GLFW_CALLBACK(...) #endmacro

fn GLFW_CALLBACK_API KeyCallback(window: void*, key: i32, scancode: i32, action: i32, mods: i32) {
    d28c:	ff f5                	push   %rbp
    d28e:	48 8b ec             	mov    %rsp,%rbp
    d291:	ff f3                	push   %rbx
    d293:	ff f7                	push   %rdi
    d295:	ff f6                	push   %rsi
    d297:	41 ff f4             	push   %r12
    d29a:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    d29e:	48 89 55 18          	mov    %rdx,0x18(%rbp)
    d2a2:	4c 89 45 20          	mov    %r8,0x20(%rbp)
    d2a6:	4c 89 4d 28          	mov    %r9,0x28(%rbp)
    d2aa:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    d2b1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d2b8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d2bc:	48 89 0c 24          	mov    %rcx,(%rsp)
    d2c0:	e8 a3 ff ff ff       	call   d268 <main+0xd268>
    d2c5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d2cc:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    d2d1:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    d2d5:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d2dc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d2e0:	ba 00 00 00 00       	mov    $0x0,%edx
    d2e5:	48 3b ca             	cmp    %rdx,%rcx
    d2e8:	40 0f 95 c1          	rex setne %cl
    d2ec:	48 0f b6 c9          	movzbq %cl,%rcx
    d2f0:	ff f1                	push   %rcx
    d2f2:	b9 5b 03 00 00       	mov    $0x35b,%ecx
    d2f7:	ff f1                	push   %rcx
    d2f9:	b9 18 00 00 00       	mov    $0x18,%ecx
    d2fe:	ff f1                	push   %rcx
    d300:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d307 <main+0xd307>
    d307:	ff f1                	push   %rcx
    d309:	b9 07 00 00 00       	mov    $0x7,%ecx
    d30e:	ff f1                	push   %rcx
    d310:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d317 <main+0xd317>
    d317:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d31c:	8f c1                	pop    %rcx
    d31e:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d323:	8f c1                	pop    %rcx
    d325:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d32a:	8f c1                	pop    %rcx
    d32c:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d331:	8f c1                	pop    %rcx
    d333:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    d337:	8f c1                	pop    %rcx
    d339:	88 0c 24             	mov    %cl,(%rsp)
    d33c:	e8 11 2d ff ff       	call   52 <main+0x52>
    d341:	48 81 c4 28 00 00 00 	add    $0x28,%rsp

    context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    d348:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    d34f:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    d356:	48 03 cd             	add    %rbp,%rcx
    d359:	48 8b 11             	mov    (%rcx),%rdx
    d35c:	ff f2                	push   %rdx
    d35e:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d361:	48 63 c9             	movslq %ecx,%rcx
    d364:	ff f1                	push   %rcx
    d366:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d369:	48 63 c9             	movslq %ecx,%rcx
    d36c:	ff f1                	push   %rcx
    d36e:	b9 00 00 00 00       	mov    $0x0,%ecx
    d373:	8f c2                	pop    %rdx
    d375:	3b d1                	cmp    %ecx,%edx
    d377:	40 0f 95 c2          	rex setne %dl
    d37b:	48 0f b6 d2          	movzbq %dl,%rdx
    d37f:	88 54 24 1c          	mov    %dl,0x1c(%rsp)
    d383:	8f c1                	pop    %rcx
    d385:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    d389:	8f c1                	pop    %rcx
    d38b:	48 89 0c 24          	mov    %rcx,(%rsp)
    d38f:	e8 fd 2f 00 00       	call   10391 <main+0x10391>
    d394:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    LOG_GLFW_CALLBACK("key ",cast<char>key, ",", key, " ", scancode, " ", mods, " ",action)

    // log("key ", key, " mods ", mods)
    // Assert(glfwGetInputMode(window, GLFW_LOCK_KEY_MODS) == true) // make sure LOCK_KEY_MODS is enabled

    if mods & GLFW_MOD_NUM_LOCK == 0 { // we should use special actions if num lock is zero, if not zero then normal numbers from the numpad should be used
    d39b:	8b 4d 30             	mov    0x30(%rbp),%ecx
    d39e:	48 63 c9             	movslq %ecx,%rcx
    d3a1:	ff f1                	push   %rcx
    d3a3:	b9 20 00 00 00       	mov    $0x20,%ecx
    d3a8:	8f c2                	pop    %rdx
    d3aa:	23 d1                	and    %ecx,%edx
    d3ac:	ff f2                	push   %rdx
    d3ae:	b9 00 00 00 00       	mov    $0x0,%ecx
    d3b3:	8f c2                	pop    %rdx
    d3b5:	3b d1                	cmp    %ecx,%edx
    d3b7:	40 0f 94 c2          	rex sete %dl
    d3bb:	48 0f b6 d2          	movzbq %dl,%rdx
    d3bf:	48 83 fa 00          	cmp    $0x0,%rdx
    d3c3:	0f 84 26 02 00 00    	je     d5ef <main+0xd5ef>
        // These are the special actions on my numpad, TUF GAMING laptop
        // All the numpads I have seen have the same actions on the same keys,
        // But if you home, end, delete key isn't working on the numpad, this code my be why.
        // (GLFW doesn't handle this as of yet, https://github.com/glfw/glfw/issues/946)
        if key == GLFW_KEY_KP_DECIMAL {
    d3c9:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d3cc:	48 63 c9             	movslq %ecx,%rcx
    d3cf:	ff f1                	push   %rcx
    d3d1:	b9 4a 01 00 00       	mov    $0x14a,%ecx
    d3d6:	8f c2                	pop    %rdx
    d3d8:	3b d1                	cmp    %ecx,%edx
    d3da:	40 0f 94 c2          	rex sete %dl
    d3de:	48 0f b6 d2          	movzbq %dl,%rdx
    d3e2:	48 83 fa 00          	cmp    $0x0,%rdx
    d3e6:	0f 84 5e 00 00 00    	je     d44a <main+0xd44a>
            if action != GLFW_RELEASE
    d3ec:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d3ef:	48 63 c9             	movslq %ecx,%rcx
    d3f2:	ff f1                	push   %rcx
    d3f4:	b9 00 00 00 00       	mov    $0x0,%ecx
    d3f9:	8f c2                	pop    %rdx
    d3fb:	3b d1                	cmp    %ecx,%edx
    d3fd:	40 0f 95 c2          	rex setne %dl
    d401:	48 0f b6 d2          	movzbq %dl,%rdx
    d405:	48 83 fa 00          	cmp    $0x0,%rdx
    d409:	0f 84 36 00 00 00    	je     d445 <main+0xd445>
                CharCallback(window, GLFW_KEY_DELETE);
    d40f:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d416:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d41a:	ff f1                	push   %rcx
    d41c:	b9 05 01 00 00       	mov    $0x105,%ecx
    d421:	8b d1                	mov    %ecx,%edx
    d423:	89 54 24 10          	mov    %edx,0x10(%rsp)
    d427:	8f c1                	pop    %rcx
    d429:	48 89 0c 24          	mov    %rcx,(%rsp)
    d42d:	33 c9                	xor    %ecx,%ecx
    d42f:	48 8b 0c 24          	mov    (%rsp),%rcx
    d433:	33 d2                	xor    %edx,%edx
    d435:	8b 54 24 08          	mov    0x8(%rsp),%edx
    d439:	e8 83 08 00 00       	call   dcc1 <main+0xdcc1>
    d43e:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    d445:	e9 4d 01 00 00       	jmp    d597 <main+0xd597>
        } else if key == GLFW_KEY_KP_7 {
    d44a:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d44d:	48 63 c9             	movslq %ecx,%rcx
    d450:	ff f1                	push   %rcx
    d452:	b9 47 01 00 00       	mov    $0x147,%ecx
    d457:	8f c2                	pop    %rdx
    d459:	3b d1                	cmp    %ecx,%edx
    d45b:	40 0f 94 c2          	rex sete %dl
    d45f:	48 0f b6 d2          	movzbq %dl,%rdx
    d463:	48 83 fa 00          	cmp    $0x0,%rdx
    d467:	0f 84 5e 00 00 00    	je     d4cb <main+0xd4cb>
            if action != GLFW_RELEASE
    d46d:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d470:	48 63 c9             	movslq %ecx,%rcx
    d473:	ff f1                	push   %rcx
    d475:	b9 00 00 00 00       	mov    $0x0,%ecx
    d47a:	8f c2                	pop    %rdx
    d47c:	3b d1                	cmp    %ecx,%edx
    d47e:	40 0f 95 c2          	rex setne %dl
    d482:	48 0f b6 d2          	movzbq %dl,%rdx
    d486:	48 83 fa 00          	cmp    $0x0,%rdx
    d48a:	0f 84 36 00 00 00    	je     d4c6 <main+0xd4c6>
                CharCallback(window, GLFW_KEY_HOME);
    d490:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d497:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d49b:	ff f1                	push   %rcx
    d49d:	b9 0c 01 00 00       	mov    $0x10c,%ecx
    d4a2:	8b d1                	mov    %ecx,%edx
    d4a4:	89 54 24 10          	mov    %edx,0x10(%rsp)
    d4a8:	8f c1                	pop    %rcx
    d4aa:	48 89 0c 24          	mov    %rcx,(%rsp)
    d4ae:	33 c9                	xor    %ecx,%ecx
    d4b0:	48 8b 0c 24          	mov    (%rsp),%rcx
    d4b4:	33 d2                	xor    %edx,%edx
    d4b6:	8b 54 24 08          	mov    0x8(%rsp),%edx
    d4ba:	e8 02 08 00 00       	call   dcc1 <main+0xdcc1>
    d4bf:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    d4c6:	e9 cc 00 00 00       	jmp    d597 <main+0xd597>
        } else if key == GLFW_KEY_KP_1 {
    d4cb:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d4ce:	48 63 c9             	movslq %ecx,%rcx
    d4d1:	ff f1                	push   %rcx
    d4d3:	b9 41 01 00 00       	mov    $0x141,%ecx
    d4d8:	8f c2                	pop    %rdx
    d4da:	3b d1                	cmp    %ecx,%edx
    d4dc:	40 0f 94 c2          	rex sete %dl
    d4e0:	48 0f b6 d2          	movzbq %dl,%rdx
    d4e4:	48 83 fa 00          	cmp    $0x0,%rdx
    d4e8:	0f 84 5e 00 00 00    	je     d54c <main+0xd54c>
            if action != GLFW_RELEASE
    d4ee:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d4f1:	48 63 c9             	movslq %ecx,%rcx
    d4f4:	ff f1                	push   %rcx
    d4f6:	b9 00 00 00 00       	mov    $0x0,%ecx
    d4fb:	8f c2                	pop    %rdx
    d4fd:	3b d1                	cmp    %ecx,%edx
    d4ff:	40 0f 95 c2          	rex setne %dl
    d503:	48 0f b6 d2          	movzbq %dl,%rdx
    d507:	48 83 fa 00          	cmp    $0x0,%rdx
    d50b:	0f 84 36 00 00 00    	je     d547 <main+0xd547>
                CharCallback(window, GLFW_KEY_END);
    d511:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d518:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d51c:	ff f1                	push   %rcx
    d51e:	b9 0d 01 00 00       	mov    $0x10d,%ecx
    d523:	8b d1                	mov    %ecx,%edx
    d525:	89 54 24 10          	mov    %edx,0x10(%rsp)
    d529:	8f c1                	pop    %rcx
    d52b:	48 89 0c 24          	mov    %rcx,(%rsp)
    d52f:	33 c9                	xor    %ecx,%ecx
    d531:	48 8b 0c 24          	mov    (%rsp),%rcx
    d535:	33 d2                	xor    %edx,%edx
    d537:	8b 54 24 08          	mov    0x8(%rsp),%edx
    d53b:	e8 81 07 00 00       	call   dcc1 <main+0xdcc1>
    d540:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    d547:	e9 4b 00 00 00       	jmp    d597 <main+0xd597>
        } else if key == GLFW_KEY_KP_9 {
    d54c:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d54f:	48 63 c9             	movslq %ecx,%rcx
    d552:	ff f1                	push   %rcx
    d554:	b9 49 01 00 00       	mov    $0x149,%ecx
    d559:	8f c2                	pop    %rdx
    d55b:	3b d1                	cmp    %ecx,%edx
    d55d:	40 0f 94 c2          	rex sete %dl
    d561:	48 0f b6 d2          	movzbq %dl,%rdx
    d565:	48 83 fa 00          	cmp    $0x0,%rdx
    d569:	0f 84 05 00 00 00    	je     d574 <main+0xd574>
    d56f:	e9 23 00 00 00       	jmp    d597 <main+0xd597>
            // page up
            // if action != GLFW_RELEASE
            //     CharCallback(window, GLFW_KEY_PAGE_UP);
        } else if key == GLFW_KEY_KP_3 {
    d574:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d577:	48 63 c9             	movslq %ecx,%rcx
    d57a:	ff f1                	push   %rcx
    d57c:	b9 43 01 00 00       	mov    $0x143,%ecx
    d581:	8f c2                	pop    %rdx
    d583:	3b d1                	cmp    %ecx,%edx
    d585:	40 0f 94 c2          	rex sete %dl
    d589:	48 0f b6 d2          	movzbq %dl,%rdx
    d58d:	48 83 fa 00          	cmp    $0x0,%rdx
    d591:	0f 84 00 00 00 00    	je     d597 <main+0xd597>
            // page down
            // if action != GLFW_RELEASE
            //     CharCallback(window, GLFW_KEY_PAGE_DOWN);
        }
        context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    d597:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    d59e:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    d5a5:	48 03 cd             	add    %rbp,%rcx
    d5a8:	48 8b 11             	mov    (%rcx),%rdx
    d5ab:	ff f2                	push   %rdx
    d5ad:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d5b0:	48 63 c9             	movslq %ecx,%rcx
    d5b3:	ff f1                	push   %rcx
    d5b5:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d5b8:	48 63 c9             	movslq %ecx,%rcx
    d5bb:	ff f1                	push   %rcx
    d5bd:	b9 00 00 00 00       	mov    $0x0,%ecx
    d5c2:	8f c2                	pop    %rdx
    d5c4:	3b d1                	cmp    %ecx,%edx
    d5c6:	40 0f 95 c2          	rex setne %dl
    d5ca:	48 0f b6 d2          	movzbq %dl,%rdx
    d5ce:	88 54 24 1c          	mov    %dl,0x1c(%rsp)
    d5d2:	8f c1                	pop    %rcx
    d5d4:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    d5d8:	8f c1                	pop    %rcx
    d5da:	48 89 0c 24          	mov    %rcx,(%rsp)
    d5de:	e8 ae 2d 00 00       	call   10391 <main+0x10391>
    d5e3:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    d5ea:	e9 53 00 00 00       	jmp    d642 <main+0xd642>
    } else {
        context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    d5ef:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    d5f6:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    d5fd:	48 03 cd             	add    %rbp,%rcx
    d600:	48 8b 11             	mov    (%rcx),%rdx
    d603:	ff f2                	push   %rdx
    d605:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d608:	48 63 c9             	movslq %ecx,%rcx
    d60b:	ff f1                	push   %rcx
    d60d:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d610:	48 63 c9             	movslq %ecx,%rcx
    d613:	ff f1                	push   %rcx
    d615:	b9 00 00 00 00       	mov    $0x0,%ecx
    d61a:	8f c2                	pop    %rdx
    d61c:	3b d1                	cmp    %ecx,%edx
    d61e:	40 0f 95 c2          	rex setne %dl
    d622:	48 0f b6 d2          	movzbq %dl,%rdx
    d626:	88 54 24 1c          	mov    %dl,0x1c(%rsp)
    d62a:	8f c1                	pop    %rcx
    d62c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    d630:	8f c1                	pop    %rcx
    d632:	48 89 0c 24          	mov    %rcx,(%rsp)
    d636:	e8 56 2d 00 00       	call   10391 <main+0x10391>
    d63b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    }

    if action != 0 && (key == GLFW_KEY_BACKSPACE || key == GLFW_KEY_DELETE || key == GLFW_KEY_ENTER || key == GLFW_KEY_LEFT || key == GLFW_KEY_RIGHT || key == GLFW_KEY_HOME || key == GLFW_KEY_END) {
    d642:	8b 4d 28             	mov    0x28(%rbp),%ecx
    d645:	48 63 c9             	movslq %ecx,%rcx
    d648:	ff f1                	push   %rcx
    d64a:	b9 00 00 00 00       	mov    $0x0,%ecx
    d64f:	8f c2                	pop    %rdx
    d651:	3b d1                	cmp    %ecx,%edx
    d653:	40 0f 95 c2          	rex setne %dl
    d657:	48 0f b6 d2          	movzbq %dl,%rdx
    d65b:	ff f2                	push   %rdx
    d65d:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d660:	48 63 c9             	movslq %ecx,%rcx
    d663:	ff f1                	push   %rcx
    d665:	b9 03 01 00 00       	mov    $0x103,%ecx
    d66a:	8f c2                	pop    %rdx
    d66c:	3b d1                	cmp    %ecx,%edx
    d66e:	40 0f 94 c2          	rex sete %dl
    d672:	48 0f b6 d2          	movzbq %dl,%rdx
    d676:	ff f2                	push   %rdx
    d678:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d67b:	48 63 c9             	movslq %ecx,%rcx
    d67e:	ff f1                	push   %rcx
    d680:	b9 05 01 00 00       	mov    $0x105,%ecx
    d685:	8f c2                	pop    %rdx
    d687:	3b d1                	cmp    %ecx,%edx
    d689:	40 0f 94 c2          	rex sete %dl
    d68d:	48 0f b6 d2          	movzbq %dl,%rdx
    d691:	8f c1                	pop    %rcx
    d693:	48 85 c9             	test   %rcx,%rcx
    d696:	75 0a                	jne    d6a2 <main+0xd6a2>
    d698:	48 85 d2             	test   %rdx,%rdx
    d69b:	75 05                	jne    d6a2 <main+0xd6a2>
    d69d:	c6 c1 00             	mov    $0x0,%cl
    d6a0:	eb 07                	jmp    d6a9 <main+0xd6a9>
    d6a2:	c6 c1 01             	mov    $0x1,%cl
    d6a5:	48 0f b6 c9          	movzbq %cl,%rcx
    d6a9:	ff f1                	push   %rcx
    d6ab:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d6ae:	48 63 c9             	movslq %ecx,%rcx
    d6b1:	ff f1                	push   %rcx
    d6b3:	b9 01 01 00 00       	mov    $0x101,%ecx
    d6b8:	8f c2                	pop    %rdx
    d6ba:	3b d1                	cmp    %ecx,%edx
    d6bc:	40 0f 94 c2          	rex sete %dl
    d6c0:	48 0f b6 d2          	movzbq %dl,%rdx
    d6c4:	8f c1                	pop    %rcx
    d6c6:	48 85 c9             	test   %rcx,%rcx
    d6c9:	75 0a                	jne    d6d5 <main+0xd6d5>
    d6cb:	48 85 d2             	test   %rdx,%rdx
    d6ce:	75 05                	jne    d6d5 <main+0xd6d5>
    d6d0:	c6 c1 00             	mov    $0x0,%cl
    d6d3:	eb 07                	jmp    d6dc <main+0xd6dc>
    d6d5:	c6 c1 01             	mov    $0x1,%cl
    d6d8:	48 0f b6 c9          	movzbq %cl,%rcx
    d6dc:	ff f1                	push   %rcx
    d6de:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d6e1:	48 63 c9             	movslq %ecx,%rcx
    d6e4:	ff f1                	push   %rcx
    d6e6:	b9 07 01 00 00       	mov    $0x107,%ecx
    d6eb:	8f c2                	pop    %rdx
    d6ed:	3b d1                	cmp    %ecx,%edx
    d6ef:	40 0f 94 c2          	rex sete %dl
    d6f3:	48 0f b6 d2          	movzbq %dl,%rdx
    d6f7:	8f c1                	pop    %rcx
    d6f9:	48 85 c9             	test   %rcx,%rcx
    d6fc:	75 0a                	jne    d708 <main+0xd708>
    d6fe:	48 85 d2             	test   %rdx,%rdx
    d701:	75 05                	jne    d708 <main+0xd708>
    d703:	c6 c1 00             	mov    $0x0,%cl
    d706:	eb 07                	jmp    d70f <main+0xd70f>
    d708:	c6 c1 01             	mov    $0x1,%cl
    d70b:	48 0f b6 c9          	movzbq %cl,%rcx
    d70f:	ff f1                	push   %rcx
    d711:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d714:	48 63 c9             	movslq %ecx,%rcx
    d717:	ff f1                	push   %rcx
    d719:	b9 06 01 00 00       	mov    $0x106,%ecx
    d71e:	8f c2                	pop    %rdx
    d720:	3b d1                	cmp    %ecx,%edx
    d722:	40 0f 94 c2          	rex sete %dl
    d726:	48 0f b6 d2          	movzbq %dl,%rdx
    d72a:	8f c1                	pop    %rcx
    d72c:	48 85 c9             	test   %rcx,%rcx
    d72f:	75 0a                	jne    d73b <main+0xd73b>
    d731:	48 85 d2             	test   %rdx,%rdx
    d734:	75 05                	jne    d73b <main+0xd73b>
    d736:	c6 c1 00             	mov    $0x0,%cl
    d739:	eb 07                	jmp    d742 <main+0xd742>
    d73b:	c6 c1 01             	mov    $0x1,%cl
    d73e:	48 0f b6 c9          	movzbq %cl,%rcx
    d742:	ff f1                	push   %rcx
    d744:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d747:	48 63 c9             	movslq %ecx,%rcx
    d74a:	ff f1                	push   %rcx
    d74c:	b9 0c 01 00 00       	mov    $0x10c,%ecx
    d751:	8f c2                	pop    %rdx
    d753:	3b d1                	cmp    %ecx,%edx
    d755:	40 0f 94 c2          	rex sete %dl
    d759:	48 0f b6 d2          	movzbq %dl,%rdx
    d75d:	8f c1                	pop    %rcx
    d75f:	48 85 c9             	test   %rcx,%rcx
    d762:	75 0a                	jne    d76e <main+0xd76e>
    d764:	48 85 d2             	test   %rdx,%rdx
    d767:	75 05                	jne    d76e <main+0xd76e>
    d769:	c6 c1 00             	mov    $0x0,%cl
    d76c:	eb 07                	jmp    d775 <main+0xd775>
    d76e:	c6 c1 01             	mov    $0x1,%cl
    d771:	48 0f b6 c9          	movzbq %cl,%rcx
    d775:	ff f1                	push   %rcx
    d777:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d77a:	48 63 c9             	movslq %ecx,%rcx
    d77d:	ff f1                	push   %rcx
    d77f:	b9 0d 01 00 00       	mov    $0x10d,%ecx
    d784:	8f c2                	pop    %rdx
    d786:	3b d1                	cmp    %ecx,%edx
    d788:	40 0f 94 c2          	rex sete %dl
    d78c:	48 0f b6 d2          	movzbq %dl,%rdx
    d790:	8f c1                	pop    %rcx
    d792:	48 85 c9             	test   %rcx,%rcx
    d795:	75 0a                	jne    d7a1 <main+0xd7a1>
    d797:	48 85 d2             	test   %rdx,%rdx
    d79a:	75 05                	jne    d7a1 <main+0xd7a1>
    d79c:	c6 c1 00             	mov    $0x0,%cl
    d79f:	eb 07                	jmp    d7a8 <main+0xd7a8>
    d7a1:	c6 c1 01             	mov    $0x1,%cl
    d7a4:	48 0f b6 c9          	movzbq %cl,%rcx
    d7a8:	8f c2                	pop    %rdx
    d7aa:	48 85 d2             	test   %rdx,%rdx
    d7ad:	74 0a                	je     d7b9 <main+0xd7b9>
    d7af:	48 85 c9             	test   %rcx,%rcx
    d7b2:	74 05                	je     d7b9 <main+0xd7b9>
    d7b4:	c6 c2 01             	mov    $0x1,%dl
    d7b7:	eb 03                	jmp    d7bc <main+0xd7bc>
    d7b9:	c6 c2 00             	mov    $0x0,%dl
    d7bc:	48 0f b6 d2          	movzbq %dl,%rdx
    d7c0:	48 83 fa 00          	cmp    $0x0,%rdx
    d7c4:	0f 84 37 00 00 00    	je     d801 <main+0xd801>
        CharCallback(window, key);
    d7ca:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d7d1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d7d5:	ff f1                	push   %rcx
    d7d7:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d7da:	48 63 c9             	movslq %ecx,%rcx
    d7dd:	8b d1                	mov    %ecx,%edx
    d7df:	89 54 24 10          	mov    %edx,0x10(%rsp)
    d7e3:	8f c1                	pop    %rcx
    d7e5:	48 89 0c 24          	mov    %rcx,(%rsp)
    d7e9:	33 c9                	xor    %ecx,%ecx
    d7eb:	48 8b 0c 24          	mov    (%rsp),%rcx
    d7ef:	33 d2                	xor    %edx,%edx
    d7f1:	8b 54 24 08          	mov    0x8(%rsp),%edx
    d7f5:	e8 c7 04 00 00       	call   dcc1 <main+0xdcc1>
    d7fa:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    d801:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d808:	41 8f c4             	pop    %r12
    d80b:	8f c6                	pop    %rsi
    d80d:	8f c7                	pop    %rdi
    d80f:	8f c3                	pop    %rbx
    d811:	8f c5                	pop    %rbp
    d813:	c3                   	ret
    }
}
fn GLFW_CALLBACK_API MouseCallback(window: void*, button: i32, action: i32, mods: i32) {
    d814:	ff f5                	push   %rbp
    d816:	48 8b ec             	mov    %rsp,%rbp
    d819:	ff f3                	push   %rbx
    d81b:	ff f7                	push   %rdi
    d81d:	ff f6                	push   %rsi
    d81f:	41 ff f4             	push   %r12
    d822:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    d826:	48 89 55 18          	mov    %rdx,0x18(%rbp)
    d82a:	4c 89 45 20          	mov    %r8,0x20(%rbp)
    d82e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    d835:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d83c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d840:	48 89 0c 24          	mov    %rcx,(%rsp)
    d844:	e8 1f fa ff ff       	call   d268 <main+0xd268>
    d849:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d850:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    d855:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    d859:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d860:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d864:	ba 00 00 00 00       	mov    $0x0,%edx
    d869:	48 3b ca             	cmp    %rdx,%rcx
    d86c:	40 0f 95 c1          	rex setne %cl
    d870:	48 0f b6 c9          	movzbq %cl,%rcx
    d874:	ff f1                	push   %rcx
    d876:	b9 85 03 00 00       	mov    $0x385,%ecx
    d87b:	ff f1                	push   %rcx
    d87d:	b9 18 00 00 00       	mov    $0x18,%ecx
    d882:	ff f1                	push   %rcx
    d884:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d88b <main+0xd88b>
    d88b:	ff f1                	push   %rcx
    d88d:	b9 07 00 00 00       	mov    $0x7,%ecx
    d892:	ff f1                	push   %rcx
    d894:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d89b <main+0xd89b>
    d89b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d8a0:	8f c1                	pop    %rcx
    d8a2:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d8a7:	8f c1                	pop    %rcx
    d8a9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d8ae:	8f c1                	pop    %rcx
    d8b0:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d8b5:	8f c1                	pop    %rcx
    d8b7:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    d8bb:	8f c1                	pop    %rcx
    d8bd:	88 0c 24             	mov    %cl,(%rsp)
    d8c0:	e8 8d 27 ff ff       	call   52 <main+0x52>
    d8c5:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    context.setInput(button, action != 0);
    d8cc:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    d8d3:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    d8da:	48 03 cd             	add    %rbp,%rcx
    d8dd:	48 8b 11             	mov    (%rcx),%rdx
    d8e0:	ff f2                	push   %rdx
    d8e2:	8b 4d 18             	mov    0x18(%rbp),%ecx
    d8e5:	48 63 c9             	movslq %ecx,%rcx
    d8e8:	ff f1                	push   %rcx
    d8ea:	8b 4d 20             	mov    0x20(%rbp),%ecx
    d8ed:	48 63 c9             	movslq %ecx,%rcx
    d8f0:	ff f1                	push   %rcx
    d8f2:	b9 00 00 00 00       	mov    $0x0,%ecx
    d8f7:	8f c2                	pop    %rdx
    d8f9:	3b d1                	cmp    %ecx,%edx
    d8fb:	40 0f 95 c2          	rex setne %dl
    d8ff:	48 0f b6 d2          	movzbq %dl,%rdx
    d903:	88 54 24 1c          	mov    %dl,0x1c(%rsp)
    d907:	8f c1                	pop    %rcx
    d909:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    d90d:	8f c1                	pop    %rcx
    d90f:	48 89 0c 24          	mov    %rcx,(%rsp)
    d913:	e8 79 2a 00 00       	call   10391 <main+0x10391>
    d918:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    d91f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d926:	41 8f c4             	pop    %r12
    d929:	8f c6                	pop    %rsi
    d92b:	8f c7                	pop    %rdi
    d92d:	8f c3                	pop    %rbx
    d92f:	8f c5                	pop    %rbp
    d931:	c3                   	ret
    LOG_GLFW_CALLBACK("click ", button, " ", action)
}
fn GLFW_CALLBACK_API CursorPosCallback(window: void*, mx: f64, my: f64) {
    d932:	ff f5                	push   %rbp
    d934:	48 8b ec             	mov    %rsp,%rbp
    d937:	ff f3                	push   %rbx
    d939:	ff f7                	push   %rdi
    d93b:	ff f6                	push   %rsi
    d93d:	41 ff f4             	push   %r12
    d940:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    d944:	f2 0f 11 4d 18       	movsd  %xmm1,0x18(%rbp)
    d949:	f2 0f 11 55 20       	movsd  %xmm2,0x20(%rbp)
    d94e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    d955:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    d95c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    d960:	48 89 0c 24          	mov    %rcx,(%rsp)
    d964:	e8 ff f8 ff ff       	call   d268 <main+0xd268>
    d969:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    d970:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    d975:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    d979:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    d980:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    d984:	ba 00 00 00 00       	mov    $0x0,%edx
    d989:	48 3b ca             	cmp    %rdx,%rcx
    d98c:	40 0f 95 c1          	rex setne %cl
    d990:	48 0f b6 c9          	movzbq %cl,%rcx
    d994:	ff f1                	push   %rcx
    d996:	b9 8c 03 00 00       	mov    $0x38c,%ecx
    d99b:	ff f1                	push   %rcx
    d99d:	b9 18 00 00 00       	mov    $0x18,%ecx
    d9a2:	ff f1                	push   %rcx
    d9a4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d9ab <main+0xd9ab>
    d9ab:	ff f1                	push   %rcx
    d9ad:	b9 07 00 00 00       	mov    $0x7,%ecx
    d9b2:	ff f1                	push   %rcx
    d9b4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # d9bb <main+0xd9bb>
    d9bb:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d9c0:	8f c1                	pop    %rcx
    d9c2:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    d9c7:	8f c1                	pop    %rcx
    d9c9:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d9ce:	8f c1                	pop    %rcx
    d9d0:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    d9d5:	8f c1                	pop    %rcx
    d9d7:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    d9db:	8f c1                	pop    %rcx
    d9dd:	88 0c 24             	mov    %cl,(%rsp)
    d9e0:	e8 6d 26 ff ff       	call   52 <main+0x52>
    d9e5:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    context.setMouseX(cast<f32>mx);
    d9ec:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    d9f3:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    d9fa:	48 03 cd             	add    %rbp,%rcx
    d9fd:	48 8b 11             	mov    (%rcx),%rdx
    da00:	ff f2                	push   %rdx
    da02:	f2 0f 10 45 18       	movsd  0x18(%rbp),%xmm0
    da07:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    da0b:	f3 0f 11 4c 24 10    	movss  %xmm1,0x10(%rsp)
    da11:	8f c1                	pop    %rcx
    da13:	48 89 0c 24          	mov    %rcx,(%rsp)
    da17:	e8 01 28 00 00       	call   1021d <main+0x1021d>
    da1c:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    context.setMouseY(cast<f32>my);
    da23:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    da2a:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    da31:	48 03 cd             	add    %rbp,%rcx
    da34:	48 8b 11             	mov    (%rcx),%rdx
    da37:	ff f2                	push   %rdx
    da39:	f2 0f 10 45 20       	movsd  0x20(%rbp),%xmm0
    da3e:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    da42:	f3 0f 11 4c 24 10    	movss  %xmm1,0x10(%rsp)
    da48:	8f c1                	pop    %rcx
    da4a:	48 89 0c 24          	mov    %rcx,(%rsp)
    da4e:	e8 f6 27 00 00       	call   10249 <main+0x10249>
    da53:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    da5a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    da61:	41 8f c4             	pop    %r12
    da64:	8f c6                	pop    %rsi
    da66:	8f c7                	pop    %rdi
    da68:	8f c3                	pop    %rbx
    da6a:	8f c5                	pop    %rbp
    da6c:	c3                   	ret
    LOG_GLFW_CALLBACK("cursor ", mx," ", my)
}
fn GLFW_CALLBACK_API ScrollCallback(window: void*, xoffset: f64, yoffset: f64) {
    da6d:	ff f5                	push   %rbp
    da6f:	48 8b ec             	mov    %rsp,%rbp
    da72:	ff f3                	push   %rbx
    da74:	ff f7                	push   %rdi
    da76:	ff f6                	push   %rsi
    da78:	41 ff f4             	push   %r12
    da7b:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    da7f:	f2 0f 11 4d 18       	movsd  %xmm1,0x18(%rbp)
    da84:	f2 0f 11 55 20       	movsd  %xmm2,0x20(%rbp)
    da89:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    da90:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    da97:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    da9b:	48 89 0c 24          	mov    %rcx,(%rsp)
    da9f:	e8 c4 f7 ff ff       	call   d268 <main+0xd268>
    daa4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    daab:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    dab0:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    dab4:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    dabb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    dabf:	ba 00 00 00 00       	mov    $0x0,%edx
    dac4:	48 3b ca             	cmp    %rdx,%rcx
    dac7:	40 0f 95 c1          	rex setne %cl
    dacb:	48 0f b6 c9          	movzbq %cl,%rcx
    dacf:	ff f1                	push   %rcx
    dad1:	b9 93 03 00 00       	mov    $0x393,%ecx
    dad6:	ff f1                	push   %rcx
    dad8:	b9 18 00 00 00       	mov    $0x18,%ecx
    dadd:	ff f1                	push   %rcx
    dadf:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dae6 <main+0xdae6>
    dae6:	ff f1                	push   %rcx
    dae8:	b9 07 00 00 00       	mov    $0x7,%ecx
    daed:	ff f1                	push   %rcx
    daef:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # daf6 <main+0xdaf6>
    daf6:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    dafb:	8f c1                	pop    %rcx
    dafd:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    db02:	8f c1                	pop    %rcx
    db04:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    db09:	8f c1                	pop    %rcx
    db0b:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    db10:	8f c1                	pop    %rcx
    db12:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    db16:	8f c1                	pop    %rcx
    db18:	88 0c 24             	mov    %cl,(%rsp)
    db1b:	e8 32 25 ff ff       	call   52 <main+0x52>
    db20:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    context.setScrollX(cast<f32>xoffset);
    db27:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    db2e:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    db35:	48 03 cd             	add    %rbp,%rcx
    db38:	48 8b 11             	mov    (%rcx),%rdx
    db3b:	ff f2                	push   %rdx
    db3d:	f2 0f 10 45 18       	movsd  0x18(%rbp),%xmm0
    db42:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    db46:	f3 0f 11 4c 24 10    	movss  %xmm1,0x10(%rsp)
    db4c:	8f c1                	pop    %rcx
    db4e:	48 89 0c 24          	mov    %rcx,(%rsp)
    db52:	e8 1e 27 00 00       	call   10275 <main+0x10275>
    db57:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    context.setScrollY(cast<f32>yoffset);
    db5e:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
    db65:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    db6c:	48 03 cd             	add    %rbp,%rcx
    db6f:	48 8b 11             	mov    (%rcx),%rdx
    db72:	ff f2                	push   %rdx
    db74:	f2 0f 10 45 20       	movsd  0x20(%rbp),%xmm0
    db79:	f2 0f 5a c8          	cvtsd2ss %xmm0,%xmm1
    db7d:	f3 0f 11 4c 24 10    	movss  %xmm1,0x10(%rsp)
    db83:	8f c1                	pop    %rcx
    db85:	48 89 0c 24          	mov    %rcx,(%rsp)
    db89:	e8 75 27 00 00       	call   10303 <main+0x10303>
    db8e:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    db95:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    db9c:	41 8f c4             	pop    %r12
    db9f:	8f c6                	pop    %rsi
    dba1:	8f c7                	pop    %rdi
    dba3:	8f c3                	pop    %rbx
    dba5:	8f c5                	pop    %rbp
    dba7:	c3                   	ret

    LOG_GLFW_CALLBACK("scroll ",xoffset, " ", yoffset)
}
fn GLFW_CALLBACK_API ResizeCallback(window: void*, width: i32, height: i32) {
    dba8:	ff f5                	push   %rbp
    dbaa:	48 8b ec             	mov    %rsp,%rbp
    dbad:	ff f3                	push   %rbx
    dbaf:	ff f7                	push   %rdi
    dbb1:	ff f6                	push   %rsi
    dbb3:	41 ff f4             	push   %r12
    dbb6:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    dbba:	48 89 55 18          	mov    %rdx,0x18(%rbp)
    dbbe:	4c 89 45 20          	mov    %r8,0x20(%rbp)
    dbc2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    dbc9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    dbd0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    dbd4:	48 89 0c 24          	mov    %rcx,(%rsp)
    dbd8:	e8 8b f6 ff ff       	call   d268 <main+0xd268>
    dbdd:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    dbe4:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    dbe9:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    dbed:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    dbf4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    dbf8:	ba 00 00 00 00       	mov    $0x0,%edx
    dbfd:	48 3b ca             	cmp    %rdx,%rcx
    dc00:	40 0f 95 c1          	rex setne %cl
    dc04:	48 0f b6 c9          	movzbq %cl,%rcx
    dc08:	ff f1                	push   %rcx
    dc0a:	b9 9c 03 00 00       	mov    $0x39c,%ecx
    dc0f:	ff f1                	push   %rcx
    dc11:	b9 18 00 00 00       	mov    $0x18,%ecx
    dc16:	ff f1                	push   %rcx
    dc18:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dc1f <main+0xdc1f>
    dc1f:	ff f1                	push   %rcx
    dc21:	b9 07 00 00 00       	mov    $0x7,%ecx
    dc26:	ff f1                	push   %rcx
    dc28:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dc2f <main+0xdc2f>
    dc2f:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    dc34:	8f c1                	pop    %rcx
    dc36:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    dc3b:	8f c1                	pop    %rcx
    dc3d:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    dc42:	8f c1                	pop    %rcx
    dc44:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    dc49:	8f c1                	pop    %rcx
    dc4b:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    dc4f:	8f c1                	pop    %rcx
    dc51:	88 0c 24             	mov    %cl,(%rsp)
    dc54:	e8 f9 23 ff ff       	call   52 <main+0x52>
    dc59:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    
    context.width = width
    dc60:	8b 4d 18             	mov    0x18(%rbp),%ecx
    dc63:	48 63 c9             	movslq %ecx,%rcx
    dc66:	ff f1                	push   %rcx
    dc68:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    dc6f:	48 03 cd             	add    %rbp,%rcx
    dc72:	48 8b 11             	mov    (%rcx),%rdx
    dc75:	b9 08 00 00 00       	mov    $0x8,%ecx
    dc7a:	48 03 d1             	add    %rcx,%rdx
    dc7d:	8f c1                	pop    %rcx
    dc7f:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    dc83:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    context.height = height
    dc87:	8b 4d 20             	mov    0x20(%rbp),%ecx
    dc8a:	48 63 c9             	movslq %ecx,%rcx
    dc8d:	ff f1                	push   %rcx
    dc8f:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    dc96:	48 03 cd             	add    %rbp,%rcx
    dc99:	48 8b 11             	mov    (%rcx),%rdx
    dc9c:	b9 0c 00 00 00       	mov    $0xc,%ecx
    dca1:	48 03 d1             	add    %rcx,%rdx
    dca4:	8f c1                	pop    %rcx
    dca6:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
    dcaa:	f3 0f 11 02          	movss  %xmm0,(%rdx)
    dcae:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    dcb5:	41 8f c4             	pop    %r12
    dcb8:	8f c6                	pop    %rsi
    dcba:	8f c7                	pop    %rdi
    dcbc:	8f c3                	pop    %rbx
    dcbe:	8f c5                	pop    %rbp
    dcc0:	c3                   	ret

    LOG_GLFW_CALLBACK("resize ",width, " ", height)
}
fn GLFW_CALLBACK_API CharCallback(window: void*, chr: u32) {
    dcc1:	ff f5                	push   %rbp
    dcc3:	48 8b ec             	mov    %rsp,%rbp
    dcc6:	ff f3                	push   %rbx
    dcc8:	ff f7                	push   %rdi
    dcca:	ff f6                	push   %rsi
    dccc:	41 ff f4             	push   %r12
    dccf:	48 89 4d 10          	mov    %rcx,0x10(%rbp)
    dcd3:	48 89 55 18          	mov    %rdx,0x18(%rbp)
    dcd7:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    context := GetWindowContextByGLFWWindow(window);
    dcde:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
    dce5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    dce9:	48 89 0c 24          	mov    %rcx,(%rsp)
    dced:	e8 76 f5 ff ff       	call   d268 <main+0xd268>
    dcf2:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    dcf9:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
    dcfe:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    Assert(context)
    dd02:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
    dd09:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    dd0d:	ba 00 00 00 00       	mov    $0x0,%edx
    dd12:	48 3b ca             	cmp    %rdx,%rcx
    dd15:	40 0f 95 c1          	rex setne %cl
    dd19:	48 0f b6 c9          	movzbq %cl,%rcx
    dd1d:	ff f1                	push   %rcx
    dd1f:	b9 a5 03 00 00       	mov    $0x3a5,%ecx
    dd24:	ff f1                	push   %rcx
    dd26:	b9 18 00 00 00       	mov    $0x18,%ecx
    dd2b:	ff f1                	push   %rcx
    dd2d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dd34 <main+0xdd34>
    dd34:	ff f1                	push   %rcx
    dd36:	b9 07 00 00 00       	mov    $0x7,%ecx
    dd3b:	ff f1                	push   %rcx
    dd3d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dd44 <main+0xdd44>
    dd44:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    dd49:	8f c1                	pop    %rcx
    dd4b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    dd50:	8f c1                	pop    %rcx
    dd52:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    dd57:	8f c1                	pop    %rcx
    dd59:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    dd5e:	8f c1                	pop    %rcx
    dd60:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
    dd64:	8f c1                	pop    %rcx
    dd66:	88 0c 24             	mov    %cl,(%rsp)
    dd69:	e8 e4 22 ff ff       	call   52 <main+0x52>
    dd6e:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    //     (chr == ',' && last == GLFW_KEY_DELETE) {
    //         return;
    //     }
    // }
    
    if context.typed_characters_end < context.typed_characters.len {
    dd75:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    dd7c:	48 03 cd             	add    %rbp,%rcx
    dd7f:	48 8b 11             	mov    (%rcx),%rdx
    dd82:	b9 9c 00 00 00       	mov    $0x9c,%ecx
    dd87:	48 03 d1             	add    %rcx,%rdx
    dd8a:	8b 0a                	mov    (%rdx),%ecx
    dd8c:	ff f1                	push   %rcx
    dd8e:	b9 14 00 00 00       	mov    $0x14,%ecx
    dd93:	8f c2                	pop    %rdx
    dd95:	3b d1                	cmp    %ecx,%edx
    dd97:	40 0f 9c c2          	rex setl %dl
    dd9b:	48 0f b6 d2          	movzbq %dl,%rdx
    dd9f:	48 83 fa 00          	cmp    $0x0,%rdx
    dda3:	0f 84 71 00 00 00    	je     de1a <main+0xde1a>
        // we ignore characters that don't fit in the buffer
        // as long as the user doesn't type more than the max characters per frame (every time you poll characters), things should be fine.
        context.typed_characters[context.typed_characters_end] = chr
    dda9:	8b 4d 18             	mov    0x18(%rbp),%ecx
    ddac:	8b c9                	mov    %ecx,%ecx
    ddae:	ff f1                	push   %rcx
    ddb0:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    ddb7:	48 03 cd             	add    %rbp,%rcx
    ddba:	48 8b 11             	mov    (%rcx),%rdx
    ddbd:	b9 48 00 00 00       	mov    $0x48,%ecx
    ddc2:	48 03 d1             	add    %rcx,%rdx
    ddc5:	ff f2                	push   %rdx
    ddc7:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    ddce:	48 03 cd             	add    %rbp,%rcx
    ddd1:	48 8b 11             	mov    (%rcx),%rdx
    ddd4:	b9 9c 00 00 00       	mov    $0x9c,%ecx
    ddd9:	48 03 d1             	add    %rcx,%rdx
    dddc:	8b 0a                	mov    (%rdx),%ecx
    ddde:	8f c2                	pop    %rdx
    dde0:	bb 04 00 00 00       	mov    $0x4,%ebx
    dde5:	ff f2                	push   %rdx
    dde7:	48 8b c1             	mov    %rcx,%rax
    ddea:	f7 e3                	mul    %ebx
    ddec:	48 8b c8             	mov    %rax,%rcx
    ddef:	8f c2                	pop    %rdx
    ddf1:	48 03 d1             	add    %rcx,%rdx
    ddf4:	8f c1                	pop    %rcx
    ddf6:	8b d9                	mov    %ecx,%ebx
    ddf8:	89 1a                	mov    %ebx,(%rdx)
        context.typed_characters_end++
    ddfa:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
    de01:	48 03 cd             	add    %rbp,%rcx
    de04:	48 8b 11             	mov    (%rcx),%rdx
    de07:	b9 9c 00 00 00       	mov    $0x9c,%ecx
    de0c:	48 03 d1             	add    %rcx,%rdx
    de0f:	8b 0a                	mov    (%rdx),%ecx
    de11:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
    de18:	89 0a                	mov    %ecx,(%rdx)
    de1a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    de21:	41 8f c4             	pop    %r12
    de24:	8f c6                	pop    %rsi
    de26:	8f c7                	pop    %rdi
    de28:	8f c3                	pop    %rbx
    de2a:	8f c5                	pop    %rbp
    de2c:	c3                   	ret
    // glEnable(GL_CULL)

    return window;
}
// returns program id which can be passes to glUseProgram
fn CreateShaderProgram(vshader: char[], fshader: char[]) -> u32 {
    de2d:	ff f5                	push   %rbp
    de2f:	48 8b ec             	mov    %rsp,%rbp
    de32:	48 81 ec 50 02 00 00 	sub    $0x250,%rsp
    vertexShader := glCreateShader(GL_VERTEX_SHADER);
    de39:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    de40:	b9 31 8b 00 00       	mov    $0x8b31,%ecx
    de45:	8b d1                	mov    %ecx,%edx
    de47:	89 14 24             	mov    %edx,(%rsp)
    de4a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # de51 <main+0xde51>
    de51:	48 8b 11             	mov    (%rcx),%rdx
    de54:	4c 8b d2             	mov    %rdx,%r10
    de57:	33 c9                	xor    %ecx,%ecx
    de59:	8b 0c 24             	mov    (%rsp),%ecx
    de5c:	41 ff d2             	call   *%r10
    de5f:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    de66:	8b c8                	mov    %eax,%ecx
    de68:	89 4d f0             	mov    %ecx,-0x10(%rbp)
    GLCHECK
    de6b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    de72:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # de79 <main+0xde79>
    de79:	48 8b 11             	mov    (%rcx),%rdx
    de7c:	4c 8b d2             	mov    %rdx,%r10
    de7f:	41 ff d2             	call   *%r10
    de82:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    de89:	8b c8                	mov    %eax,%ecx
    de8b:	ff f1                	push   %rcx
    de8d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # de94 <main+0xde94>
    de94:	8f c2                	pop    %rdx
    de96:	48 63 da             	movslq %edx,%rbx
    de99:	88 19                	mov    %bl,(%rcx)
    de9b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dea2 <main+0xdea2>
    dea2:	48 8a 11             	rex.W mov (%rcx),%dl
    dea5:	48 0f b6 d2          	movzbq %dl,%rdx
    dea9:	48 83 fa 00          	cmp    $0x0,%rdx
    dead:	0f 84 17 01 00 00    	je     dfca <main+0xdfca>
    deb3:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    deba:	b9 06 00 00 00       	mov    $0x6,%ecx
    debf:	ff f1                	push   %rcx
    dec1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # dec8 <main+0xdec8>
    dec8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    decd:	8f c1                	pop    %rcx
    decf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ded4:	e8 b9 61 ff ff       	call   4092 <main+0x4092>
    ded9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    dee0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    dee7:	b9 18 00 00 00       	mov    $0x18,%ecx
    deec:	ff f1                	push   %rcx
    deee:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # def5 <main+0xdef5>
    def5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    defa:	8f c1                	pop    %rcx
    defc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    df01:	e8 8c 61 ff ff       	call   4092 <main+0x4092>
    df06:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    df0d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    df14:	b9 01 00 00 00       	mov    $0x1,%ecx
    df19:	ff f1                	push   %rcx
    df1b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # df22 <main+0xdf22>
    df22:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    df27:	8f c1                	pop    %rcx
    df29:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    df2e:	e8 5f 61 ff ff       	call   4092 <main+0x4092>
    df33:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    df3a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    df41:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
    df46:	48 63 d1             	movslq %ecx,%rdx
    df49:	48 89 14 24          	mov    %rdx,(%rsp)
    df4d:	e8 a4 5e ff ff       	call   3df6 <main+0x3df6>
    df52:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    df59:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    df60:	b9 08 00 00 00       	mov    $0x8,%ecx
    df65:	ff f1                	push   %rcx
    df67:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # df6e <main+0xdf6e>
    df6e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    df73:	8f c1                	pop    %rcx
    df75:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    df7a:	e8 13 61 ff ff       	call   4092 <main+0x4092>
    df7f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    df86:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    df8d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # df94 <main+0xdf94>
    df94:	48 8a 11             	rex.W mov (%rcx),%dl
    df97:	48 0f b6 d2          	movzbq %dl,%rdx
    df9b:	48 0f be ca          	movsbq %dl,%rcx
    df9f:	48 89 0c 24          	mov    %rcx,(%rsp)
    dfa3:	e8 4e 5e ff ff       	call   3df6 <main+0x3df6>
    dfa8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    dfaf:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    dfb6:	b9 0a 00 00 00       	mov    $0xa,%ecx
    dfbb:	88 0c 24             	mov    %cl,(%rsp)
    dfbe:	e8 2e 60 ff ff       	call   3ff1 <main+0x3ff1>
    dfc3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glShaderSource(vertexShader, 1, &vshader.ptr, null);
    dfca:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    dfd1:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    dfd4:	ff f1                	push   %rcx
    dfd6:	b9 01 00 00 00       	mov    $0x1,%ecx
    dfdb:	ff f1                	push   %rcx
    dfdd:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    dfe4:	48 03 cd             	add    %rbp,%rcx
    dfe7:	ff f1                	push   %rcx
    dfe9:	b9 00 00 00 00       	mov    $0x0,%ecx
    dfee:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    dff3:	8f c1                	pop    %rcx
    dff5:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    dffa:	8f c1                	pop    %rcx
    dffc:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    e000:	8f c1                	pop    %rcx
    e002:	89 0c 24             	mov    %ecx,(%rsp)
    e005:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e00c <main+0xe00c>
    e00c:	48 8b 11             	mov    (%rcx),%rdx
    e00f:	4c 8b d2             	mov    %rdx,%r10
    e012:	33 c9                	xor    %ecx,%ecx
    e014:	8b 0c 24             	mov    (%rsp),%ecx
    e017:	33 d2                	xor    %edx,%edx
    e019:	8b 54 24 08          	mov    0x8(%rsp),%edx
    e01d:	45 33 c0             	xor    %r8d,%r8d
    e020:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    e025:	45 33 c9             	xor    %r9d,%r9d
    e028:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    e02d:	41 ff d2             	call   *%r10
    e030:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    e037:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e03e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e045 <main+0xe045>
    e045:	48 8b 11             	mov    (%rcx),%rdx
    e048:	4c 8b d2             	mov    %rdx,%r10
    e04b:	41 ff d2             	call   *%r10
    e04e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e055:	8b c8                	mov    %eax,%ecx
    e057:	ff f1                	push   %rcx
    e059:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e060 <main+0xe060>
    e060:	8f c2                	pop    %rdx
    e062:	48 63 da             	movslq %edx,%rbx
    e065:	88 19                	mov    %bl,(%rcx)
    e067:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e06e <main+0xe06e>
    e06e:	48 8a 11             	rex.W mov (%rcx),%dl
    e071:	48 0f b6 d2          	movzbq %dl,%rdx
    e075:	48 83 fa 00          	cmp    $0x0,%rdx
    e079:	0f 84 17 01 00 00    	je     e196 <main+0xe196>
    e07f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e086:	b9 06 00 00 00       	mov    $0x6,%ecx
    e08b:	ff f1                	push   %rcx
    e08d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e094 <main+0xe094>
    e094:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e099:	8f c1                	pop    %rcx
    e09b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e0a0:	e8 ed 5f ff ff       	call   4092 <main+0x4092>
    e0a5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e0ac:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e0b3:	b9 18 00 00 00       	mov    $0x18,%ecx
    e0b8:	ff f1                	push   %rcx
    e0ba:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e0c1 <main+0xe0c1>
    e0c1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e0c6:	8f c1                	pop    %rcx
    e0c8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e0cd:	e8 c0 5f ff ff       	call   4092 <main+0x4092>
    e0d2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e0d9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e0e0:	b9 01 00 00 00       	mov    $0x1,%ecx
    e0e5:	ff f1                	push   %rcx
    e0e7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e0ee <main+0xe0ee>
    e0ee:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e0f3:	8f c1                	pop    %rcx
    e0f5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e0fa:	e8 93 5f ff ff       	call   4092 <main+0x4092>
    e0ff:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e106:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e10d:	b9 f3 03 00 00       	mov    $0x3f3,%ecx
    e112:	48 63 d1             	movslq %ecx,%rdx
    e115:	48 89 14 24          	mov    %rdx,(%rsp)
    e119:	e8 d8 5c ff ff       	call   3df6 <main+0x3df6>
    e11e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    e125:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e12c:	b9 08 00 00 00       	mov    $0x8,%ecx
    e131:	ff f1                	push   %rcx
    e133:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e13a <main+0xe13a>
    e13a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e13f:	8f c1                	pop    %rcx
    e141:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e146:	e8 47 5f ff ff       	call   4092 <main+0x4092>
    e14b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e152:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e159:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e160 <main+0xe160>
    e160:	48 8a 11             	rex.W mov (%rcx),%dl
    e163:	48 0f b6 d2          	movzbq %dl,%rdx
    e167:	48 0f be ca          	movsbq %dl,%rcx
    e16b:	48 89 0c 24          	mov    %rcx,(%rsp)
    e16f:	e8 82 5c ff ff       	call   3df6 <main+0x3df6>
    e174:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e17b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e182:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e187:	88 0c 24             	mov    %cl,(%rsp)
    e18a:	e8 62 5e ff ff       	call   3ff1 <main+0x3ff1>
    e18f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glCompileShader(vertexShader);
    e196:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e19d:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    e1a0:	89 0c 24             	mov    %ecx,(%rsp)
    e1a3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e1aa <main+0xe1aa>
    e1aa:	48 8b 11             	mov    (%rcx),%rdx
    e1ad:	4c 8b d2             	mov    %rdx,%r10
    e1b0:	33 c9                	xor    %ecx,%ecx
    e1b2:	8b 0c 24             	mov    (%rsp),%ecx
    e1b5:	41 ff d2             	call   *%r10
    e1b8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    e1bf:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e1c6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e1cd <main+0xe1cd>
    e1cd:	48 8b 11             	mov    (%rcx),%rdx
    e1d0:	4c 8b d2             	mov    %rdx,%r10
    e1d3:	41 ff d2             	call   *%r10
    e1d6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e1dd:	8b c8                	mov    %eax,%ecx
    e1df:	ff f1                	push   %rcx
    e1e1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e1e8 <main+0xe1e8>
    e1e8:	8f c2                	pop    %rdx
    e1ea:	48 63 da             	movslq %edx,%rbx
    e1ed:	88 19                	mov    %bl,(%rcx)
    e1ef:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e1f6 <main+0xe1f6>
    e1f6:	48 8a 11             	rex.W mov (%rcx),%dl
    e1f9:	48 0f b6 d2          	movzbq %dl,%rdx
    e1fd:	48 83 fa 00          	cmp    $0x0,%rdx
    e201:	0f 84 17 01 00 00    	je     e31e <main+0xe31e>
    e207:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e20e:	b9 06 00 00 00       	mov    $0x6,%ecx
    e213:	ff f1                	push   %rcx
    e215:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e21c <main+0xe21c>
    e21c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e221:	8f c1                	pop    %rcx
    e223:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e228:	e8 65 5e ff ff       	call   4092 <main+0x4092>
    e22d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e234:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e23b:	b9 18 00 00 00       	mov    $0x18,%ecx
    e240:	ff f1                	push   %rcx
    e242:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e249 <main+0xe249>
    e249:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e24e:	8f c1                	pop    %rcx
    e250:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e255:	e8 38 5e ff ff       	call   4092 <main+0x4092>
    e25a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e261:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e268:	b9 01 00 00 00       	mov    $0x1,%ecx
    e26d:	ff f1                	push   %rcx
    e26f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e276 <main+0xe276>
    e276:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e27b:	8f c1                	pop    %rcx
    e27d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e282:	e8 0b 5e ff ff       	call   4092 <main+0x4092>
    e287:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e28e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e295:	b9 f5 03 00 00       	mov    $0x3f5,%ecx
    e29a:	48 63 d1             	movslq %ecx,%rdx
    e29d:	48 89 14 24          	mov    %rdx,(%rsp)
    e2a1:	e8 50 5b ff ff       	call   3df6 <main+0x3df6>
    e2a6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    e2ad:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e2b4:	b9 08 00 00 00       	mov    $0x8,%ecx
    e2b9:	ff f1                	push   %rcx
    e2bb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e2c2 <main+0xe2c2>
    e2c2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e2c7:	8f c1                	pop    %rcx
    e2c9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e2ce:	e8 bf 5d ff ff       	call   4092 <main+0x4092>
    e2d3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e2da:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e2e1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e2e8 <main+0xe2e8>
    e2e8:	48 8a 11             	rex.W mov (%rcx),%dl
    e2eb:	48 0f b6 d2          	movzbq %dl,%rdx
    e2ef:	48 0f be ca          	movsbq %dl,%rcx
    e2f3:	48 89 0c 24          	mov    %rcx,(%rsp)
    e2f7:	e8 fa 5a ff ff       	call   3df6 <main+0x3df6>
    e2fc:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e303:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e30a:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e30f:	88 0c 24             	mov    %cl,(%rsp)
    e312:	e8 da 5c ff ff       	call   3ff1 <main+0x3ff1>
    e317:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    success: i32; // reused further down
    e31e:	33 c9                	xor    %ecx,%ecx
    e320:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    infoLog: char[512];
    e323:	b9 00 02 00 00       	mov    $0x200,%ecx
    e328:	48 ba e8 fd ff ff ff 	movabs $0xfffffffffffffde8,%rdx
    e32f:	ff ff ff 
    e332:	48 03 d5             	add    %rbp,%rdx
    e335:	48 83 c2 00          	add    $0x0,%rdx
    e339:	ff f2                	push   %rdx
    e33b:	ff f1                	push   %rcx
    e33d:	48 01 d1             	add    %rdx,%rcx
    e340:	48 3b ca             	cmp    %rdx,%rcx
    e343:	74 0d                	je     e352 <main+0xe352>
    e345:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
    e34c:	48 83 c2 08          	add    $0x8,%rdx
    e350:	eb ee                	jmp    e340 <main+0xe340>
    e352:	8f c1                	pop    %rcx
    e354:	8f c2                	pop    %rdx
    e356:	b9 00 02 00 00       	mov    $0x200,%ecx
    e35b:	ff f1                	push   %rcx
    e35d:	48 c7 c1 e8 fd ff ff 	mov    $0xfffffffffffffde8,%rcx
    e364:	48 03 cd             	add    %rbp,%rcx
    e367:	48 89 8d d8 fd ff ff 	mov    %rcx,-0x228(%rbp)
    e36e:	8f c1                	pop    %rcx
    e370:	48 89 8d e0 fd ff ff 	mov    %rcx,-0x220(%rbp)
    info_max: i32 = infoLog.len
    e377:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    e37e:	48 03 cd             	add    %rbp,%rcx
    e381:	ba 08 00 00 00       	mov    $0x8,%edx
    e386:	48 03 ca             	add    %rdx,%rcx
    e389:	48 8b 11             	mov    (%rcx),%rdx
    e38c:	48 8b ca             	mov    %rdx,%rcx
    e38f:	89 8d d0 fd ff ff    	mov    %ecx,-0x230(%rbp)
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    e395:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e39c:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    e39f:	ff f1                	push   %rcx
    e3a1:	b9 81 8b 00 00       	mov    $0x8b81,%ecx
    e3a6:	8b d1                	mov    %ecx,%edx
    e3a8:	ff f2                	push   %rdx
    e3aa:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    e3b1:	48 03 cd             	add    %rbp,%rcx
    e3b4:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    e3b9:	8f c1                	pop    %rcx
    e3bb:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    e3bf:	8f c1                	pop    %rcx
    e3c1:	89 0c 24             	mov    %ecx,(%rsp)
    e3c4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e3cb <main+0xe3cb>
    e3cb:	48 8b 11             	mov    (%rcx),%rdx
    e3ce:	4c 8b d2             	mov    %rdx,%r10
    e3d1:	33 c9                	xor    %ecx,%ecx
    e3d3:	8b 0c 24             	mov    (%rsp),%ecx
    e3d6:	33 d2                	xor    %edx,%edx
    e3d8:	8b 54 24 08          	mov    0x8(%rsp),%edx
    e3dc:	45 33 c0             	xor    %r8d,%r8d
    e3df:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    e3e4:	41 ff d2             	call   *%r10
    e3e7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    if !success {
    e3ee:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    e3f1:	48 85 c9             	test   %rcx,%rcx
    e3f4:	40 0f 94 c1          	rex sete %cl
    e3f8:	48 0f b6 c9          	movzbq %cl,%rcx
    e3fc:	48 83 f9 00          	cmp    $0x0,%rcx
    e400:	0f 84 00 01 00 00    	je     e506 <main+0xe506>
        len: i32 = 0;
    e406:	b9 00 00 00 00       	mov    $0x0,%ecx
    e40b:	89 8d c8 fd ff ff    	mov    %ecx,-0x238(%rbp)
        glGetShaderInfoLog(vertexShader, info_max, &len, infoLog.ptr);
    e411:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e418:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    e41b:	ff f1                	push   %rcx
    e41d:	8b 8d d0 fd ff ff    	mov    -0x230(%rbp),%ecx
    e423:	ff f1                	push   %rcx
    e425:	48 c7 c1 c8 fd ff ff 	mov    $0xfffffffffffffdc8,%rcx
    e42c:	48 03 cd             	add    %rbp,%rcx
    e42f:	ff f1                	push   %rcx
    e431:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    e438:	48 03 cd             	add    %rbp,%rcx
    e43b:	48 8b 11             	mov    (%rcx),%rdx
    e43e:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    e443:	8f c1                	pop    %rcx
    e445:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    e44a:	8f c1                	pop    %rcx
    e44c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    e450:	8f c1                	pop    %rcx
    e452:	89 0c 24             	mov    %ecx,(%rsp)
    e455:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e45c <main+0xe45c>
    e45c:	48 8b 11             	mov    (%rcx),%rdx
    e45f:	4c 8b d2             	mov    %rdx,%r10
    e462:	33 c9                	xor    %ecx,%ecx
    e464:	8b 0c 24             	mov    (%rsp),%ecx
    e467:	33 d2                	xor    %edx,%edx
    e469:	8b 54 24 08          	mov    0x8(%rsp),%edx
    e46d:	45 33 c0             	xor    %r8d,%r8d
    e470:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    e475:	45 33 c9             	xor    %r9d,%r9d
    e478:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    e47d:	41 ff d2             	call   *%r10
    e480:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        log("Vertex shader error: ",Slice<char>{infoLog.ptr,len});
    e487:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e48e:	b9 15 00 00 00       	mov    $0x15,%ecx
    e493:	ff f1                	push   %rcx
    e495:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e49c <main+0xe49c>
    e49c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e4a1:	8f c1                	pop    %rcx
    e4a3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e4a8:	e8 e5 5b ff ff       	call   4092 <main+0x4092>
    e4ad:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e4b4:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e4bb:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    e4c1:	48 63 d1             	movslq %ecx,%rdx
    e4c4:	ff f2                	push   %rdx
    e4c6:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    e4cd:	48 03 cd             	add    %rbp,%rcx
    e4d0:	48 8b 11             	mov    (%rcx),%rdx
    e4d3:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    e4d8:	8f c1                	pop    %rcx
    e4da:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e4df:	e8 ae 5b ff ff       	call   4092 <main+0x4092>
    e4e4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e4eb:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e4f2:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e4f7:	88 0c 24             	mov    %cl,(%rsp)
    e4fa:	e8 f2 5a ff ff       	call   3ff1 <main+0x3ff1>
    e4ff:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    }

    fragmentShader := glCreateShader(GL_FRAGMENT_SHADER);
    e506:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e50d:	b9 30 8b 00 00       	mov    $0x8b30,%ecx
    e512:	8b d1                	mov    %ecx,%edx
    e514:	89 14 24             	mov    %edx,(%rsp)
    e517:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e51e <main+0xe51e>
    e51e:	48 8b 11             	mov    (%rcx),%rdx
    e521:	4c 8b d2             	mov    %rdx,%r10
    e524:	33 c9                	xor    %ecx,%ecx
    e526:	8b 0c 24             	mov    (%rsp),%ecx
    e529:	41 ff d2             	call   *%r10
    e52c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e533:	8b c8                	mov    %eax,%ecx
    e535:	89 8d c8 fd ff ff    	mov    %ecx,-0x238(%rbp)
    GLCHECK
    e53b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e542:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e549 <main+0xe549>
    e549:	48 8b 11             	mov    (%rcx),%rdx
    e54c:	4c 8b d2             	mov    %rdx,%r10
    e54f:	41 ff d2             	call   *%r10
    e552:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e559:	8b c8                	mov    %eax,%ecx
    e55b:	ff f1                	push   %rcx
    e55d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e564 <main+0xe564>
    e564:	8f c2                	pop    %rdx
    e566:	48 63 da             	movslq %edx,%rbx
    e569:	88 19                	mov    %bl,(%rcx)
    e56b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e572 <main+0xe572>
    e572:	48 8a 11             	rex.W mov (%rcx),%dl
    e575:	48 0f b6 d2          	movzbq %dl,%rdx
    e579:	48 83 fa 00          	cmp    $0x0,%rdx
    e57d:	0f 84 17 01 00 00    	je     e69a <main+0xe69a>
    e583:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e58a:	b9 06 00 00 00       	mov    $0x6,%ecx
    e58f:	ff f1                	push   %rcx
    e591:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e598 <main+0xe598>
    e598:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e59d:	8f c1                	pop    %rcx
    e59f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5a4:	e8 e9 5a ff ff       	call   4092 <main+0x4092>
    e5a9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e5b0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e5b7:	b9 18 00 00 00       	mov    $0x18,%ecx
    e5bc:	ff f1                	push   %rcx
    e5be:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e5c5 <main+0xe5c5>
    e5c5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5ca:	8f c1                	pop    %rcx
    e5cc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5d1:	e8 bc 5a ff ff       	call   4092 <main+0x4092>
    e5d6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e5dd:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e5e4:	b9 01 00 00 00       	mov    $0x1,%ecx
    e5e9:	ff f1                	push   %rcx
    e5eb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e5f2 <main+0xe5f2>
    e5f2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5f7:	8f c1                	pop    %rcx
    e5f9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e5fe:	e8 8f 5a ff ff       	call   4092 <main+0x4092>
    e603:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e60a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e611:	b9 02 04 00 00       	mov    $0x402,%ecx
    e616:	48 63 d1             	movslq %ecx,%rdx
    e619:	48 89 14 24          	mov    %rdx,(%rsp)
    e61d:	e8 d4 57 ff ff       	call   3df6 <main+0x3df6>
    e622:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    e629:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e630:	b9 08 00 00 00       	mov    $0x8,%ecx
    e635:	ff f1                	push   %rcx
    e637:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e63e <main+0xe63e>
    e63e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e643:	8f c1                	pop    %rcx
    e645:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e64a:	e8 43 5a ff ff       	call   4092 <main+0x4092>
    e64f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e656:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e65d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e664 <main+0xe664>
    e664:	48 8a 11             	rex.W mov (%rcx),%dl
    e667:	48 0f b6 d2          	movzbq %dl,%rdx
    e66b:	48 0f be ca          	movsbq %dl,%rcx
    e66f:	48 89 0c 24          	mov    %rcx,(%rsp)
    e673:	e8 7e 57 ff ff       	call   3df6 <main+0x3df6>
    e678:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e67f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e686:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e68b:	88 0c 24             	mov    %cl,(%rsp)
    e68e:	e8 5e 59 ff ff       	call   3ff1 <main+0x3ff1>
    e693:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glShaderSource(fragmentShader, 1, &fshader.ptr, null);
    e69a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e6a1:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    e6a7:	ff f1                	push   %rcx
    e6a9:	b9 01 00 00 00       	mov    $0x1,%ecx
    e6ae:	ff f1                	push   %rcx
    e6b0:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
    e6b7:	48 03 cd             	add    %rbp,%rcx
    e6ba:	ff f1                	push   %rcx
    e6bc:	b9 00 00 00 00       	mov    $0x0,%ecx
    e6c1:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    e6c6:	8f c1                	pop    %rcx
    e6c8:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    e6cd:	8f c1                	pop    %rcx
    e6cf:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    e6d3:	8f c1                	pop    %rcx
    e6d5:	89 0c 24             	mov    %ecx,(%rsp)
    e6d8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e6df <main+0xe6df>
    e6df:	48 8b 11             	mov    (%rcx),%rdx
    e6e2:	4c 8b d2             	mov    %rdx,%r10
    e6e5:	33 c9                	xor    %ecx,%ecx
    e6e7:	8b 0c 24             	mov    (%rsp),%ecx
    e6ea:	33 d2                	xor    %edx,%edx
    e6ec:	8b 54 24 08          	mov    0x8(%rsp),%edx
    e6f0:	45 33 c0             	xor    %r8d,%r8d
    e6f3:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    e6f8:	45 33 c9             	xor    %r9d,%r9d
    e6fb:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    e700:	41 ff d2             	call   *%r10
    e703:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    e70a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e711:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e718 <main+0xe718>
    e718:	48 8b 11             	mov    (%rcx),%rdx
    e71b:	4c 8b d2             	mov    %rdx,%r10
    e71e:	41 ff d2             	call   *%r10
    e721:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e728:	8b c8                	mov    %eax,%ecx
    e72a:	ff f1                	push   %rcx
    e72c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e733 <main+0xe733>
    e733:	8f c2                	pop    %rdx
    e735:	48 63 da             	movslq %edx,%rbx
    e738:	88 19                	mov    %bl,(%rcx)
    e73a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e741 <main+0xe741>
    e741:	48 8a 11             	rex.W mov (%rcx),%dl
    e744:	48 0f b6 d2          	movzbq %dl,%rdx
    e748:	48 83 fa 00          	cmp    $0x0,%rdx
    e74c:	0f 84 17 01 00 00    	je     e869 <main+0xe869>
    e752:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e759:	b9 06 00 00 00       	mov    $0x6,%ecx
    e75e:	ff f1                	push   %rcx
    e760:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e767 <main+0xe767>
    e767:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e76c:	8f c1                	pop    %rcx
    e76e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e773:	e8 1a 59 ff ff       	call   4092 <main+0x4092>
    e778:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e77f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e786:	b9 18 00 00 00       	mov    $0x18,%ecx
    e78b:	ff f1                	push   %rcx
    e78d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e794 <main+0xe794>
    e794:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e799:	8f c1                	pop    %rcx
    e79b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e7a0:	e8 ed 58 ff ff       	call   4092 <main+0x4092>
    e7a5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e7ac:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e7b3:	b9 01 00 00 00       	mov    $0x1,%ecx
    e7b8:	ff f1                	push   %rcx
    e7ba:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e7c1 <main+0xe7c1>
    e7c1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e7c6:	8f c1                	pop    %rcx
    e7c8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e7cd:	e8 c0 58 ff ff       	call   4092 <main+0x4092>
    e7d2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e7d9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e7e0:	b9 04 04 00 00       	mov    $0x404,%ecx
    e7e5:	48 63 d1             	movslq %ecx,%rdx
    e7e8:	48 89 14 24          	mov    %rdx,(%rsp)
    e7ec:	e8 05 56 ff ff       	call   3df6 <main+0x3df6>
    e7f1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    e7f8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e7ff:	b9 08 00 00 00       	mov    $0x8,%ecx
    e804:	ff f1                	push   %rcx
    e806:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e80d <main+0xe80d>
    e80d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e812:	8f c1                	pop    %rcx
    e814:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e819:	e8 74 58 ff ff       	call   4092 <main+0x4092>
    e81e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e825:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e82c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e833 <main+0xe833>
    e833:	48 8a 11             	rex.W mov (%rcx),%dl
    e836:	48 0f b6 d2          	movzbq %dl,%rdx
    e83a:	48 0f be ca          	movsbq %dl,%rcx
    e83e:	48 89 0c 24          	mov    %rcx,(%rsp)
    e842:	e8 af 55 ff ff       	call   3df6 <main+0x3df6>
    e847:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e84e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e855:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e85a:	88 0c 24             	mov    %cl,(%rsp)
    e85d:	e8 8f 57 ff ff       	call   3ff1 <main+0x3ff1>
    e862:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glCompileShader(fragmentShader);
    e869:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e870:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    e876:	89 0c 24             	mov    %ecx,(%rsp)
    e879:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e880 <main+0xe880>
    e880:	48 8b 11             	mov    (%rcx),%rdx
    e883:	4c 8b d2             	mov    %rdx,%r10
    e886:	33 c9                	xor    %ecx,%ecx
    e888:	8b 0c 24             	mov    (%rsp),%ecx
    e88b:	41 ff d2             	call   *%r10
    e88e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    e895:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e89c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e8a3 <main+0xe8a3>
    e8a3:	48 8b 11             	mov    (%rcx),%rdx
    e8a6:	4c 8b d2             	mov    %rdx,%r10
    e8a9:	41 ff d2             	call   *%r10
    e8ac:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    e8b3:	8b c8                	mov    %eax,%ecx
    e8b5:	ff f1                	push   %rcx
    e8b7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e8be <main+0xe8be>
    e8be:	8f c2                	pop    %rdx
    e8c0:	48 63 da             	movslq %edx,%rbx
    e8c3:	88 19                	mov    %bl,(%rcx)
    e8c5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e8cc <main+0xe8cc>
    e8cc:	48 8a 11             	rex.W mov (%rcx),%dl
    e8cf:	48 0f b6 d2          	movzbq %dl,%rdx
    e8d3:	48 83 fa 00          	cmp    $0x0,%rdx
    e8d7:	0f 84 17 01 00 00    	je     e9f4 <main+0xe9f4>
    e8dd:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e8e4:	b9 06 00 00 00       	mov    $0x6,%ecx
    e8e9:	ff f1                	push   %rcx
    e8eb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e8f2 <main+0xe8f2>
    e8f2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e8f7:	8f c1                	pop    %rcx
    e8f9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e8fe:	e8 8f 57 ff ff       	call   4092 <main+0x4092>
    e903:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e90a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e911:	b9 18 00 00 00       	mov    $0x18,%ecx
    e916:	ff f1                	push   %rcx
    e918:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e91f <main+0xe91f>
    e91f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e924:	8f c1                	pop    %rcx
    e926:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e92b:	e8 62 57 ff ff       	call   4092 <main+0x4092>
    e930:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e937:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e93e:	b9 01 00 00 00       	mov    $0x1,%ecx
    e943:	ff f1                	push   %rcx
    e945:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e94c <main+0xe94c>
    e94c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e951:	8f c1                	pop    %rcx
    e953:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e958:	e8 35 57 ff ff       	call   4092 <main+0x4092>
    e95d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e964:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e96b:	b9 06 04 00 00       	mov    $0x406,%ecx
    e970:	48 63 d1             	movslq %ecx,%rdx
    e973:	48 89 14 24          	mov    %rdx,(%rsp)
    e977:	e8 7a 54 ff ff       	call   3df6 <main+0x3df6>
    e97c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    e983:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e98a:	b9 08 00 00 00       	mov    $0x8,%ecx
    e98f:	ff f1                	push   %rcx
    e991:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e998 <main+0xe998>
    e998:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e99d:	8f c1                	pop    %rcx
    e99f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    e9a4:	e8 e9 56 ff ff       	call   4092 <main+0x4092>
    e9a9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e9b0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e9b7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e9be <main+0xe9be>
    e9be:	48 8a 11             	rex.W mov (%rcx),%dl
    e9c1:	48 0f b6 d2          	movzbq %dl,%rdx
    e9c5:	48 0f be ca          	movsbq %dl,%rcx
    e9c9:	48 89 0c 24          	mov    %rcx,(%rsp)
    e9cd:	e8 24 54 ff ff       	call   3df6 <main+0x3df6>
    e9d2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    e9d9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    e9e0:	b9 0a 00 00 00       	mov    $0xa,%ecx
    e9e5:	88 0c 24             	mov    %cl,(%rsp)
    e9e8:	e8 04 56 ff ff       	call   3ff1 <main+0x3ff1>
    e9ed:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    e9f4:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    e9fb:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    ea01:	ff f1                	push   %rcx
    ea03:	b9 81 8b 00 00       	mov    $0x8b81,%ecx
    ea08:	8b d1                	mov    %ecx,%edx
    ea0a:	ff f2                	push   %rdx
    ea0c:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    ea13:	48 03 cd             	add    %rbp,%rcx
    ea16:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    ea1b:	8f c1                	pop    %rcx
    ea1d:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    ea21:	8f c1                	pop    %rcx
    ea23:	89 0c 24             	mov    %ecx,(%rsp)
    ea26:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ea2d <main+0xea2d>
    ea2d:	48 8b 11             	mov    (%rcx),%rdx
    ea30:	4c 8b d2             	mov    %rdx,%r10
    ea33:	33 c9                	xor    %ecx,%ecx
    ea35:	8b 0c 24             	mov    (%rsp),%ecx
    ea38:	33 d2                	xor    %edx,%edx
    ea3a:	8b 54 24 08          	mov    0x8(%rsp),%edx
    ea3e:	45 33 c0             	xor    %r8d,%r8d
    ea41:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    ea46:	41 ff d2             	call   *%r10
    ea49:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    ea50:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ea57:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ea5e <main+0xea5e>
    ea5e:	48 8b 11             	mov    (%rcx),%rdx
    ea61:	4c 8b d2             	mov    %rdx,%r10
    ea64:	41 ff d2             	call   *%r10
    ea67:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    ea6e:	8b c8                	mov    %eax,%ecx
    ea70:	ff f1                	push   %rcx
    ea72:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ea79 <main+0xea79>
    ea79:	8f c2                	pop    %rdx
    ea7b:	48 63 da             	movslq %edx,%rbx
    ea7e:	88 19                	mov    %bl,(%rcx)
    ea80:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ea87 <main+0xea87>
    ea87:	48 8a 11             	rex.W mov (%rcx),%dl
    ea8a:	48 0f b6 d2          	movzbq %dl,%rdx
    ea8e:	48 83 fa 00          	cmp    $0x0,%rdx
    ea92:	0f 84 17 01 00 00    	je     ebaf <main+0xebaf>
    ea98:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ea9f:	b9 06 00 00 00       	mov    $0x6,%ecx
    eaa4:	ff f1                	push   %rcx
    eaa6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eaad <main+0xeaad>
    eaad:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eab2:	8f c1                	pop    %rcx
    eab4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eab9:	e8 d4 55 ff ff       	call   4092 <main+0x4092>
    eabe:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eac5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eacc:	b9 18 00 00 00       	mov    $0x18,%ecx
    ead1:	ff f1                	push   %rcx
    ead3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eada <main+0xeada>
    eada:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eadf:	8f c1                	pop    %rcx
    eae1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eae6:	e8 a7 55 ff ff       	call   4092 <main+0x4092>
    eaeb:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eaf2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eaf9:	b9 01 00 00 00       	mov    $0x1,%ecx
    eafe:	ff f1                	push   %rcx
    eb00:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eb07 <main+0xeb07>
    eb07:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eb0c:	8f c1                	pop    %rcx
    eb0e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eb13:	e8 7a 55 ff ff       	call   4092 <main+0x4092>
    eb18:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eb1f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eb26:	b9 09 04 00 00       	mov    $0x409,%ecx
    eb2b:	48 63 d1             	movslq %ecx,%rdx
    eb2e:	48 89 14 24          	mov    %rdx,(%rsp)
    eb32:	e8 bf 52 ff ff       	call   3df6 <main+0x3df6>
    eb37:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    eb3e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eb45:	b9 08 00 00 00       	mov    $0x8,%ecx
    eb4a:	ff f1                	push   %rcx
    eb4c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eb53 <main+0xeb53>
    eb53:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eb58:	8f c1                	pop    %rcx
    eb5a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eb5f:	e8 2e 55 ff ff       	call   4092 <main+0x4092>
    eb64:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eb6b:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eb72:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eb79 <main+0xeb79>
    eb79:	48 8a 11             	rex.W mov (%rcx),%dl
    eb7c:	48 0f b6 d2          	movzbq %dl,%rdx
    eb80:	48 0f be ca          	movsbq %dl,%rcx
    eb84:	48 89 0c 24          	mov    %rcx,(%rsp)
    eb88:	e8 69 52 ff ff       	call   3df6 <main+0x3df6>
    eb8d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eb94:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eb9b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    eba0:	88 0c 24             	mov    %cl,(%rsp)
    eba3:	e8 49 54 ff ff       	call   3ff1 <main+0x3ff1>
    eba8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    if !success {
    ebaf:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    ebb2:	48 85 c9             	test   %rcx,%rcx
    ebb5:	40 0f 94 c1          	rex sete %cl
    ebb9:	48 0f b6 c9          	movzbq %cl,%rcx
    ebbd:	48 83 f9 00          	cmp    $0x0,%rcx
    ebc1:	0f 84 62 02 00 00    	je     ee29 <main+0xee29>
        len: i32 = 0;
    ebc7:	b9 00 00 00 00       	mov    $0x0,%ecx
    ebcc:	89 8d c0 fd ff ff    	mov    %ecx,-0x240(%rbp)
        glGetShaderInfoLog(fragmentShader, info_max, &len, infoLog.ptr);
    ebd2:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ebd9:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    ebdf:	ff f1                	push   %rcx
    ebe1:	8b 8d d0 fd ff ff    	mov    -0x230(%rbp),%ecx
    ebe7:	ff f1                	push   %rcx
    ebe9:	48 c7 c1 c0 fd ff ff 	mov    $0xfffffffffffffdc0,%rcx
    ebf0:	48 03 cd             	add    %rbp,%rcx
    ebf3:	ff f1                	push   %rcx
    ebf5:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    ebfc:	48 03 cd             	add    %rbp,%rcx
    ebff:	48 8b 11             	mov    (%rcx),%rdx
    ec02:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    ec07:	8f c1                	pop    %rcx
    ec09:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    ec0e:	8f c1                	pop    %rcx
    ec10:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    ec14:	8f c1                	pop    %rcx
    ec16:	89 0c 24             	mov    %ecx,(%rsp)
    ec19:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ec20 <main+0xec20>
    ec20:	48 8b 11             	mov    (%rcx),%rdx
    ec23:	4c 8b d2             	mov    %rdx,%r10
    ec26:	33 c9                	xor    %ecx,%ecx
    ec28:	8b 0c 24             	mov    (%rsp),%ecx
    ec2b:	33 d2                	xor    %edx,%edx
    ec2d:	8b 54 24 08          	mov    0x8(%rsp),%edx
    ec31:	45 33 c0             	xor    %r8d,%r8d
    ec34:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    ec39:	45 33 c9             	xor    %r9d,%r9d
    ec3c:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    ec41:	41 ff d2             	call   *%r10
    ec44:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        GLCHECK
    ec4b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ec52:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ec59 <main+0xec59>
    ec59:	48 8b 11             	mov    (%rcx),%rdx
    ec5c:	4c 8b d2             	mov    %rdx,%r10
    ec5f:	41 ff d2             	call   *%r10
    ec62:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    ec69:	8b c8                	mov    %eax,%ecx
    ec6b:	ff f1                	push   %rcx
    ec6d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ec74 <main+0xec74>
    ec74:	8f c2                	pop    %rdx
    ec76:	48 63 da             	movslq %edx,%rbx
    ec79:	88 19                	mov    %bl,(%rcx)
    ec7b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ec82 <main+0xec82>
    ec82:	48 8a 11             	rex.W mov (%rcx),%dl
    ec85:	48 0f b6 d2          	movzbq %dl,%rdx
    ec89:	48 83 fa 00          	cmp    $0x0,%rdx
    ec8d:	0f 84 17 01 00 00    	je     edaa <main+0xedaa>
    ec93:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ec9a:	b9 06 00 00 00       	mov    $0x6,%ecx
    ec9f:	ff f1                	push   %rcx
    eca1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eca8 <main+0xeca8>
    eca8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ecad:	8f c1                	pop    %rcx
    ecaf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ecb4:	e8 d9 53 ff ff       	call   4092 <main+0x4092>
    ecb9:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ecc0:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ecc7:	b9 18 00 00 00       	mov    $0x18,%ecx
    eccc:	ff f1                	push   %rcx
    ecce:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ecd5 <main+0xecd5>
    ecd5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ecda:	8f c1                	pop    %rcx
    ecdc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ece1:	e8 ac 53 ff ff       	call   4092 <main+0x4092>
    ece6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eced:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ecf4:	b9 01 00 00 00       	mov    $0x1,%ecx
    ecf9:	ff f1                	push   %rcx
    ecfb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ed02 <main+0xed02>
    ed02:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ed07:	8f c1                	pop    %rcx
    ed09:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ed0e:	e8 7f 53 ff ff       	call   4092 <main+0x4092>
    ed13:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ed1a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ed21:	b9 0d 04 00 00       	mov    $0x40d,%ecx
    ed26:	48 63 d1             	movslq %ecx,%rdx
    ed29:	48 89 14 24          	mov    %rdx,(%rsp)
    ed2d:	e8 c4 50 ff ff       	call   3df6 <main+0x3df6>
    ed32:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    ed39:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ed40:	b9 08 00 00 00       	mov    $0x8,%ecx
    ed45:	ff f1                	push   %rcx
    ed47:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ed4e <main+0xed4e>
    ed4e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ed53:	8f c1                	pop    %rcx
    ed55:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ed5a:	e8 33 53 ff ff       	call   4092 <main+0x4092>
    ed5f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ed66:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ed6d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ed74 <main+0xed74>
    ed74:	48 8a 11             	rex.W mov (%rcx),%dl
    ed77:	48 0f b6 d2          	movzbq %dl,%rdx
    ed7b:	48 0f be ca          	movsbq %dl,%rcx
    ed7f:	48 89 0c 24          	mov    %rcx,(%rsp)
    ed83:	e8 6e 50 ff ff       	call   3df6 <main+0x3df6>
    ed88:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ed8f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ed96:	b9 0a 00 00 00       	mov    $0xa,%ecx
    ed9b:	88 0c 24             	mov    %cl,(%rsp)
    ed9e:	e8 4e 52 ff ff       	call   3ff1 <main+0x3ff1>
    eda3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        log("Fragment shader error: ",Slice<char>{infoLog.ptr,len});
    edaa:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    edb1:	b9 17 00 00 00       	mov    $0x17,%ecx
    edb6:	ff f1                	push   %rcx
    edb8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # edbf <main+0xedbf>
    edbf:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    edc4:	8f c1                	pop    %rcx
    edc6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    edcb:	e8 c2 52 ff ff       	call   4092 <main+0x4092>
    edd0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    edd7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    edde:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    ede4:	48 63 d1             	movslq %ecx,%rdx
    ede7:	ff f2                	push   %rdx
    ede9:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    edf0:	48 03 cd             	add    %rbp,%rcx
    edf3:	48 8b 11             	mov    (%rcx),%rdx
    edf6:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    edfb:	8f c1                	pop    %rcx
    edfd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ee02:	e8 8b 52 ff ff       	call   4092 <main+0x4092>
    ee07:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ee0e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ee15:	b9 0a 00 00 00       	mov    $0xa,%ecx
    ee1a:	88 0c 24             	mov    %cl,(%rsp)
    ee1d:	e8 cf 51 ff ff       	call   3ff1 <main+0x3ff1>
    ee22:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    }

    shaderProgram := glCreateProgram();
    ee29:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ee30:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ee37 <main+0xee37>
    ee37:	48 8b 11             	mov    (%rcx),%rdx
    ee3a:	4c 8b d2             	mov    %rdx,%r10
    ee3d:	41 ff d2             	call   *%r10
    ee40:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    ee47:	8b c8                	mov    %eax,%ecx
    ee49:	89 8d c0 fd ff ff    	mov    %ecx,-0x240(%rbp)
    GLCHECK
    ee4f:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ee56:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ee5d <main+0xee5d>
    ee5d:	48 8b 11             	mov    (%rcx),%rdx
    ee60:	4c 8b d2             	mov    %rdx,%r10
    ee63:	41 ff d2             	call   *%r10
    ee66:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    ee6d:	8b c8                	mov    %eax,%ecx
    ee6f:	ff f1                	push   %rcx
    ee71:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ee78 <main+0xee78>
    ee78:	8f c2                	pop    %rdx
    ee7a:	48 63 da             	movslq %edx,%rbx
    ee7d:	88 19                	mov    %bl,(%rcx)
    ee7f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ee86 <main+0xee86>
    ee86:	48 8a 11             	rex.W mov (%rcx),%dl
    ee89:	48 0f b6 d2          	movzbq %dl,%rdx
    ee8d:	48 83 fa 00          	cmp    $0x0,%rdx
    ee91:	0f 84 17 01 00 00    	je     efae <main+0xefae>
    ee97:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ee9e:	b9 06 00 00 00       	mov    $0x6,%ecx
    eea3:	ff f1                	push   %rcx
    eea5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eeac <main+0xeeac>
    eeac:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eeb1:	8f c1                	pop    %rcx
    eeb3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eeb8:	e8 d5 51 ff ff       	call   4092 <main+0x4092>
    eebd:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eec4:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eecb:	b9 18 00 00 00       	mov    $0x18,%ecx
    eed0:	ff f1                	push   %rcx
    eed2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eed9 <main+0xeed9>
    eed9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eede:	8f c1                	pop    %rcx
    eee0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    eee5:	e8 a8 51 ff ff       	call   4092 <main+0x4092>
    eeea:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    eef1:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    eef8:	b9 01 00 00 00       	mov    $0x1,%ecx
    eefd:	ff f1                	push   %rcx
    eeff:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ef06 <main+0xef06>
    ef06:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ef0b:	8f c1                	pop    %rcx
    ef0d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ef12:	e8 7b 51 ff ff       	call   4092 <main+0x4092>
    ef17:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ef1e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ef25:	b9 12 04 00 00       	mov    $0x412,%ecx
    ef2a:	48 63 d1             	movslq %ecx,%rdx
    ef2d:	48 89 14 24          	mov    %rdx,(%rsp)
    ef31:	e8 c0 4e ff ff       	call   3df6 <main+0x3df6>
    ef36:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    ef3d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ef44:	b9 08 00 00 00       	mov    $0x8,%ecx
    ef49:	ff f1                	push   %rcx
    ef4b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ef52 <main+0xef52>
    ef52:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ef57:	8f c1                	pop    %rcx
    ef59:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ef5e:	e8 2f 51 ff ff       	call   4092 <main+0x4092>
    ef63:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ef6a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ef71:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ef78 <main+0xef78>
    ef78:	48 8a 11             	rex.W mov (%rcx),%dl
    ef7b:	48 0f b6 d2          	movzbq %dl,%rdx
    ef7f:	48 0f be ca          	movsbq %dl,%rcx
    ef83:	48 89 0c 24          	mov    %rcx,(%rsp)
    ef87:	e8 6a 4e ff ff       	call   3df6 <main+0x3df6>
    ef8c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ef93:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ef9a:	b9 0a 00 00 00       	mov    $0xa,%ecx
    ef9f:	88 0c 24             	mov    %cl,(%rsp)
    efa2:	e8 4a 50 ff ff       	call   3ff1 <main+0x3ff1>
    efa7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glAttachShader(shaderProgram, vertexShader);
    efae:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    efb5:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    efbb:	ff f1                	push   %rcx
    efbd:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    efc0:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    efc4:	8f c1                	pop    %rcx
    efc6:	89 0c 24             	mov    %ecx,(%rsp)
    efc9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # efd0 <main+0xefd0>
    efd0:	48 8b 11             	mov    (%rcx),%rdx
    efd3:	4c 8b d2             	mov    %rdx,%r10
    efd6:	33 c9                	xor    %ecx,%ecx
    efd8:	8b 0c 24             	mov    (%rsp),%ecx
    efdb:	33 d2                	xor    %edx,%edx
    efdd:	8b 54 24 08          	mov    0x8(%rsp),%edx
    efe1:	41 ff d2             	call   *%r10
    efe4:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    efeb:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    eff2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # eff9 <main+0xeff9>
    eff9:	48 8b 11             	mov    (%rcx),%rdx
    effc:	4c 8b d2             	mov    %rdx,%r10
    efff:	41 ff d2             	call   *%r10
    f002:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    f009:	8b c8                	mov    %eax,%ecx
    f00b:	ff f1                	push   %rcx
    f00d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f014 <main+0xf014>
    f014:	8f c2                	pop    %rdx
    f016:	48 63 da             	movslq %edx,%rbx
    f019:	88 19                	mov    %bl,(%rcx)
    f01b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f022 <main+0xf022>
    f022:	48 8a 11             	rex.W mov (%rcx),%dl
    f025:	48 0f b6 d2          	movzbq %dl,%rdx
    f029:	48 83 fa 00          	cmp    $0x0,%rdx
    f02d:	0f 84 17 01 00 00    	je     f14a <main+0xf14a>
    f033:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f03a:	b9 06 00 00 00       	mov    $0x6,%ecx
    f03f:	ff f1                	push   %rcx
    f041:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f048 <main+0xf048>
    f048:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f04d:	8f c1                	pop    %rcx
    f04f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f054:	e8 39 50 ff ff       	call   4092 <main+0x4092>
    f059:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f060:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f067:	b9 18 00 00 00       	mov    $0x18,%ecx
    f06c:	ff f1                	push   %rcx
    f06e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f075 <main+0xf075>
    f075:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f07a:	8f c1                	pop    %rcx
    f07c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f081:	e8 0c 50 ff ff       	call   4092 <main+0x4092>
    f086:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f08d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f094:	b9 01 00 00 00       	mov    $0x1,%ecx
    f099:	ff f1                	push   %rcx
    f09b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f0a2 <main+0xf0a2>
    f0a2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f0a7:	8f c1                	pop    %rcx
    f0a9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f0ae:	e8 df 4f ff ff       	call   4092 <main+0x4092>
    f0b3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f0ba:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f0c1:	b9 14 04 00 00       	mov    $0x414,%ecx
    f0c6:	48 63 d1             	movslq %ecx,%rdx
    f0c9:	48 89 14 24          	mov    %rdx,(%rsp)
    f0cd:	e8 24 4d ff ff       	call   3df6 <main+0x3df6>
    f0d2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    f0d9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f0e0:	b9 08 00 00 00       	mov    $0x8,%ecx
    f0e5:	ff f1                	push   %rcx
    f0e7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f0ee <main+0xf0ee>
    f0ee:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f0f3:	8f c1                	pop    %rcx
    f0f5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f0fa:	e8 93 4f ff ff       	call   4092 <main+0x4092>
    f0ff:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f106:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f10d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f114 <main+0xf114>
    f114:	48 8a 11             	rex.W mov (%rcx),%dl
    f117:	48 0f b6 d2          	movzbq %dl,%rdx
    f11b:	48 0f be ca          	movsbq %dl,%rcx
    f11f:	48 89 0c 24          	mov    %rcx,(%rsp)
    f123:	e8 ce 4c ff ff       	call   3df6 <main+0x3df6>
    f128:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f12f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f136:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f13b:	88 0c 24             	mov    %cl,(%rsp)
    f13e:	e8 ae 4e ff ff       	call   3ff1 <main+0x3ff1>
    f143:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glAttachShader(shaderProgram, fragmentShader);
    f14a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f151:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    f157:	ff f1                	push   %rcx
    f159:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    f15f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    f163:	8f c1                	pop    %rcx
    f165:	89 0c 24             	mov    %ecx,(%rsp)
    f168:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f16f <main+0xf16f>
    f16f:	48 8b 11             	mov    (%rcx),%rdx
    f172:	4c 8b d2             	mov    %rdx,%r10
    f175:	33 c9                	xor    %ecx,%ecx
    f177:	8b 0c 24             	mov    (%rsp),%ecx
    f17a:	33 d2                	xor    %edx,%edx
    f17c:	8b 54 24 08          	mov    0x8(%rsp),%edx
    f180:	41 ff d2             	call   *%r10
    f183:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    f18a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f191:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f198 <main+0xf198>
    f198:	48 8b 11             	mov    (%rcx),%rdx
    f19b:	4c 8b d2             	mov    %rdx,%r10
    f19e:	41 ff d2             	call   *%r10
    f1a1:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    f1a8:	8b c8                	mov    %eax,%ecx
    f1aa:	ff f1                	push   %rcx
    f1ac:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f1b3 <main+0xf1b3>
    f1b3:	8f c2                	pop    %rdx
    f1b5:	48 63 da             	movslq %edx,%rbx
    f1b8:	88 19                	mov    %bl,(%rcx)
    f1ba:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f1c1 <main+0xf1c1>
    f1c1:	48 8a 11             	rex.W mov (%rcx),%dl
    f1c4:	48 0f b6 d2          	movzbq %dl,%rdx
    f1c8:	48 83 fa 00          	cmp    $0x0,%rdx
    f1cc:	0f 84 17 01 00 00    	je     f2e9 <main+0xf2e9>
    f1d2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f1d9:	b9 06 00 00 00       	mov    $0x6,%ecx
    f1de:	ff f1                	push   %rcx
    f1e0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f1e7 <main+0xf1e7>
    f1e7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f1ec:	8f c1                	pop    %rcx
    f1ee:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f1f3:	e8 9a 4e ff ff       	call   4092 <main+0x4092>
    f1f8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f1ff:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f206:	b9 18 00 00 00       	mov    $0x18,%ecx
    f20b:	ff f1                	push   %rcx
    f20d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f214 <main+0xf214>
    f214:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f219:	8f c1                	pop    %rcx
    f21b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f220:	e8 6d 4e ff ff       	call   4092 <main+0x4092>
    f225:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f22c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f233:	b9 01 00 00 00       	mov    $0x1,%ecx
    f238:	ff f1                	push   %rcx
    f23a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f241 <main+0xf241>
    f241:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f246:	8f c1                	pop    %rcx
    f248:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f24d:	e8 40 4e ff ff       	call   4092 <main+0x4092>
    f252:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f259:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f260:	b9 16 04 00 00       	mov    $0x416,%ecx
    f265:	48 63 d1             	movslq %ecx,%rdx
    f268:	48 89 14 24          	mov    %rdx,(%rsp)
    f26c:	e8 85 4b ff ff       	call   3df6 <main+0x3df6>
    f271:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    f278:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f27f:	b9 08 00 00 00       	mov    $0x8,%ecx
    f284:	ff f1                	push   %rcx
    f286:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f28d <main+0xf28d>
    f28d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f292:	8f c1                	pop    %rcx
    f294:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f299:	e8 f4 4d ff ff       	call   4092 <main+0x4092>
    f29e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f2a5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f2ac:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f2b3 <main+0xf2b3>
    f2b3:	48 8a 11             	rex.W mov (%rcx),%dl
    f2b6:	48 0f b6 d2          	movzbq %dl,%rdx
    f2ba:	48 0f be ca          	movsbq %dl,%rcx
    f2be:	48 89 0c 24          	mov    %rcx,(%rsp)
    f2c2:	e8 2f 4b ff ff       	call   3df6 <main+0x3df6>
    f2c7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f2ce:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f2d5:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f2da:	88 0c 24             	mov    %cl,(%rsp)
    f2dd:	e8 0f 4d ff ff       	call   3ff1 <main+0x3ff1>
    f2e2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glLinkProgram(shaderProgram);
    f2e9:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f2f0:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    f2f6:	89 0c 24             	mov    %ecx,(%rsp)
    f2f9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f300 <main+0xf300>
    f300:	48 8b 11             	mov    (%rcx),%rdx
    f303:	4c 8b d2             	mov    %rdx,%r10
    f306:	33 c9                	xor    %ecx,%ecx
    f308:	8b 0c 24             	mov    (%rsp),%ecx
    f30b:	41 ff d2             	call   *%r10
    f30e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    f315:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f31c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f323 <main+0xf323>
    f323:	48 8b 11             	mov    (%rcx),%rdx
    f326:	4c 8b d2             	mov    %rdx,%r10
    f329:	41 ff d2             	call   *%r10
    f32c:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    f333:	8b c8                	mov    %eax,%ecx
    f335:	ff f1                	push   %rcx
    f337:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f33e <main+0xf33e>
    f33e:	8f c2                	pop    %rdx
    f340:	48 63 da             	movslq %edx,%rbx
    f343:	88 19                	mov    %bl,(%rcx)
    f345:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f34c <main+0xf34c>
    f34c:	48 8a 11             	rex.W mov (%rcx),%dl
    f34f:	48 0f b6 d2          	movzbq %dl,%rdx
    f353:	48 83 fa 00          	cmp    $0x0,%rdx
    f357:	0f 84 17 01 00 00    	je     f474 <main+0xf474>
    f35d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f364:	b9 06 00 00 00       	mov    $0x6,%ecx
    f369:	ff f1                	push   %rcx
    f36b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f372 <main+0xf372>
    f372:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f377:	8f c1                	pop    %rcx
    f379:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f37e:	e8 0f 4d ff ff       	call   4092 <main+0x4092>
    f383:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f38a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f391:	b9 18 00 00 00       	mov    $0x18,%ecx
    f396:	ff f1                	push   %rcx
    f398:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f39f <main+0xf39f>
    f39f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f3a4:	8f c1                	pop    %rcx
    f3a6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f3ab:	e8 e2 4c ff ff       	call   4092 <main+0x4092>
    f3b0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f3b7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f3be:	b9 01 00 00 00       	mov    $0x1,%ecx
    f3c3:	ff f1                	push   %rcx
    f3c5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f3cc <main+0xf3cc>
    f3cc:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f3d1:	8f c1                	pop    %rcx
    f3d3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f3d8:	e8 b5 4c ff ff       	call   4092 <main+0x4092>
    f3dd:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f3e4:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f3eb:	b9 18 04 00 00       	mov    $0x418,%ecx
    f3f0:	48 63 d1             	movslq %ecx,%rdx
    f3f3:	48 89 14 24          	mov    %rdx,(%rsp)
    f3f7:	e8 fa 49 ff ff       	call   3df6 <main+0x3df6>
    f3fc:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    f403:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f40a:	b9 08 00 00 00       	mov    $0x8,%ecx
    f40f:	ff f1                	push   %rcx
    f411:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f418 <main+0xf418>
    f418:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f41d:	8f c1                	pop    %rcx
    f41f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f424:	e8 69 4c ff ff       	call   4092 <main+0x4092>
    f429:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f430:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f437:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f43e <main+0xf43e>
    f43e:	48 8a 11             	rex.W mov (%rcx),%dl
    f441:	48 0f b6 d2          	movzbq %dl,%rdx
    f445:	48 0f be ca          	movsbq %dl,%rcx
    f449:	48 89 0c 24          	mov    %rcx,(%rsp)
    f44d:	e8 a4 49 ff ff       	call   3df6 <main+0x3df6>
    f452:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f459:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f460:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f465:	88 0c 24             	mov    %cl,(%rsp)
    f468:	e8 84 4b ff ff       	call   3ff1 <main+0x3ff1>
    f46d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    f474:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f47b:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    f481:	ff f1                	push   %rcx
    f483:	b9 82 8b 00 00       	mov    $0x8b82,%ecx
    f488:	8b d1                	mov    %ecx,%edx
    f48a:	ff f2                	push   %rdx
    f48c:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    f493:	48 03 cd             	add    %rbp,%rcx
    f496:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    f49b:	8f c1                	pop    %rcx
    f49d:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    f4a1:	8f c1                	pop    %rcx
    f4a3:	89 0c 24             	mov    %ecx,(%rsp)
    f4a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f4ad <main+0xf4ad>
    f4ad:	48 8b 11             	mov    (%rcx),%rdx
    f4b0:	4c 8b d2             	mov    %rdx,%r10
    f4b3:	33 c9                	xor    %ecx,%ecx
    f4b5:	8b 0c 24             	mov    (%rsp),%ecx
    f4b8:	33 d2                	xor    %edx,%edx
    f4ba:	8b 54 24 08          	mov    0x8(%rsp),%edx
    f4be:	45 33 c0             	xor    %r8d,%r8d
    f4c1:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    f4c6:	41 ff d2             	call   *%r10
    f4c9:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
    f4d0:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f4d7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f4de <main+0xf4de>
    f4de:	48 8b 11             	mov    (%rcx),%rdx
    f4e1:	4c 8b d2             	mov    %rdx,%r10
    f4e4:	41 ff d2             	call   *%r10
    f4e7:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    f4ee:	8b c8                	mov    %eax,%ecx
    f4f0:	ff f1                	push   %rcx
    f4f2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f4f9 <main+0xf4f9>
    f4f9:	8f c2                	pop    %rdx
    f4fb:	48 63 da             	movslq %edx,%rbx
    f4fe:	88 19                	mov    %bl,(%rcx)
    f500:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f507 <main+0xf507>
    f507:	48 8a 11             	rex.W mov (%rcx),%dl
    f50a:	48 0f b6 d2          	movzbq %dl,%rdx
    f50e:	48 83 fa 00          	cmp    $0x0,%rdx
    f512:	0f 84 17 01 00 00    	je     f62f <main+0xf62f>
    f518:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f51f:	b9 06 00 00 00       	mov    $0x6,%ecx
    f524:	ff f1                	push   %rcx
    f526:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f52d <main+0xf52d>
    f52d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f532:	8f c1                	pop    %rcx
    f534:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f539:	e8 54 4b ff ff       	call   4092 <main+0x4092>
    f53e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f545:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f54c:	b9 18 00 00 00       	mov    $0x18,%ecx
    f551:	ff f1                	push   %rcx
    f553:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f55a <main+0xf55a>
    f55a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f55f:	8f c1                	pop    %rcx
    f561:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f566:	e8 27 4b ff ff       	call   4092 <main+0x4092>
    f56b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f572:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f579:	b9 01 00 00 00       	mov    $0x1,%ecx
    f57e:	ff f1                	push   %rcx
    f580:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f587 <main+0xf587>
    f587:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f58c:	8f c1                	pop    %rcx
    f58e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f593:	e8 fa 4a ff ff       	call   4092 <main+0x4092>
    f598:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f59f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f5a6:	b9 1b 04 00 00       	mov    $0x41b,%ecx
    f5ab:	48 63 d1             	movslq %ecx,%rdx
    f5ae:	48 89 14 24          	mov    %rdx,(%rsp)
    f5b2:	e8 3f 48 ff ff       	call   3df6 <main+0x3df6>
    f5b7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    f5be:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f5c5:	b9 08 00 00 00       	mov    $0x8,%ecx
    f5ca:	ff f1                	push   %rcx
    f5cc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f5d3 <main+0xf5d3>
    f5d3:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f5d8:	8f c1                	pop    %rcx
    f5da:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f5df:	e8 ae 4a ff ff       	call   4092 <main+0x4092>
    f5e4:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f5eb:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f5f2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f5f9 <main+0xf5f9>
    f5f9:	48 8a 11             	rex.W mov (%rcx),%dl
    f5fc:	48 0f b6 d2          	movzbq %dl,%rdx
    f600:	48 0f be ca          	movsbq %dl,%rcx
    f604:	48 89 0c 24          	mov    %rcx,(%rsp)
    f608:	e8 e9 47 ff ff       	call   3df6 <main+0x3df6>
    f60d:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f614:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f61b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f620:	88 0c 24             	mov    %cl,(%rsp)
    f623:	e8 c9 49 ff ff       	call   3ff1 <main+0x3ff1>
    f628:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    if !success {
    f62f:	8b 4d e8             	mov    -0x18(%rbp),%ecx
    f632:	48 85 c9             	test   %rcx,%rcx
    f635:	40 0f 94 c1          	rex sete %cl
    f639:	48 0f b6 c9          	movzbq %cl,%rcx
    f63d:	48 83 f9 00          	cmp    $0x0,%rcx
    f641:	0f 84 61 02 00 00    	je     f8a8 <main+0xf8a8>
        len: i32 = 0;
    f647:	b9 00 00 00 00       	mov    $0x0,%ecx
    f64c:	89 8d b8 fd ff ff    	mov    %ecx,-0x248(%rbp)
        glGetProgramInfoLog(shaderProgram, 512, &len, infoLog.ptr);
    f652:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f659:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    f65f:	ff f1                	push   %rcx
    f661:	b9 00 02 00 00       	mov    $0x200,%ecx
    f666:	ff f1                	push   %rcx
    f668:	48 c7 c1 b8 fd ff ff 	mov    $0xfffffffffffffdb8,%rcx
    f66f:	48 03 cd             	add    %rbp,%rcx
    f672:	ff f1                	push   %rcx
    f674:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    f67b:	48 03 cd             	add    %rbp,%rcx
    f67e:	48 8b 11             	mov    (%rcx),%rdx
    f681:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    f686:	8f c1                	pop    %rcx
    f688:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    f68d:	8f c1                	pop    %rcx
    f68f:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    f693:	8f c1                	pop    %rcx
    f695:	89 0c 24             	mov    %ecx,(%rsp)
    f698:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f69f <main+0xf69f>
    f69f:	48 8b 11             	mov    (%rcx),%rdx
    f6a2:	4c 8b d2             	mov    %rdx,%r10
    f6a5:	33 c9                	xor    %ecx,%ecx
    f6a7:	8b 0c 24             	mov    (%rsp),%ecx
    f6aa:	33 d2                	xor    %edx,%edx
    f6ac:	8b 54 24 08          	mov    0x8(%rsp),%edx
    f6b0:	45 33 c0             	xor    %r8d,%r8d
    f6b3:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    f6b8:	45 33 c9             	xor    %r9d,%r9d
    f6bb:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    f6c0:	41 ff d2             	call   *%r10
    f6c3:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        GLCHECK
    f6ca:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f6d1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f6d8 <main+0xf6d8>
    f6d8:	48 8b 11             	mov    (%rcx),%rdx
    f6db:	4c 8b d2             	mov    %rdx,%r10
    f6de:	41 ff d2             	call   *%r10
    f6e1:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    f6e8:	8b c8                	mov    %eax,%ecx
    f6ea:	ff f1                	push   %rcx
    f6ec:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f6f3 <main+0xf6f3>
    f6f3:	8f c2                	pop    %rdx
    f6f5:	48 63 da             	movslq %edx,%rbx
    f6f8:	88 19                	mov    %bl,(%rcx)
    f6fa:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f701 <main+0xf701>
    f701:	48 8a 11             	rex.W mov (%rcx),%dl
    f704:	48 0f b6 d2          	movzbq %dl,%rdx
    f708:	48 83 fa 00          	cmp    $0x0,%rdx
    f70c:	0f 84 17 01 00 00    	je     f829 <main+0xf829>
    f712:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f719:	b9 06 00 00 00       	mov    $0x6,%ecx
    f71e:	ff f1                	push   %rcx
    f720:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f727 <main+0xf727>
    f727:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f72c:	8f c1                	pop    %rcx
    f72e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f733:	e8 5a 49 ff ff       	call   4092 <main+0x4092>
    f738:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f73f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f746:	b9 18 00 00 00       	mov    $0x18,%ecx
    f74b:	ff f1                	push   %rcx
    f74d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f754 <main+0xf754>
    f754:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f759:	8f c1                	pop    %rcx
    f75b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f760:	e8 2d 49 ff ff       	call   4092 <main+0x4092>
    f765:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f76c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f773:	b9 01 00 00 00       	mov    $0x1,%ecx
    f778:	ff f1                	push   %rcx
    f77a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f781 <main+0xf781>
    f781:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f786:	8f c1                	pop    %rcx
    f788:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f78d:	e8 00 49 ff ff       	call   4092 <main+0x4092>
    f792:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f799:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f7a0:	b9 1f 04 00 00       	mov    $0x41f,%ecx
    f7a5:	48 63 d1             	movslq %ecx,%rdx
    f7a8:	48 89 14 24          	mov    %rdx,(%rsp)
    f7ac:	e8 45 46 ff ff       	call   3df6 <main+0x3df6>
    f7b1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    f7b8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f7bf:	b9 08 00 00 00       	mov    $0x8,%ecx
    f7c4:	ff f1                	push   %rcx
    f7c6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f7cd <main+0xf7cd>
    f7cd:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f7d2:	8f c1                	pop    %rcx
    f7d4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f7d9:	e8 b4 48 ff ff       	call   4092 <main+0x4092>
    f7de:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f7e5:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f7ec:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f7f3 <main+0xf7f3>
    f7f3:	48 8a 11             	rex.W mov (%rcx),%dl
    f7f6:	48 0f b6 d2          	movzbq %dl,%rdx
    f7fa:	48 0f be ca          	movsbq %dl,%rcx
    f7fe:	48 89 0c 24          	mov    %rcx,(%rsp)
    f802:	e8 ef 45 ff ff       	call   3df6 <main+0x3df6>
    f807:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f80e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f815:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f81a:	88 0c 24             	mov    %cl,(%rsp)
    f81d:	e8 cf 47 ff ff       	call   3ff1 <main+0x3ff1>
    f822:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        log("Fragment shader error: ",Slice<char>{infoLog.ptr,len});
    f829:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f830:	b9 17 00 00 00       	mov    $0x17,%ecx
    f835:	ff f1                	push   %rcx
    f837:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f83e <main+0xf83e>
    f83e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f843:	8f c1                	pop    %rcx
    f845:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f84a:	e8 43 48 ff ff       	call   4092 <main+0x4092>
    f84f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f856:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f85d:	8b 8d b8 fd ff ff    	mov    -0x248(%rbp),%ecx
    f863:	48 63 d1             	movslq %ecx,%rdx
    f866:	ff f2                	push   %rdx
    f868:	48 c7 c1 d8 fd ff ff 	mov    $0xfffffffffffffdd8,%rcx
    f86f:	48 03 cd             	add    %rbp,%rcx
    f872:	48 8b 11             	mov    (%rcx),%rdx
    f875:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    f87a:	8f c1                	pop    %rcx
    f87c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    f881:	e8 0c 48 ff ff       	call   4092 <main+0x4092>
    f886:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f88d:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f894:	b9 0a 00 00 00       	mov    $0xa,%ecx
    f899:	88 0c 24             	mov    %cl,(%rsp)
    f89c:	e8 50 47 ff ff       	call   3ff1 <main+0x3ff1>
    f8a1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    }
    
    glDeleteShader(vertexShader);
    f8a8:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f8af:	8b 4d f0             	mov    -0x10(%rbp),%ecx
    f8b2:	89 0c 24             	mov    %ecx,(%rsp)
    f8b5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f8bc <main+0xf8bc>
    f8bc:	48 8b 11             	mov    (%rcx),%rdx
    f8bf:	4c 8b d2             	mov    %rdx,%r10
    f8c2:	33 c9                	xor    %ecx,%ecx
    f8c4:	8b 0c 24             	mov    (%rsp),%ecx
    f8c7:	41 ff d2             	call   *%r10
    f8ca:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glDeleteShader(fragmentShader);  
    f8d1:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f8d8:	8b 8d c8 fd ff ff    	mov    -0x238(%rbp),%ecx
    f8de:	89 0c 24             	mov    %ecx,(%rsp)
    f8e1:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f8e8 <main+0xf8e8>
    f8e8:	48 8b 11             	mov    (%rcx),%rdx
    f8eb:	4c 8b d2             	mov    %rdx,%r10
    f8ee:	33 c9                	xor    %ecx,%ecx
    f8f0:	8b 0c 24             	mov    (%rsp),%ecx
    f8f3:	41 ff d2             	call   *%r10
    f8f6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

    return shaderProgram;
    f8fd:	8b 8d c0 fd ff ff    	mov    -0x240(%rbp),%ecx
    f903:	89 4d f8             	mov    %ecx,-0x8(%rbp)
    f906:	48 81 c4 50 02 00 00 	add    $0x250,%rsp
    f90d:	8f c5                	pop    %rbp
    f90f:	c3                   	ret
    glBindTexture(GL_TEXTURE_2D,0);
    GLCHECK
    
    return texture
}
fn CreateFont(path: char[]) -> Font* {
    f910:	ff f5                	push   %rbp
    f912:	48 8b ec             	mov    %rsp,%rbp
    f915:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    font: Font* = Allocate(sizeof Font);
    f91c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    f923:	b9 28 00 00 00       	mov    $0x28,%ecx
    f928:	48 63 d1             	movslq %ecx,%rdx
    f92b:	48 89 14 24          	mov    %rdx,(%rsp)
    f92f:	e8 67 80 ff ff       	call   799b <main+0x799b>
    f934:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    f93b:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
    f940:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    *font = Font{}
    f944:	48 33 c9             	xor    %rcx,%rcx
    f947:	ff f1                	push   %rcx
    f949:	48 33 c9             	xor    %rcx,%rcx
    f94c:	ff f1                	push   %rcx
    f94e:	48 33 c9             	xor    %rcx,%rcx
    f951:	ff f1                	push   %rcx
    f953:	48 33 c9             	xor    %rcx,%rcx
    f956:	ff f1                	push   %rcx
    f958:	48 33 c9             	xor    %rcx,%rcx
    f95b:	ff f1                	push   %rcx
    f95d:	48 33 c9             	xor    %rcx,%rcx
    f960:	ff f1                	push   %rcx
    f962:	48 33 c9             	xor    %rcx,%rcx
    f965:	ff f1                	push   %rcx
    f967:	48 33 c9             	xor    %rcx,%rcx
    f96a:	ff f1                	push   %rcx
    f96c:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    f973:	48 03 cd             	add    %rbp,%rcx
    f976:	48 8b 11             	mov    (%rcx),%rdx
    f979:	8f c1                	pop    %rcx
    f97b:	89 0a                	mov    %ecx,(%rdx)
    f97d:	8f c1                	pop    %rcx
    f97f:	89 4a 04             	mov    %ecx,0x4(%rdx)
    f982:	8f c1                	pop    %rcx
    f984:	89 4a 08             	mov    %ecx,0x8(%rdx)
    f987:	8f c1                	pop    %rcx
    f989:	89 4a 0c             	mov    %ecx,0xc(%rdx)
    f98c:	8f c1                	pop    %rcx
    f98e:	89 4a 10             	mov    %ecx,0x10(%rdx)
    f991:	8f c1                	pop    %rcx
    f993:	89 4a 14             	mov    %ecx,0x14(%rdx)
    f996:	8f c1                	pop    %rcx
    f998:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
    f99c:	8f c1                	pop    %rcx
    f99e:	89 4a 20             	mov    %ecx,0x20(%rdx)
    
    channels: i32
    f9a1:	33 c9                	xor    %ecx,%ecx
    f9a3:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    stbi_set_flip_vertically_on_load(false);
    f9a6:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    f9ad:	b9 00 00 00 00       	mov    $0x0,%ecx
    f9b2:	88 0c 24             	mov    %cl,(%rsp)
    f9b5:	33 c9                	xor    %ecx,%ecx
    f9b7:	48 8a 0c 24          	rex.W mov (%rsp),%cl
    f9bb:	e8 00 00 00 00       	call   f9c0 <main+0xf9c0>
    f9c0:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    font.data = stbi_load(path.ptr,&font.width,&font.height,&channels,4); // 4 = rgba
    f9c7:	48 81 ec 30 00 00 00 	sub    $0x30,%rsp
    f9ce:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
    f9d5:	48 03 cd             	add    %rbp,%rcx
    f9d8:	48 8b 11             	mov    (%rcx),%rdx
    f9db:	ff f2                	push   %rdx
    f9dd:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    f9e4:	48 03 cd             	add    %rbp,%rcx
    f9e7:	48 8b 11             	mov    (%rcx),%rdx
    f9ea:	b9 04 00 00 00       	mov    $0x4,%ecx
    f9ef:	48 03 d1             	add    %rcx,%rdx
    f9f2:	ff f2                	push   %rdx
    f9f4:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    f9fb:	48 03 cd             	add    %rbp,%rcx
    f9fe:	48 8b 11             	mov    (%rcx),%rdx
    fa01:	b9 08 00 00 00       	mov    $0x8,%ecx
    fa06:	48 03 d1             	add    %rcx,%rdx
    fa09:	ff f2                	push   %rdx
    fa0b:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
    fa12:	48 03 cd             	add    %rbp,%rcx
    fa15:	ff f1                	push   %rcx
    fa17:	b9 04 00 00 00       	mov    $0x4,%ecx
    fa1c:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    fa20:	8f c1                	pop    %rcx
    fa22:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
    fa27:	8f c1                	pop    %rcx
    fa29:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
    fa2e:	8f c1                	pop    %rcx
    fa30:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
    fa35:	8f c1                	pop    %rcx
    fa37:	48 89 0c 24          	mov    %rcx,(%rsp)
    fa3b:	33 c9                	xor    %ecx,%ecx
    fa3d:	48 8b 0c 24          	mov    (%rsp),%rcx
    fa41:	33 d2                	xor    %edx,%edx
    fa43:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    fa48:	45 33 c0             	xor    %r8d,%r8d
    fa4b:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
    fa50:	45 33 c9             	xor    %r9d,%r9d
    fa53:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
    fa58:	e8 00 00 00 00       	call   fa5d <main+0xfa5d>
    fa5d:	48 81 c4 30 00 00 00 	add    $0x30,%rsp
    fa64:	48 8b c8             	mov    %rax,%rcx
    fa67:	ff f1                	push   %rcx
    fa69:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fa70:	48 03 cd             	add    %rbp,%rcx
    fa73:	48 8b 11             	mov    (%rcx),%rdx
    fa76:	b9 18 00 00 00       	mov    $0x18,%ecx
    fa7b:	48 03 d1             	add    %rcx,%rdx
    fa7e:	8f c1                	pop    %rcx
    fa80:	48 89 0a             	mov    %rcx,(%rdx)
    font.data_len = 4 * font.width * font.height
    fa83:	b9 04 00 00 00       	mov    $0x4,%ecx
    fa88:	ff f1                	push   %rcx
    fa8a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fa91:	48 03 cd             	add    %rbp,%rcx
    fa94:	48 8b 11             	mov    (%rcx),%rdx
    fa97:	b9 04 00 00 00       	mov    $0x4,%ecx
    fa9c:	48 03 d1             	add    %rcx,%rdx
    fa9f:	8b 0a                	mov    (%rdx),%ecx
    faa1:	8f c2                	pop    %rdx
    faa3:	0f af d1             	imul   %ecx,%edx
    faa6:	ff f2                	push   %rdx
    faa8:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    faaf:	48 03 cd             	add    %rbp,%rcx
    fab2:	48 8b 11             	mov    (%rcx),%rdx
    fab5:	b9 08 00 00 00       	mov    $0x8,%ecx
    faba:	48 03 d1             	add    %rcx,%rdx
    fabd:	8b 0a                	mov    (%rdx),%ecx
    fabf:	8f c2                	pop    %rdx
    fac1:	0f af d1             	imul   %ecx,%edx
    fac4:	ff f2                	push   %rdx
    fac6:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    facd:	48 03 cd             	add    %rbp,%rcx
    fad0:	48 8b 11             	mov    (%rcx),%rdx
    fad3:	b9 20 00 00 00       	mov    $0x20,%ecx
    fad8:	48 03 d1             	add    %rcx,%rdx
    fadb:	8f c1                	pop    %rcx
    fadd:	89 0a                	mov    %ecx,(%rdx)
    
    if !font.data {
    fadf:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fae6:	48 03 cd             	add    %rbp,%rcx
    fae9:	48 8b 11             	mov    (%rcx),%rdx
    faec:	b9 18 00 00 00       	mov    $0x18,%ecx
    faf1:	48 03 d1             	add    %rcx,%rdx
    faf4:	48 8b 0a             	mov    (%rdx),%rcx
    faf7:	48 85 c9             	test   %rcx,%rcx
    fafa:	40 0f 94 c1          	rex sete %cl
    fafe:	48 0f b6 c9          	movzbq %cl,%rcx
    fb02:	48 83 f9 00          	cmp    $0x0,%rcx
    fb06:	0f 84 87 00 00 00    	je     fb93 <main+0xfb93>
        log("Cannot find ",path)
    fb0c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    fb13:	b9 0c 00 00 00       	mov    $0xc,%ecx
    fb18:	ff f1                	push   %rcx
    fb1a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fb21 <main+0xfb21>
    fb21:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fb26:	8f c1                	pop    %rcx
    fb28:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fb2d:	e8 60 45 ff ff       	call   4092 <main+0x4092>
    fb32:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    fb39:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    fb40:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
    fb44:	48 8b c9             	mov    %rcx,%rcx
    fb47:	ff f1                	push   %rcx
    fb49:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
    fb4d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fb52:	8f c1                	pop    %rcx
    fb54:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fb59:	e8 34 45 ff ff       	call   4092 <main+0x4092>
    fb5e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    fb65:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    fb6c:	b9 0a 00 00 00       	mov    $0xa,%ecx
    fb71:	88 0c 24             	mov    %cl,(%rsp)
    fb74:	e8 78 44 ff ff       	call   3ff1 <main+0x3ff1>
    fb79:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        return null
    fb80:	b9 00 00 00 00       	mov    $0x0,%ecx
    fb85:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
    fb89:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    fb90:	8f c5                	pop    %rbp
    fb92:	c3                   	ret
    }

    glGenTextures(1, &font.id);
    fb93:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fb9a:	b9 01 00 00 00       	mov    $0x1,%ecx
    fb9f:	ff f1                	push   %rcx
    fba1:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fba8:	48 03 cd             	add    %rbp,%rcx
    fbab:	48 8b 11             	mov    (%rcx),%rdx
    fbae:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
    fbb3:	8f c1                	pop    %rcx
    fbb5:	89 0c 24             	mov    %ecx,(%rsp)
    fbb8:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fbbf <main+0xfbbf>
    fbbf:	48 8b 11             	mov    (%rcx),%rdx
    fbc2:	4c 8b d2             	mov    %rdx,%r10
    fbc5:	33 c9                	xor    %ecx,%ecx
    fbc7:	8b 0c 24             	mov    (%rsp),%ecx
    fbca:	33 d2                	xor    %edx,%edx
    fbcc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    fbd1:	41 ff d2             	call   *%r10
    fbd4:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glBindTexture(GL_TEXTURE_2D,font.id);
    fbdb:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fbe2:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fbe7:	8b d1                	mov    %ecx,%edx
    fbe9:	ff f2                	push   %rdx
    fbeb:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fbf2:	48 03 cd             	add    %rbp,%rcx
    fbf5:	48 8b 11             	mov    (%rcx),%rdx
    fbf8:	8b 0a                	mov    (%rdx),%ecx
    fbfa:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fbfe:	8f c1                	pop    %rcx
    fc00:	89 0c 24             	mov    %ecx,(%rsp)
    fc03:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fc0a <main+0xfc0a>
    fc0a:	48 8b 11             	mov    (%rcx),%rdx
    fc0d:	4c 8b d2             	mov    %rdx,%r10
    fc10:	33 c9                	xor    %ecx,%ecx
    fc12:	8b 0c 24             	mov    (%rsp),%ecx
    fc15:	33 d2                	xor    %edx,%edx
    fc17:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fc1b:	41 ff d2             	call   *%r10
    fc1e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    fc25:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fc2c:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fc31:	8b d1                	mov    %ecx,%edx
    fc33:	ff f2                	push   %rdx
    fc35:	b9 00 28 00 00       	mov    $0x2800,%ecx
    fc3a:	ff f1                	push   %rcx
    fc3c:	b9 01 26 00 00       	mov    $0x2601,%ecx
    fc41:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    fc45:	8f c1                	pop    %rcx
    fc47:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fc4b:	8f c1                	pop    %rcx
    fc4d:	89 0c 24             	mov    %ecx,(%rsp)
    fc50:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fc57 <main+0xfc57>
    fc57:	48 8b 11             	mov    (%rcx),%rdx
    fc5a:	4c 8b d2             	mov    %rdx,%r10
    fc5d:	33 c9                	xor    %ecx,%ecx
    fc5f:	8b 0c 24             	mov    (%rsp),%ecx
    fc62:	33 d2                	xor    %edx,%edx
    fc64:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fc68:	45 33 c0             	xor    %r8d,%r8d
    fc6b:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    fc70:	41 ff d2             	call   *%r10
    fc73:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    fc7a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fc81:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fc86:	8b d1                	mov    %ecx,%edx
    fc88:	ff f2                	push   %rdx
    fc8a:	b9 01 28 00 00       	mov    $0x2801,%ecx
    fc8f:	ff f1                	push   %rcx
    fc91:	b9 01 26 00 00       	mov    $0x2601,%ecx
    fc96:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    fc9a:	8f c1                	pop    %rcx
    fc9c:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fca0:	8f c1                	pop    %rcx
    fca2:	89 0c 24             	mov    %ecx,(%rsp)
    fca5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fcac <main+0xfcac>
    fcac:	48 8b 11             	mov    (%rcx),%rdx
    fcaf:	4c 8b d2             	mov    %rdx,%r10
    fcb2:	33 c9                	xor    %ecx,%ecx
    fcb4:	8b 0c 24             	mov    (%rsp),%ecx
    fcb7:	33 d2                	xor    %edx,%edx
    fcb9:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fcbd:	45 33 c0             	xor    %r8d,%r8d
    fcc0:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    fcc5:	41 ff d2             	call   *%r10
    fcc8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    fccf:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fcd6:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fcdb:	8b d1                	mov    %ecx,%edx
    fcdd:	ff f2                	push   %rdx
    fcdf:	b9 02 28 00 00       	mov    $0x2802,%ecx
    fce4:	ff f1                	push   %rcx
    fce6:	b9 2f 81 00 00       	mov    $0x812f,%ecx
    fceb:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    fcef:	8f c1                	pop    %rcx
    fcf1:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fcf5:	8f c1                	pop    %rcx
    fcf7:	89 0c 24             	mov    %ecx,(%rsp)
    fcfa:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fd01 <main+0xfd01>
    fd01:	48 8b 11             	mov    (%rcx),%rdx
    fd04:	4c 8b d2             	mov    %rdx,%r10
    fd07:	33 c9                	xor    %ecx,%ecx
    fd09:	8b 0c 24             	mov    (%rsp),%ecx
    fd0c:	33 d2                	xor    %edx,%edx
    fd0e:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fd12:	45 33 c0             	xor    %r8d,%r8d
    fd15:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    fd1a:	41 ff d2             	call   *%r10
    fd1d:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    fd24:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fd2b:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fd30:	8b d1                	mov    %ecx,%edx
    fd32:	ff f2                	push   %rdx
    fd34:	b9 03 28 00 00       	mov    $0x2803,%ecx
    fd39:	ff f1                	push   %rcx
    fd3b:	b9 2f 81 00 00       	mov    $0x812f,%ecx
    fd40:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    fd44:	8f c1                	pop    %rcx
    fd46:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fd4a:	8f c1                	pop    %rcx
    fd4c:	89 0c 24             	mov    %ecx,(%rsp)
    fd4f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fd56 <main+0xfd56>
    fd56:	48 8b 11             	mov    (%rcx),%rdx
    fd59:	4c 8b d2             	mov    %rdx,%r10
    fd5c:	33 c9                	xor    %ecx,%ecx
    fd5e:	8b 0c 24             	mov    (%rsp),%ecx
    fd61:	33 d2                	xor    %edx,%edx
    fd63:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fd67:	45 33 c0             	xor    %r8d,%r8d
    fd6a:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    fd6f:	41 ff d2             	call   *%r10
    fd72:	48 81 c4 20 00 00 00 	add    $0x20,%rsp

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, font.width, font.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, font.data);
    fd79:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
    fd80:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    fd85:	8b d1                	mov    %ecx,%edx
    fd87:	ff f2                	push   %rdx
    fd89:	b9 00 00 00 00       	mov    $0x0,%ecx
    fd8e:	ff f1                	push   %rcx
    fd90:	b9 08 19 00 00       	mov    $0x1908,%ecx
    fd95:	ff f1                	push   %rcx
    fd97:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fd9e:	48 03 cd             	add    %rbp,%rcx
    fda1:	48 8b 11             	mov    (%rcx),%rdx
    fda4:	b9 04 00 00 00       	mov    $0x4,%ecx
    fda9:	48 03 d1             	add    %rcx,%rdx
    fdac:	8b 0a                	mov    (%rdx),%ecx
    fdae:	ff f1                	push   %rcx
    fdb0:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fdb7:	48 03 cd             	add    %rbp,%rcx
    fdba:	48 8b 11             	mov    (%rcx),%rdx
    fdbd:	b9 08 00 00 00       	mov    $0x8,%ecx
    fdc2:	48 03 d1             	add    %rcx,%rdx
    fdc5:	8b 0a                	mov    (%rdx),%ecx
    fdc7:	ff f1                	push   %rcx
    fdc9:	b9 00 00 00 00       	mov    $0x0,%ecx
    fdce:	ff f1                	push   %rcx
    fdd0:	b9 08 19 00 00       	mov    $0x1908,%ecx
    fdd5:	8b d1                	mov    %ecx,%edx
    fdd7:	ff f2                	push   %rdx
    fdd9:	b9 01 14 00 00       	mov    $0x1401,%ecx
    fdde:	8b d1                	mov    %ecx,%edx
    fde0:	ff f2                	push   %rdx
    fde2:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
    fde9:	48 03 cd             	add    %rbp,%rcx
    fdec:	48 8b 11             	mov    (%rcx),%rdx
    fdef:	b9 18 00 00 00       	mov    $0x18,%ecx
    fdf4:	48 03 d1             	add    %rcx,%rdx
    fdf7:	48 8b 0a             	mov    (%rdx),%rcx
    fdfa:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
    fe01:	00 
    fe02:	8f c1                	pop    %rcx
    fe04:	89 4c 24 70          	mov    %ecx,0x70(%rsp)
    fe08:	8f c1                	pop    %rcx
    fe0a:	89 4c 24 60          	mov    %ecx,0x60(%rsp)
    fe0e:	8f c1                	pop    %rcx
    fe10:	89 4c 24 50          	mov    %ecx,0x50(%rsp)
    fe14:	8f c1                	pop    %rcx
    fe16:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
    fe1a:	8f c1                	pop    %rcx
    fe1c:	89 4c 24 30          	mov    %ecx,0x30(%rsp)
    fe20:	8f c1                	pop    %rcx
    fe22:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
    fe26:	8f c1                	pop    %rcx
    fe28:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
    fe2c:	8f c1                	pop    %rcx
    fe2e:	89 0c 24             	mov    %ecx,(%rsp)
    fe31:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fe38 <main+0xfe38>
    fe38:	48 8b 11             	mov    (%rcx),%rdx
    fe3b:	4c 8b d2             	mov    %rdx,%r10
    fe3e:	33 c9                	xor    %ecx,%ecx
    fe40:	8b 0c 24             	mov    (%rsp),%ecx
    fe43:	33 d2                	xor    %edx,%edx
    fe45:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fe49:	45 33 c0             	xor    %r8d,%r8d
    fe4c:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
    fe51:	45 33 c9             	xor    %r9d,%r9d
    fe54:	44 8b 4c 24 18       	mov    0x18(%rsp),%r9d
    fe59:	41 ff d2             	call   *%r10
    fe5c:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
    GLCHECK
    fe63:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    fe6a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fe71 <main+0xfe71>
    fe71:	48 8b 11             	mov    (%rcx),%rdx
    fe74:	4c 8b d2             	mov    %rdx,%r10
    fe77:	41 ff d2             	call   *%r10
    fe7a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    fe81:	8b c8                	mov    %eax,%ecx
    fe83:	ff f1                	push   %rcx
    fe85:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fe8c <main+0xfe8c>
    fe8c:	8f c2                	pop    %rdx
    fe8e:	48 63 da             	movslq %edx,%rbx
    fe91:	88 19                	mov    %bl,(%rcx)
    fe93:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fe9a <main+0xfe9a>
    fe9a:	48 8a 11             	rex.W mov (%rcx),%dl
    fe9d:	48 0f b6 d2          	movzbq %dl,%rdx
    fea1:	48 83 fa 00          	cmp    $0x0,%rdx
    fea5:	0f 84 17 01 00 00    	je     ffc2 <main+0xffc2>
    feab:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    feb2:	b9 06 00 00 00       	mov    $0x6,%ecx
    feb7:	ff f1                	push   %rcx
    feb9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # fec0 <main+0xfec0>
    fec0:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fec5:	8f c1                	pop    %rcx
    fec7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fecc:	e8 c1 41 ff ff       	call   4092 <main+0x4092>
    fed1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    fed8:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    fedf:	b9 18 00 00 00       	mov    $0x18,%ecx
    fee4:	ff f1                	push   %rcx
    fee6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # feed <main+0xfeed>
    feed:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fef2:	8f c1                	pop    %rcx
    fef4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    fef9:	e8 94 41 ff ff       	call   4092 <main+0x4092>
    fefe:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ff05:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ff0c:	b9 01 00 00 00       	mov    $0x1,%ecx
    ff11:	ff f1                	push   %rcx
    ff13:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ff1a <main+0xff1a>
    ff1a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ff1f:	8f c1                	pop    %rcx
    ff21:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ff26:	e8 67 41 ff ff       	call   4092 <main+0x4092>
    ff2b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ff32:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ff39:	b9 5e 04 00 00       	mov    $0x45e,%ecx
    ff3e:	48 63 d1             	movslq %ecx,%rdx
    ff41:	48 89 14 24          	mov    %rdx,(%rsp)
    ff45:	e8 ac 3e ff ff       	call   3df6 <main+0x3df6>
    ff4a:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
    ff51:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ff58:	b9 08 00 00 00       	mov    $0x8,%ecx
    ff5d:	ff f1                	push   %rcx
    ff5f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ff66 <main+0xff66>
    ff66:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ff6b:	8f c1                	pop    %rcx
    ff6d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
    ff72:	e8 1b 41 ff ff       	call   4092 <main+0x4092>
    ff77:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ff7e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ff85:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ff8c <main+0xff8c>
    ff8c:	48 8a 11             	rex.W mov (%rcx),%dl
    ff8f:	48 0f b6 d2          	movzbq %dl,%rdx
    ff93:	48 0f be ca          	movsbq %dl,%rcx
    ff97:	48 89 0c 24          	mov    %rcx,(%rsp)
    ff9b:	e8 56 3e ff ff       	call   3df6 <main+0x3df6>
    ffa0:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    ffa7:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
    ffae:	b9 0a 00 00 00       	mov    $0xa,%ecx
    ffb3:	88 0c 24             	mov    %cl,(%rsp)
    ffb6:	e8 36 40 ff ff       	call   3ff1 <main+0x3ff1>
    ffbb:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    glBindTexture(GL_TEXTURE_2D,0);
    ffc2:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
    ffc9:	b9 e1 0d 00 00       	mov    $0xde1,%ecx
    ffce:	8b d1                	mov    %ecx,%edx
    ffd0:	ff f2                	push   %rdx
    ffd2:	b9 00 00 00 00       	mov    $0x0,%ecx
    ffd7:	8b d1                	mov    %ecx,%edx
    ffd9:	89 54 24 10          	mov    %edx,0x10(%rsp)
    ffdd:	8f c1                	pop    %rcx
    ffdf:	89 0c 24             	mov    %ecx,(%rsp)
    ffe2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ffe9 <main+0xffe9>
    ffe9:	48 8b 11             	mov    (%rcx),%rdx
    ffec:	4c 8b d2             	mov    %rdx,%r10
    ffef:	33 c9                	xor    %ecx,%ecx
    fff1:	8b 0c 24             	mov    (%rsp),%ecx
    fff4:	33 d2                	xor    %edx,%edx
    fff6:	8b 54 24 08          	mov    0x8(%rsp),%edx
    fffa:	41 ff d2             	call   *%r10
    fffd:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
    GLCHECK
   10004:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   1000b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10012 <main+0x10012>
   10012:	48 8b 11             	mov    (%rcx),%rdx
   10015:	4c 8b d2             	mov    %rdx,%r10
   10018:	41 ff d2             	call   *%r10
   1001b:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   10022:	8b c8                	mov    %eax,%ecx
   10024:	ff f1                	push   %rcx
   10026:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1002d <main+0x1002d>
   1002d:	8f c2                	pop    %rdx
   1002f:	48 63 da             	movslq %edx,%rbx
   10032:	88 19                	mov    %bl,(%rcx)
   10034:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1003b <main+0x1003b>
   1003b:	48 8a 11             	rex.W mov (%rcx),%dl
   1003e:	48 0f b6 d2          	movzbq %dl,%rdx
   10042:	48 83 fa 00          	cmp    $0x0,%rdx
   10046:	0f 84 17 01 00 00    	je     10163 <main+0x10163>
   1004c:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   10053:	b9 06 00 00 00       	mov    $0x6,%ecx
   10058:	ff f1                	push   %rcx
   1005a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10061 <main+0x10061>
   10061:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10066:	8f c1                	pop    %rcx
   10068:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1006d:	e8 20 40 ff ff       	call   4092 <main+0x4092>
   10072:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   10079:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   10080:	b9 18 00 00 00       	mov    $0x18,%ecx
   10085:	ff f1                	push   %rcx
   10087:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1008e <main+0x1008e>
   1008e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10093:	8f c1                	pop    %rcx
   10095:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1009a:	e8 f3 3f ff ff       	call   4092 <main+0x4092>
   1009f:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   100a6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   100ad:	b9 01 00 00 00       	mov    $0x1,%ecx
   100b2:	ff f1                	push   %rcx
   100b4:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 100bb <main+0x100bb>
   100bb:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   100c0:	8f c1                	pop    %rcx
   100c2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   100c7:	e8 c6 3f ff ff       	call   4092 <main+0x4092>
   100cc:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   100d3:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   100da:	b9 60 04 00 00       	mov    $0x460,%ecx
   100df:	48 63 d1             	movslq %ecx,%rdx
   100e2:	48 89 14 24          	mov    %rdx,(%rsp)
   100e6:	e8 0b 3d ff ff       	call   3df6 <main+0x3df6>
   100eb:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
/*
   100f2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   100f9:	b9 08 00 00 00       	mov    $0x8,%ecx
   100fe:	ff f1                	push   %rcx
   10100:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10107 <main+0x10107>
   10107:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1010c:	8f c1                	pop    %rcx
   1010e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10113:	e8 7a 3f ff ff       	call   4092 <main+0x4092>
   10118:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   1011f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   10126:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1012d <main+0x1012d>
   1012d:	48 8a 11             	rex.W mov (%rcx),%dl
   10130:	48 0f b6 d2          	movzbq %dl,%rdx
   10134:	48 0f be ca          	movsbq %dl,%rcx
   10138:	48 89 0c 24          	mov    %rcx,(%rsp)
   1013c:	e8 b5 3c ff ff       	call   3df6 <main+0x3df6>
   10141:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   10148:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   1014f:	b9 0a 00 00 00       	mov    $0xa,%ecx
   10154:	88 0c 24             	mov    %cl,(%rsp)
   10157:	e8 95 3e ff ff       	call   3ff1 <main+0x3ff1>
   1015c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
    
    // hardcoded for consolas42.png
    font.char_width = 35;
   10163:	b9 23 00 00 00       	mov    $0x23,%ecx
   10168:	ff f1                	push   %rcx
   1016a:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10171:	48 03 cd             	add    %rbp,%rcx
   10174:	48 8b 11             	mov    (%rcx),%rdx
   10177:	b9 0c 00 00 00       	mov    $0xc,%ecx
   1017c:	48 03 d1             	add    %rcx,%rdx
   1017f:	8f c1                	pop    %rcx
   10181:	89 0a                	mov    %ecx,(%rdx)
    font.cell_w = font.width/16; // 16*16 = 256 characters
   10183:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   1018a:	48 03 cd             	add    %rbp,%rcx
   1018d:	48 8b 11             	mov    (%rcx),%rdx
   10190:	b9 04 00 00 00       	mov    $0x4,%ecx
   10195:	48 03 d1             	add    %rcx,%rdx
   10198:	8b 0a                	mov    (%rdx),%ecx
   1019a:	ff f1                	push   %rcx
   1019c:	b9 10 00 00 00       	mov    $0x10,%ecx
   101a1:	8f c2                	pop    %rdx
   101a3:	48 8b c2             	mov    %rdx,%rax
   101a6:	99                   	cltd
   101a7:	f7 f9                	idiv   %ecx
   101a9:	48 8b d0             	mov    %rax,%rdx
   101ac:	ff f2                	push   %rdx
   101ae:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   101b5:	48 03 cd             	add    %rbp,%rcx
   101b8:	48 8b 11             	mov    (%rcx),%rdx
   101bb:	b9 10 00 00 00       	mov    $0x10,%ecx
   101c0:	48 03 d1             	add    %rcx,%rdx
   101c3:	8f c1                	pop    %rcx
   101c5:	89 0a                	mov    %ecx,(%rdx)
    font.cell_h = font.height/16;
   101c7:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   101ce:	48 03 cd             	add    %rbp,%rcx
   101d1:	48 8b 11             	mov    (%rcx),%rdx
   101d4:	b9 08 00 00 00       	mov    $0x8,%ecx
   101d9:	48 03 d1             	add    %rcx,%rdx
   101dc:	8b 0a                	mov    (%rdx),%ecx
   101de:	ff f1                	push   %rcx
   101e0:	b9 10 00 00 00       	mov    $0x10,%ecx
   101e5:	8f c2                	pop    %rdx
   101e7:	48 8b c2             	mov    %rdx,%rax
   101ea:	99                   	cltd
   101eb:	f7 f9                	idiv   %ecx
   101ed:	48 8b d0             	mov    %rax,%rdx
   101f0:	ff f2                	push   %rdx
   101f2:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   101f9:	48 03 cd             	add    %rbp,%rcx
   101fc:	48 8b 11             	mov    (%rcx),%rdx
   101ff:	b9 14 00 00 00       	mov    $0x14,%ecx
   10204:	48 03 d1             	add    %rcx,%rdx
   10207:	8f c1                	pop    %rcx
   10209:	89 0a                	mov    %ecx,(%rdx)
    
    return font
   1020b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   1020f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   10213:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   1021a:	8f c5                	pop    %rbp
   1021c:	c3                   	ret
    fn setMouseX(x: f32) { m_mouseX=x; }
   1021d:	ff f5                	push   %rbp
   1021f:	48 8b ec             	mov    %rsp,%rbp
   10222:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   10227:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1022e:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10233:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10237:	48 8b c9             	mov    %rcx,%rcx
   1023a:	ba b0 00 00 00       	mov    $0xb0,%edx
   1023f:	48 03 ca             	add    %rdx,%rcx
   10242:	8f c2                	pop    %rdx
   10244:	89 11                	mov    %edx,(%rcx)
   10246:	8f c5                	pop    %rbp
   10248:	c3                   	ret
    fn setMouseY(y: f32) { m_mouseY=y; }
   10249:	ff f5                	push   %rbp
   1024b:	48 8b ec             	mov    %rsp,%rbp
   1024e:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   10253:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1025a:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   1025f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10263:	48 8b c9             	mov    %rcx,%rcx
   10266:	ba b4 00 00 00       	mov    $0xb4,%edx
   1026b:	48 03 ca             	add    %rdx,%rcx
   1026e:	8f c2                	pop    %rdx
   10270:	89 11                	mov    %edx,(%rcx)
   10272:	8f c5                	pop    %rbp
   10274:	c3                   	ret
    fn setScrollX(x: f32) { m_frameScrollX += x; m_tickScrollX += x;}
   10275:	ff f5                	push   %rbp
   10277:	48 8b ec             	mov    %rsp,%rbp
   1027a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1027e:	48 8b c9             	mov    %rcx,%rcx
   10281:	8b 91 c8 00 00 00    	mov    0xc8(%rcx),%edx
   10287:	ff f2                	push   %rdx
   10289:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   1028e:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   10293:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   1029a:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   1029e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   102a5:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   102aa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   102ae:	48 8b c9             	mov    %rcx,%rcx
   102b1:	ba c8 00 00 00       	mov    $0xc8,%edx
   102b6:	48 03 ca             	add    %rdx,%rcx
   102b9:	8f c2                	pop    %rdx
   102bb:	89 11                	mov    %edx,(%rcx)
   102bd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   102c1:	48 8b c9             	mov    %rcx,%rcx
   102c4:	8b 91 c0 00 00 00    	mov    0xc0(%rcx),%edx
   102ca:	ff f2                	push   %rdx
   102cc:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   102d1:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   102d6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   102dd:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   102e1:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   102e8:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   102ed:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   102f1:	48 8b c9             	mov    %rcx,%rcx
   102f4:	ba c0 00 00 00       	mov    $0xc0,%edx
   102f9:	48 03 ca             	add    %rdx,%rcx
   102fc:	8f c2                	pop    %rdx
   102fe:	89 11                	mov    %edx,(%rcx)
   10300:	8f c5                	pop    %rbp
   10302:	c3                   	ret
    fn setScrollY(y: f32) { m_frameScrollY += y; m_tickScrollY += y; }
   10303:	ff f5                	push   %rbp
   10305:	48 8b ec             	mov    %rsp,%rbp
   10308:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1030c:	48 8b c9             	mov    %rcx,%rcx
   1030f:	8b 91 cc 00 00 00    	mov    0xcc(%rcx),%edx
   10315:	ff f2                	push   %rdx
   10317:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   1031c:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   10321:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10328:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   1032c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10333:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   10338:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1033c:	48 8b c9             	mov    %rcx,%rcx
   1033f:	ba cc 00 00 00       	mov    $0xcc,%edx
   10344:	48 03 ca             	add    %rdx,%rcx
   10347:	8f c2                	pop    %rdx
   10349:	89 11                	mov    %edx,(%rcx)
   1034b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1034f:	48 8b c9             	mov    %rcx,%rcx
   10352:	8b 91 c4 00 00 00    	mov    0xc4(%rcx),%edx
   10358:	ff f2                	push   %rdx
   1035a:	f3 0f 10 45 18       	movss  0x18(%rbp),%xmm0
   1035f:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   10364:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   1036b:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   1036f:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10376:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   1037b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1037f:	48 8b c9             	mov    %rcx,%rcx
   10382:	ba c4 00 00 00       	mov    $0xc4,%edx
   10387:	48 03 ca             	add    %rdx,%rcx
   1038a:	8f c2                	pop    %rdx
   1038c:	89 11                	mov    %edx,(%rcx)
   1038e:	8f c5                	pop    %rbp
   10390:	c3                   	ret
    fn setInput(code: i32, down: bool) {
   10391:	ff f5                	push   %rbp
   10393:	48 8b ec             	mov    %rsp,%rbp
   10396:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        index: i32 = -1;
   1039d:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   103a2:	89 4d f8             	mov    %ecx,-0x8(%rbp)
		for @ptr inp: m_inputs.sliced() {
   103a5:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffffffff,%rcx
   103ac:	ff ff ff 
   103af:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   103b3:	48 33 c9             	xor    %rcx,%rcx
   103b6:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
   103ba:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   103c1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   103c5:	48 8b c9             	mov    %rcx,%rcx
   103c8:	ba a0 00 00 00       	mov    $0xa0,%edx
   103cd:	48 03 ca             	add    %rdx,%rcx
   103d0:	48 89 0c 24          	mov    %rcx,(%rsp)
   103d4:	e8 37 05 ff ff       	call   910 <main+0x910>
   103d9:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   103e0:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   103e5:	48 8b c9             	mov    %rcx,%rcx
   103e8:	ff f1                	push   %rcx
   103ea:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   103ef:	8f c2                	pop    %rdx
   103f1:	48 8b 5d f0          	mov    -0x10(%rbp),%rbx
   103f5:	48 81 c3 01 00 00 00 	add    $0x1,%rbx
   103fc:	48 89 5d f0          	mov    %rbx,-0x10(%rbp)
   10400:	48 3b d3             	cmp    %rbx,%rdx
   10403:	40 0f 9f c2          	rex setg %dl
   10407:	48 0f b6 d2          	movzbq %dl,%rdx
   1040b:	48 83 fa 00          	cmp    $0x0,%rdx
   1040f:	0f 84 5e 00 00 00    	je     10473 <main+0x10473>
   10415:	ba 0c 00 00 00       	mov    $0xc,%edx
   1041a:	48 0f af d3          	imul   %rbx,%rdx
   1041e:	48 03 ca             	add    %rdx,%rcx
   10421:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
			if (inp.code == code) {
   10425:	48 c7 c1 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rcx
   1042c:	48 03 cd             	add    %rbp,%rcx
   1042f:	48 8b 11             	mov    (%rcx),%rdx
   10432:	8b 0a                	mov    (%rdx),%ecx
   10434:	ff f1                	push   %rcx
   10436:	8b 4d 18             	mov    0x18(%rbp),%ecx
   10439:	48 63 c9             	movslq %ecx,%rcx
   1043c:	8f c2                	pop    %rdx
   1043e:	3b d1                	cmp    %ecx,%edx
   10440:	40 0f 94 c2          	rex sete %dl
   10444:	48 0f b6 d2          	movzbq %dl,%rdx
   10448:	48 83 fa 00          	cmp    $0x0,%rdx
   1044c:	0f 84 1c 00 00 00    	je     1046e <main+0x1046e>
				index = nr;
   10452:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   10456:	ff f1                	push   %rcx
   10458:	48 c7 c1 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rcx
   1045f:	48 03 cd             	add    %rbp,%rcx
   10462:	8f c2                	pop    %rdx
   10464:	48 8b da             	mov    %rdx,%rbx
   10467:	89 19                	mov    %ebx,(%rcx)
				break;
   10469:	e9 05 00 00 00       	jmp    10473 <main+0x10473>
   1046e:	e9 47 ff ff ff       	jmp    103ba <main+0x103ba>
        input: KeyInput*;
   10473:	48 33 c9             	xor    %rcx,%rcx
   10476:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
		if index==-1 {
   1047a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   1047d:	ff f1                	push   %rcx
   1047f:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   10484:	8f c2                	pop    %rdx
   10486:	3b d1                	cmp    %ecx,%edx
   10488:	40 0f 94 c2          	rex sete %dl
   1048c:	48 0f b6 d2          	movzbq %dl,%rdx
   10490:	48 83 fa 00          	cmp    $0x0,%rdx
   10494:	0f 84 22 01 00 00    	je     105bc <main+0x105bc>
			index = m_inputs.size();
   1049a:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   104a1:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   104a5:	48 8b c9             	mov    %rcx,%rcx
   104a8:	ba a0 00 00 00       	mov    $0xa0,%edx
   104ad:	48 03 ca             	add    %rdx,%rcx
   104b0:	48 89 0c 24          	mov    %rcx,(%rsp)
   104b4:	e8 fb 03 ff ff       	call   8b4 <main+0x8b4>
   104b9:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   104c0:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
   104c4:	48 63 c9             	movslq %ecx,%rcx
   104c7:	ff f1                	push   %rcx
   104c9:	48 c7 c1 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rcx
   104d0:	48 03 cd             	add    %rbp,%rcx
   104d3:	8f c2                	pop    %rdx
   104d5:	89 11                	mov    %edx,(%rcx)
			m_inputs.add(KeyInput{});
   104d7:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   104de:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   104e2:	48 8b c9             	mov    %rcx,%rcx
   104e5:	ba a0 00 00 00       	mov    $0xa0,%edx
   104ea:	48 03 ca             	add    %rdx,%rcx
   104ed:	ff f1                	push   %rcx
   104ef:	b9 00 00 00 00       	mov    $0x0,%ecx
   104f4:	48 63 d1             	movslq %ecx,%rdx
   104f7:	ff f2                	push   %rdx
   104f9:	b9 00 00 00 00       	mov    $0x0,%ecx
   104fe:	48 63 d1             	movslq %ecx,%rdx
   10501:	ff f2                	push   %rdx
   10503:	b9 00 00 00 00       	mov    $0x0,%ecx
   10508:	48 63 d1             	movslq %ecx,%rdx
   1050b:	ff f2                	push   %rdx
   1050d:	b9 00 00 00 00       	mov    $0x0,%ecx
   10512:	48 63 d1             	movslq %ecx,%rdx
   10515:	ff f2                	push   %rdx
   10517:	b9 00 00 00 00       	mov    $0x0,%ecx
   1051c:	ff f1                	push   %rcx
   1051e:	b9 00 00 00 00       	mov    $0x0,%ecx
   10523:	89 4c 24 38          	mov    %ecx,0x38(%rsp)
   10527:	8f c1                	pop    %rcx
   10529:	88 4c 24 34          	mov    %cl,0x34(%rsp)
   1052d:	8f c1                	pop    %rcx
   1052f:	88 4c 24 2d          	mov    %cl,0x2d(%rsp)
   10533:	8f c1                	pop    %rcx
   10535:	88 4c 24 26          	mov    %cl,0x26(%rsp)
   10539:	8f c1                	pop    %rcx
   1053b:	88 4c 24 1f          	mov    %cl,0x1f(%rsp)
   1053f:	8f c1                	pop    %rcx
   10541:	88 4c 24 18          	mov    %cl,0x18(%rsp)
   10545:	8f c1                	pop    %rcx
   10547:	48 89 0c 24          	mov    %rcx,(%rsp)
   1054b:	e8 56 01 ff ff       	call   6a6 <main+0x6a6>
   10550:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
            input = m_inputs.get_unsafe(index)
   10557:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   1055e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10562:	48 8b c9             	mov    %rcx,%rcx
   10565:	ba a0 00 00 00       	mov    $0xa0,%edx
   1056a:	48 03 ca             	add    %rdx,%rcx
   1056d:	ff f1                	push   %rcx
   1056f:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   10572:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   10576:	8f c1                	pop    %rcx
   10578:	48 89 0c 24          	mov    %rcx,(%rsp)
   1057c:	e8 53 05 ff ff       	call   ad4 <main+0xad4>
   10581:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   10588:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   1058d:	ff f1                	push   %rcx
   1058f:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10596:	48 03 cd             	add    %rbp,%rcx
   10599:	8f c2                	pop    %rdx
   1059b:	48 89 11             	mov    %rdx,(%rcx)
            input.code = code;
   1059e:	8b 4d 18             	mov    0x18(%rbp),%ecx
   105a1:	48 63 c9             	movslq %ecx,%rcx
   105a4:	ff f1                	push   %rcx
   105a6:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   105ad:	48 03 cd             	add    %rbp,%rcx
   105b0:	48 8b 11             	mov    (%rcx),%rdx
   105b3:	8f c1                	pop    %rcx
   105b5:	89 0a                	mov    %ecx,(%rdx)
   105b7:	e9 47 00 00 00       	jmp    10603 <main+0x10603>
            input = m_inputs.get_unsafe(index)
   105bc:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   105c3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   105c7:	48 8b c9             	mov    %rcx,%rcx
   105ca:	ba a0 00 00 00       	mov    $0xa0,%edx
   105cf:	48 03 ca             	add    %rdx,%rcx
   105d2:	ff f1                	push   %rcx
   105d4:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   105d7:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   105db:	8f c1                	pop    %rcx
   105dd:	48 89 0c 24          	mov    %rcx,(%rsp)
   105e1:	e8 ee 04 ff ff       	call   ad4 <main+0xad4>
   105e6:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   105ed:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   105f2:	ff f1                	push   %rcx
   105f4:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   105fb:	48 03 cd             	add    %rbp,%rcx
   105fe:	8f c2                	pop    %rdx
   10600:	48 89 11             	mov    %rdx,(%rcx)
		if (down) {
   10603:	48 8a 4d 1c          	rex.W mov 0x1c(%rbp),%cl
   10607:	48 0f b6 c9          	movzbq %cl,%rcx
   1060b:	48 83 f9 00          	cmp    $0x0,%rcx
   1060f:	0f 84 a0 00 00 00    	je     106b5 <main+0x106b5>
			if (!input.down) {
   10615:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   1061c:	48 03 cd             	add    %rbp,%rcx
   1061f:	48 8b 11             	mov    (%rcx),%rdx
   10622:	b9 04 00 00 00       	mov    $0x4,%ecx
   10627:	48 03 d1             	add    %rcx,%rdx
   1062a:	48 8a 0a             	rex.W mov (%rdx),%cl
   1062d:	48 0f b6 c9          	movzbq %cl,%rcx
   10631:	48 85 c9             	test   %rcx,%rcx
   10634:	40 0f 94 c1          	rex sete %cl
   10638:	48 0f b6 c9          	movzbq %cl,%rcx
   1063c:	48 83 f9 00          	cmp    $0x0,%rcx
   10640:	0f 84 6a 00 00 00    	je     106b0 <main+0x106b0>
				input.down = true;
   10646:	b9 01 00 00 00       	mov    $0x1,%ecx
   1064b:	ff f1                	push   %rcx
   1064d:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10654:	48 03 cd             	add    %rbp,%rcx
   10657:	48 8b 11             	mov    (%rcx),%rdx
   1065a:	b9 04 00 00 00       	mov    $0x4,%ecx
   1065f:	48 03 d1             	add    %rcx,%rdx
   10662:	8f c1                	pop    %rcx
   10664:	88 0a                	mov    %cl,(%rdx)
				input.tickPressed++;
   10666:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   1066d:	48 03 cd             	add    %rbp,%rcx
   10670:	48 8b 11             	mov    (%rcx),%rdx
   10673:	b9 05 00 00 00       	mov    $0x5,%ecx
   10678:	48 03 d1             	add    %rcx,%rdx
   1067b:	48 8a 0a             	rex.W mov (%rdx),%cl
   1067e:	48 0f b6 c9          	movzbq %cl,%rcx
   10682:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
   10689:	88 0a                	mov    %cl,(%rdx)
				input.framePressed++;
   1068b:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10692:	48 03 cd             	add    %rbp,%rcx
   10695:	48 8b 11             	mov    (%rcx),%rdx
   10698:	b9 06 00 00 00       	mov    $0x6,%ecx
   1069d:	48 03 d1             	add    %rcx,%rdx
   106a0:	48 8a 0a             	rex.W mov (%rdx),%cl
   106a3:	48 0f b6 c9          	movzbq %cl,%rcx
   106a7:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
   106ae:	88 0a                	mov    %cl,(%rdx)
   106b0:	e9 90 00 00 00       	jmp    10745 <main+0x10745>
            if (input.down) {
   106b5:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   106bc:	48 03 cd             	add    %rbp,%rcx
   106bf:	48 8b 11             	mov    (%rcx),%rdx
   106c2:	b9 04 00 00 00       	mov    $0x4,%ecx
   106c7:	48 03 d1             	add    %rcx,%rdx
   106ca:	48 8a 0a             	rex.W mov (%rdx),%cl
   106cd:	48 0f b6 c9          	movzbq %cl,%rcx
   106d1:	48 83 f9 00          	cmp    $0x0,%rcx
   106d5:	0f 84 6a 00 00 00    	je     10745 <main+0x10745>
                input.down = false;
   106db:	b9 00 00 00 00       	mov    $0x0,%ecx
   106e0:	ff f1                	push   %rcx
   106e2:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   106e9:	48 03 cd             	add    %rbp,%rcx
   106ec:	48 8b 11             	mov    (%rcx),%rdx
   106ef:	b9 04 00 00 00       	mov    $0x4,%ecx
   106f4:	48 03 d1             	add    %rcx,%rdx
   106f7:	8f c1                	pop    %rcx
   106f9:	88 0a                	mov    %cl,(%rdx)
                input.tickReleased++;
   106fb:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10702:	48 03 cd             	add    %rbp,%rcx
   10705:	48 8b 11             	mov    (%rcx),%rdx
   10708:	b9 07 00 00 00       	mov    $0x7,%ecx
   1070d:	48 03 d1             	add    %rcx,%rdx
   10710:	48 8a 0a             	rex.W mov (%rdx),%cl
   10713:	48 0f b6 c9          	movzbq %cl,%rcx
   10717:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
   1071e:	88 0a                	mov    %cl,(%rdx)
                input.frameReleased++;
   10720:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10727:	48 03 cd             	add    %rbp,%rcx
   1072a:	48 8b 11             	mov    (%rcx),%rdx
   1072d:	b9 08 00 00 00       	mov    $0x8,%ecx
   10732:	48 03 d1             	add    %rcx,%rdx
   10735:	48 8a 0a             	rex.W mov (%rdx),%cl
   10738:	48 0f b6 c9          	movzbq %cl,%rcx
   1073c:	48 81 c1 01 00 00 00 	add    $0x1,%rcx
   10743:	88 0a                	mov    %cl,(%rdx)
   10745:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   1074c:	8f c5                	pop    %rbp
   1074e:	c3                   	ret
    fn resetPollChar() {
   1074f:	ff f5                	push   %rbp
   10751:	48 8b ec             	mov    %rsp,%rbp
        typed_characters_end = 0
   10754:	b9 00 00 00 00       	mov    $0x0,%ecx
   10759:	ff f1                	push   %rcx
   1075b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1075f:	48 8b c9             	mov    %rcx,%rcx
   10762:	ba 9c 00 00 00       	mov    $0x9c,%edx
   10767:	48 03 ca             	add    %rdx,%rcx
   1076a:	8f c2                	pop    %rdx
   1076c:	89 11                	mov    %edx,(%rcx)
        typed_characters_start = 0
   1076e:	b9 00 00 00 00       	mov    $0x0,%ecx
   10773:	ff f1                	push   %rcx
   10775:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10779:	48 8b c9             	mov    %rcx,%rcx
   1077c:	ba 98 00 00 00       	mov    $0x98,%edx
   10781:	48 03 ca             	add    %rdx,%rcx
   10784:	8f c2                	pop    %rdx
   10786:	89 11                	mov    %edx,(%rcx)
   10788:	8f c5                	pop    %rbp
   1078a:	c3                   	ret
    fn resetEvents(resetFrameInput: bool) {
   1078b:	ff f5                	push   %rbp
   1078d:	48 8b ec             	mov    %rsp,%rbp
   10790:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        resetFrameInput = false;
   10797:	b9 00 00 00 00       	mov    $0x0,%ecx
   1079c:	ff f1                	push   %rcx
   1079e:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   107a5:	48 03 cd             	add    %rbp,%rcx
   107a8:	8f c2                	pop    %rdx
   107aa:	88 11                	mov    %dl,(%rcx)
        if (resetFrameInput) {
   107ac:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
   107b0:	48 0f b6 c9          	movzbq %cl,%rcx
   107b4:	48 83 f9 00          	cmp    $0x0,%rcx
   107b8:	0f 84 10 01 00 00    	je     108ce <main+0x108ce>
            m_frameScrollX = 0;
   107be:	b9 00 00 00 00       	mov    $0x0,%ecx
   107c3:	ff f1                	push   %rcx
   107c5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   107c9:	48 8b c9             	mov    %rcx,%rcx
   107cc:	ba c8 00 00 00       	mov    $0xc8,%edx
   107d1:	48 03 ca             	add    %rdx,%rcx
   107d4:	8f c2                	pop    %rdx
   107d6:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   107da:	f3 0f 11 01          	movss  %xmm0,(%rcx)
            m_frameScrollY = 0;
   107de:	b9 00 00 00 00       	mov    $0x0,%ecx
   107e3:	ff f1                	push   %rcx
   107e5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   107e9:	48 8b c9             	mov    %rcx,%rcx
   107ec:	ba cc 00 00 00       	mov    $0xcc,%edx
   107f1:	48 03 ca             	add    %rdx,%rcx
   107f4:	8f c2                	pop    %rdx
   107f6:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   107fa:	f3 0f 11 01          	movss  %xmm0,(%rcx)
            for @ptr inp: m_inputs.sliced_unsafe() {
   107fe:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffffffff,%rcx
   10805:	ff ff ff 
   10808:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1080c:	48 33 c9             	xor    %rcx,%rcx
   1080f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   10813:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1081a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1081e:	48 8b c9             	mov    %rcx,%rcx
   10821:	ba a0 00 00 00       	mov    $0xa0,%edx
   10826:	48 03 ca             	add    %rdx,%rcx
   10829:	48 89 0c 24          	mov    %rcx,(%rsp)
   1082d:	e8 a5 00 ff ff       	call   8d7 <main+0x8d7>
   10832:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10839:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   1083e:	48 8b c9             	mov    %rcx,%rcx
   10841:	ff f1                	push   %rcx
   10843:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   10848:	8f c2                	pop    %rdx
   1084a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1084e:	48 81 c3 01 00 00 00 	add    $0x1,%rbx
   10855:	48 89 5d f8          	mov    %rbx,-0x8(%rbp)
   10859:	48 3b d3             	cmp    %rbx,%rdx
   1085c:	40 0f 9f c2          	rex setg %dl
   10860:	48 0f b6 d2          	movzbq %dl,%rdx
   10864:	48 83 fa 00          	cmp    $0x0,%rdx
   10868:	0f 84 5b 00 00 00    	je     108c9 <main+0x108c9>
   1086e:	ba 0c 00 00 00       	mov    $0xc,%edx
   10873:	48 0f af d3          	imul   %rbx,%rdx
   10877:	48 03 ca             	add    %rdx,%rcx
   1087a:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
                inp.framePressed = 0;
   1087e:	b9 00 00 00 00       	mov    $0x0,%ecx
   10883:	ff f1                	push   %rcx
   10885:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   1088c:	48 03 cd             	add    %rbp,%rcx
   1088f:	48 8b 11             	mov    (%rcx),%rdx
   10892:	b9 06 00 00 00       	mov    $0x6,%ecx
   10897:	48 03 d1             	add    %rcx,%rdx
   1089a:	8f c1                	pop    %rcx
   1089c:	48 63 d9             	movslq %ecx,%rbx
   1089f:	88 1a                	mov    %bl,(%rdx)
                inp.frameReleased = 0;
   108a1:	b9 00 00 00 00       	mov    $0x0,%ecx
   108a6:	ff f1                	push   %rcx
   108a8:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   108af:	48 03 cd             	add    %rbp,%rcx
   108b2:	48 8b 11             	mov    (%rcx),%rdx
   108b5:	b9 08 00 00 00       	mov    $0x8,%ecx
   108ba:	48 03 d1             	add    %rcx,%rdx
   108bd:	8f c1                	pop    %rcx
   108bf:	48 63 d9             	movslq %ecx,%rbx
   108c2:	88 1a                	mov    %bl,(%rdx)
   108c4:	e9 4a ff ff ff       	jmp    10813 <main+0x10813>
   108c9:	e9 5a 01 00 00       	jmp    10a28 <main+0x10a28>
            m_tickScrollX = 0;
   108ce:	b9 00 00 00 00       	mov    $0x0,%ecx
   108d3:	ff f1                	push   %rcx
   108d5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   108d9:	48 8b c9             	mov    %rcx,%rcx
   108dc:	ba c0 00 00 00       	mov    $0xc0,%edx
   108e1:	48 03 ca             	add    %rdx,%rcx
   108e4:	8f c2                	pop    %rdx
   108e6:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   108ea:	f3 0f 11 01          	movss  %xmm0,(%rcx)
            m_tickScrollY = 0;
   108ee:	b9 00 00 00 00       	mov    $0x0,%ecx
   108f3:	ff f1                	push   %rcx
   108f5:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   108f9:	48 8b c9             	mov    %rcx,%rcx
   108fc:	ba c4 00 00 00       	mov    $0xc4,%edx
   10901:	48 03 ca             	add    %rdx,%rcx
   10904:	8f c2                	pop    %rdx
   10906:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   1090a:	f3 0f 11 01          	movss  %xmm0,(%rcx)
            for @ptr inp: m_inputs.sliced_unsafe() {
   1090e:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffffffff,%rcx
   10915:	ff ff ff 
   10918:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   1091c:	48 33 c9             	xor    %rcx,%rcx
   1091f:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
   10923:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1092a:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1092e:	48 8b c9             	mov    %rcx,%rcx
   10931:	ba a0 00 00 00       	mov    $0xa0,%edx
   10936:	48 03 ca             	add    %rdx,%rcx
   10939:	48 89 0c 24          	mov    %rcx,(%rsp)
   1093d:	e8 95 ff fe ff       	call   8d7 <main+0x8d7>
   10942:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10949:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   1094e:	48 8b c9             	mov    %rcx,%rcx
   10951:	ff f1                	push   %rcx
   10953:	48 8b 4c 24 e0       	mov    -0x20(%rsp),%rcx
   10958:	8f c2                	pop    %rdx
   1095a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
   1095e:	48 81 c3 01 00 00 00 	add    $0x1,%rbx
   10965:	48 89 5d f8          	mov    %rbx,-0x8(%rbp)
   10969:	48 3b d3             	cmp    %rbx,%rdx
   1096c:	40 0f 9f c2          	rex setg %dl
   10970:	48 0f b6 d2          	movzbq %dl,%rdx
   10974:	48 83 fa 00          	cmp    $0x0,%rdx
   10978:	0f 84 aa 00 00 00    	je     10a28 <main+0x10a28>
   1097e:	ba 0c 00 00 00       	mov    $0xc,%edx
   10983:	48 0f af d3          	imul   %rbx,%rdx
   10987:	48 03 ca             	add    %rdx,%rcx
   1098a:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
                if(inp.tickPressed!=0){
   1098e:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10995:	48 03 cd             	add    %rbp,%rcx
   10998:	48 8b 11             	mov    (%rcx),%rdx
   1099b:	b9 05 00 00 00       	mov    $0x5,%ecx
   109a0:	48 03 d1             	add    %rcx,%rdx
   109a3:	48 8a 0a             	rex.W mov (%rdx),%cl
   109a6:	48 0f b6 c9          	movzbq %cl,%rcx
   109aa:	ff f1                	push   %rcx
   109ac:	b9 00 00 00 00       	mov    $0x0,%ecx
   109b1:	8f c2                	pop    %rdx
   109b3:	48 0f be da          	movsbq %dl,%rbx
   109b7:	3b d9                	cmp    %ecx,%ebx
   109b9:	40 0f 95 c3          	rex setne %bl
   109bd:	48 0f b6 db          	movzbq %bl,%rbx
   109c1:	48 83 fb 00          	cmp    $0x0,%rbx
   109c5:	0f 84 12 00 00 00    	je     109dd <main+0x109dd>
                    code := inp.code;
   109cb:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   109d2:	48 03 cd             	add    %rbp,%rcx
   109d5:	48 8b 11             	mov    (%rcx),%rdx
   109d8:	8b 0a                	mov    (%rdx),%ecx
   109da:	89 4d e8             	mov    %ecx,-0x18(%rbp)
                inp.tickPressed = 0;
   109dd:	b9 00 00 00 00       	mov    $0x0,%ecx
   109e2:	ff f1                	push   %rcx
   109e4:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   109eb:	48 03 cd             	add    %rbp,%rcx
   109ee:	48 8b 11             	mov    (%rcx),%rdx
   109f1:	b9 05 00 00 00       	mov    $0x5,%ecx
   109f6:	48 03 d1             	add    %rcx,%rdx
   109f9:	8f c1                	pop    %rcx
   109fb:	48 63 d9             	movslq %ecx,%rbx
   109fe:	88 1a                	mov    %bl,(%rdx)
                inp.tickReleased = 0;
   10a00:	b9 00 00 00 00       	mov    $0x0,%ecx
   10a05:	ff f1                	push   %rcx
   10a07:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10a0e:	48 03 cd             	add    %rbp,%rcx
   10a11:	48 8b 11             	mov    (%rcx),%rdx
   10a14:	b9 07 00 00 00       	mov    $0x7,%ecx
   10a19:	48 03 d1             	add    %rcx,%rdx
   10a1c:	8f c1                	pop    %rcx
   10a1e:	48 63 d9             	movslq %ecx,%rbx
   10a21:	88 1a                	mov    %bl,(%rdx)
   10a23:	e9 fb fe ff ff       	jmp    10923 <main+0x10923>
   10a28:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   10a2f:	8f c5                	pop    %rbp
   10a31:	c3                   	ret
    fn get_uvwh(chr: char) -> f32, f32, f32, f32 {
   10a32:	ff f5                	push   %rbp
   10a34:	48 8b ec             	mov    %rsp,%rbp
   10a37:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
        return 
   10a3e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10a42:	48 8b c9             	mov    %rcx,%rcx
   10a45:	8b 51 10             	mov    0x10(%rcx),%edx
   10a48:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10a4c:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10a53:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10a58:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
   10a5c:	48 0f b6 c9          	movzbq %cl,%rcx
   10a60:	48 0f be d1          	movsbq %cl,%rdx
   10a64:	ff f2                	push   %rdx
   10a66:	b9 10 00 00 00       	mov    $0x10,%ecx
   10a6b:	8f c2                	pop    %rdx
   10a6d:	48 8b c2             	mov    %rdx,%rax
   10a70:	99                   	cltd
   10a71:	f7 f9                	idiv   %ecx
   10a73:	83 fa 00             	cmp    $0x0,%edx
   10a76:	7d 02                	jge    10a7a <main+0x10a7a>
   10a78:	03 d1                	add    %ecx,%edx
   10a7a:	ff f2                	push   %rdx
   10a7c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10a80:	48 8b c9             	mov    %rcx,%rcx
   10a83:	8b 51 04             	mov    0x4(%rcx),%edx
   10a86:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10a8a:	8f c1                	pop    %rcx
   10a8c:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   10a90:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   10a94:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10a99:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10aa0:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   10aa4:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
   10aa9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10aad:	48 8b c9             	mov    %rcx,%rcx
   10ab0:	8b 51 14             	mov    0x14(%rcx),%edx
   10ab3:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10ab7:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10abe:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10ac3:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
   10ac7:	48 0f b6 c9          	movzbq %cl,%rcx
   10acb:	48 0f be d1          	movsbq %cl,%rdx
   10acf:	ff f2                	push   %rdx
   10ad1:	b9 10 00 00 00       	mov    $0x10,%ecx
   10ad6:	8f c2                	pop    %rdx
   10ad8:	48 8b c2             	mov    %rdx,%rax
   10adb:	99                   	cltd
   10adc:	f7 f9                	idiv   %ecx
   10ade:	48 8b d0             	mov    %rax,%rdx
   10ae1:	ff f2                	push   %rdx
   10ae3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10ae7:	48 8b c9             	mov    %rcx,%rcx
   10aea:	8b 51 08             	mov    0x8(%rcx),%edx
   10aed:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10af1:	8f c1                	pop    %rcx
   10af3:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   10af7:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   10afb:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10b00:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10b07:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   10b0b:	f3 0f 11 45 f8       	movss  %xmm0,-0x8(%rbp)
   10b10:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10b14:	48 8b c9             	mov    %rcx,%rcx
   10b17:	8b 51 10             	mov    0x10(%rcx),%edx
   10b1a:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10b1e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10b25:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10b2a:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
   10b2e:	48 0f b6 c9          	movzbq %cl,%rcx
   10b32:	48 0f be d1          	movsbq %cl,%rdx
   10b36:	ff f2                	push   %rdx
   10b38:	b9 10 00 00 00       	mov    $0x10,%ecx
   10b3d:	8f c2                	pop    %rdx
   10b3f:	48 8b c2             	mov    %rdx,%rax
   10b42:	99                   	cltd
   10b43:	f7 f9                	idiv   %ecx
   10b45:	83 fa 00             	cmp    $0x0,%edx
   10b48:	7d 02                	jge    10b4c <main+0x10b4c>
   10b4a:	03 d1                	add    %ecx,%edx
   10b4c:	ff f2                	push   %rdx
   10b4e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10b52:	48 8b c9             	mov    %rcx,%rcx
   10b55:	8b 51 04             	mov    0x4(%rcx),%edx
   10b58:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10b5c:	8f c1                	pop    %rcx
   10b5e:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   10b62:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   10b66:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10b6b:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10b72:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   10b76:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10b7d:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10b82:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10b86:	48 8b c9             	mov    %rcx,%rcx
   10b89:	8b 51 0c             	mov    0xc(%rcx),%edx
   10b8c:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10b90:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10b97:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10b9c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10ba0:	48 8b c9             	mov    %rcx,%rcx
   10ba3:	8b 51 04             	mov    0x4(%rcx),%edx
   10ba6:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10bab:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10bb2:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   10bb6:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   10bba:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   10bbf:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10bc6:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   10bca:	f3 0f 11 4d f4       	movss  %xmm1,-0xc(%rbp)
   10bcf:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10bd3:	48 8b c9             	mov    %rcx,%rcx
   10bd6:	8b 51 14             	mov    0x14(%rcx),%edx
   10bd9:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10bdd:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10be4:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10be9:	48 8a 4d 18          	rex.W mov 0x18(%rbp),%cl
   10bed:	48 0f b6 c9          	movzbq %cl,%rcx
   10bf1:	48 0f be d1          	movsbq %cl,%rdx
   10bf5:	ff f2                	push   %rdx
   10bf7:	b9 10 00 00 00       	mov    $0x10,%ecx
   10bfc:	8f c2                	pop    %rdx
   10bfe:	48 8b c2             	mov    %rdx,%rax
   10c01:	99                   	cltd
   10c02:	f7 f9                	idiv   %ecx
   10c04:	48 8b d0             	mov    %rax,%rdx
   10c07:	ff f2                	push   %rdx
   10c09:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10c0d:	48 8b c9             	mov    %rcx,%rcx
   10c10:	8b 51 08             	mov    0x8(%rcx),%edx
   10c13:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10c17:	8f c1                	pop    %rcx
   10c19:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   10c1d:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   10c21:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10c26:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10c2d:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
   10c31:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10c38:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10c3d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10c41:	48 8b c9             	mov    %rcx,%rcx
   10c44:	8b 51 14             	mov    0x14(%rcx),%edx
   10c47:	f3 0f 2a c2          	cvtsi2ss %edx,%xmm0
   10c4b:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10c52:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   10c57:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10c5b:	48 8b c9             	mov    %rcx,%rcx
   10c5e:	8b 51 08             	mov    0x8(%rcx),%edx
   10c61:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   10c66:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10c6d:	f3 0f 2a ca          	cvtsi2ss %edx,%xmm1
   10c71:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   10c75:	f3 0f 10 0c 24       	movss  (%rsp),%xmm1
   10c7a:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   10c81:	f3 0f 58 c8          	addss  %xmm0,%xmm1
   10c85:	f3 0f 11 4d f0       	movss  %xmm1,-0x10(%rbp)
   10c8a:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   10c91:	8f c5                	pop    %rbp
   10c93:	c3                   	ret

        ProcessSleep(0.5)
    }
}

fn LoadShader(path: char[]) -> i32 {
   10c94:	ff f5                	push   %rbp
   10c96:	48 8b ec             	mov    %rsp,%rbp
   10c99:	48 81 ec 68 00 00 00 	sub    $0x68,%rsp
    filesize: i64
   10ca0:	48 33 c9             	xor    %rcx,%rcx
   10ca3:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
    file := FileOpen(path, FILE_READ_ONLY, &filesize)
   10ca7:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10cae:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
   10cb2:	48 8b c9             	mov    %rcx,%rcx
   10cb5:	ff f1                	push   %rcx
   10cb7:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10cbb:	ff f1                	push   %rcx
   10cbd:	b9 01 00 00 00       	mov    $0x1,%ecx
   10cc2:	ff f1                	push   %rcx
   10cc4:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   10ccb:	48 03 cd             	add    %rbp,%rcx
   10cce:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
   10cd3:	8f c1                	pop    %rcx
   10cd5:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   10cd9:	8f c1                	pop    %rcx
   10cdb:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10ce0:	8f c1                	pop    %rcx
   10ce2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10ce7:	e8 17 60 ff ff       	call   6d03 <main+0x6d03>
   10cec:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
   10cf3:	48 8b 4c 24 c0       	mov    -0x40(%rsp),%rcx
   10cf8:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
    if !file {
   10cfc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   10d00:	48 85 c9             	test   %rcx,%rcx
   10d03:	40 0f 94 c1          	rex sete %cl
   10d07:	48 0f b6 c9          	movzbq %cl,%rcx
   10d0b:	48 83 f9 00          	cmp    $0x0,%rcx
   10d0f:	0f 84 d8 00 00 00    	je     10ded <main+0x10ded>
        log("Could not open ", path)
   10d15:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   10d1c:	b9 0f 00 00 00       	mov    $0xf,%ecx
   10d21:	ff f1                	push   %rcx
   10d23:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10d2a <main+0x10d2a>
   10d2a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10d2f:	8f c1                	pop    %rcx
   10d31:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10d36:	e8 57 33 ff ff       	call   4092 <main+0x4092>
   10d3b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   10d42:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   10d49:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
   10d4d:	48 8b c9             	mov    %rcx,%rcx
   10d50:	ff f1                	push   %rcx
   10d52:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   10d56:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10d5b:	8f c1                	pop    %rcx
   10d5d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10d62:	e8 2b 33 ff ff       	call   4092 <main+0x4092>
   10d67:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   10d6e:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   10d75:	b9 0a 00 00 00       	mov    $0xa,%ecx
   10d7a:	88 0c 24             	mov    %cl,(%rsp)
   10d7d:	e8 6f 32 ff ff       	call   3ff1 <main+0x3ff1>
   10d82:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        Assert(false)
   10d89:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10d90:	b9 00 00 00 00       	mov    $0x0,%ecx
   10d95:	ff f1                	push   %rcx
   10d97:	b9 4f 00 00 00       	mov    $0x4f,%ecx
   10d9c:	ff f1                	push   %rcx
   10d9e:	b9 0e 00 00 00       	mov    $0xe,%ecx
   10da3:	ff f1                	push   %rcx
   10da5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10dac <main+0x10dac>
   10dac:	ff f1                	push   %rcx
   10dae:	b9 05 00 00 00       	mov    $0x5,%ecx
   10db3:	ff f1                	push   %rcx
   10db5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10dbc <main+0x10dbc>
   10dbc:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   10dc1:	8f c1                	pop    %rcx
   10dc3:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   10dc8:	8f c1                	pop    %rcx
   10dca:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   10dcf:	8f c1                	pop    %rcx
   10dd1:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   10dd6:	8f c1                	pop    %rcx
   10dd8:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
   10ddc:	8f c1                	pop    %rcx
   10dde:	88 0c 24             	mov    %cl,(%rsp)
   10de1:	e8 6c f2 fe ff       	call   52 <main+0x52>
   10de6:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    }
    defer FileClose(file)

    text: char[] = { cast<char*>Allocate(filesize), filesize }
   10ded:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   10df1:	ff f1                	push   %rcx
   10df3:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   10dfa:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   10dfe:	48 89 0c 24          	mov    %rcx,(%rsp)
   10e02:	e8 94 6b ff ff       	call   799b <main+0x799b>
   10e07:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   10e0e:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
   10e13:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
   10e17:	8f c1                	pop    %rcx
   10e19:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    FileRead(file, text.ptr, text.len)
   10e1d:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   10e24:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   10e28:	ff f1                	push   %rcx
   10e2a:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
   10e31:	48 03 cd             	add    %rbp,%rcx
   10e34:	48 8b 11             	mov    (%rcx),%rdx
   10e37:	ff f2                	push   %rdx
   10e39:	48 c7 c1 d8 ff ff ff 	mov    $0xffffffffffffffd8,%rcx
   10e40:	48 03 cd             	add    %rbp,%rcx
   10e43:	ba 08 00 00 00       	mov    $0x8,%edx
   10e48:	48 03 ca             	add    %rdx,%rcx
   10e4b:	48 8b 11             	mov    (%rcx),%rdx
   10e4e:	48 8b ca             	mov    %rdx,%rcx
   10e51:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   10e55:	8f c1                	pop    %rcx
   10e57:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   10e5c:	8f c1                	pop    %rcx
   10e5e:	48 89 0c 24          	mov    %rcx,(%rsp)
   10e62:	e8 80 63 ff ff       	call   71e7 <main+0x71e7>
   10e67:	48 81 c4 18 00 00 00 	add    $0x18,%rsp

    vert_at := find("#shader vertex", text)
   10e6e:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10e75:	b9 0e 00 00 00       	mov    $0xe,%ecx
   10e7a:	ff f1                	push   %rcx
   10e7c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10e83 <main+0x10e83>
   10e83:	ff f1                	push   %rcx
   10e85:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   10e89:	ff f1                	push   %rcx
   10e8b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   10e8f:	ff f1                	push   %rcx
   10e91:	b9 00 00 00 00       	mov    $0x0,%ecx
   10e96:	88 4c 24 40          	mov    %cl,0x40(%rsp)
   10e9a:	8f c1                	pop    %rcx
   10e9c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   10ea1:	8f c1                	pop    %rcx
   10ea3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   10ea8:	8f c1                	pop    %rcx
   10eaa:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10eaf:	8f c1                	pop    %rcx
   10eb1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10eb6:	e8 db 33 ff ff       	call   4296 <main+0x4296>
   10ebb:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
   10ec2:	8b 4c 24 c0          	mov    -0x40(%rsp),%ecx
   10ec6:	48 63 c9             	movslq %ecx,%rcx
   10ec9:	89 4d d0             	mov    %ecx,-0x30(%rbp)
    Assert(vert_at != -1)
   10ecc:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10ed3:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   10ed6:	ff f1                	push   %rcx
   10ed8:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   10edd:	8f c2                	pop    %rdx
   10edf:	3b d1                	cmp    %ecx,%edx
   10ee1:	40 0f 95 c2          	rex setne %dl
   10ee5:	48 0f b6 d2          	movzbq %dl,%rdx
   10ee9:	ff f2                	push   %rdx
   10eeb:	b9 57 00 00 00       	mov    $0x57,%ecx
   10ef0:	ff f1                	push   %rcx
   10ef2:	b9 0e 00 00 00       	mov    $0xe,%ecx
   10ef7:	ff f1                	push   %rcx
   10ef9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10f00 <main+0x10f00>
   10f00:	ff f1                	push   %rcx
   10f02:	b9 0b 00 00 00       	mov    $0xb,%ecx
   10f07:	ff f1                	push   %rcx
   10f09:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10f10 <main+0x10f10>
   10f10:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   10f15:	8f c1                	pop    %rcx
   10f17:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   10f1c:	8f c1                	pop    %rcx
   10f1e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   10f23:	8f c1                	pop    %rcx
   10f25:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   10f2a:	8f c1                	pop    %rcx
   10f2c:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
   10f30:	8f c1                	pop    %rcx
   10f32:	88 0c 24             	mov    %cl,(%rsp)
   10f35:	e8 18 f1 fe ff       	call   52 <main+0x52>
   10f3a:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    frag_at := find("#shader fragment", substring(text, vert_at+14))
   10f41:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10f48:	b9 10 00 00 00       	mov    $0x10,%ecx
   10f4d:	ff f1                	push   %rcx
   10f4f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10f56 <main+0x10f56>
   10f56:	ff f1                	push   %rcx
   10f58:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   10f5f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   10f63:	ff f1                	push   %rcx
   10f65:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   10f69:	ff f1                	push   %rcx
   10f6b:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   10f6e:	ff f1                	push   %rcx
   10f70:	b9 0e 00 00 00       	mov    $0xe,%ecx
   10f75:	8f c2                	pop    %rdx
   10f77:	03 d1                	add    %ecx,%edx
   10f79:	ff f2                	push   %rdx
   10f7b:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   10f80:	89 4c 24 2c          	mov    %ecx,0x2c(%rsp)
   10f84:	8f c1                	pop    %rcx
   10f86:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   10f8a:	8f c1                	pop    %rcx
   10f8c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10f91:	8f c1                	pop    %rcx
   10f93:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10f98:	e8 79 36 ff ff       	call   4616 <main+0x4616>
   10f9d:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   10fa4:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
   10fa9:	48 8b c9             	mov    %rcx,%rcx
   10fac:	ff f1                	push   %rcx
   10fae:	48 8b 4c 24 c8       	mov    -0x38(%rsp),%rcx
   10fb3:	ff f1                	push   %rcx
   10fb5:	b9 00 00 00 00       	mov    $0x0,%ecx
   10fba:	88 4c 24 40          	mov    %cl,0x40(%rsp)
   10fbe:	8f c1                	pop    %rcx
   10fc0:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   10fc5:	8f c1                	pop    %rcx
   10fc7:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   10fcc:	8f c1                	pop    %rcx
   10fce:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10fd3:	8f c1                	pop    %rcx
   10fd5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   10fda:	e8 b7 32 ff ff       	call   4296 <main+0x4296>
   10fdf:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
   10fe6:	8b 4c 24 c0          	mov    -0x40(%rsp),%ecx
   10fea:	48 63 c9             	movslq %ecx,%rcx
   10fed:	89 4d c8             	mov    %ecx,-0x38(%rbp)
    Assert(frag_at != -1)
   10ff0:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   10ff7:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   10ffa:	ff f1                	push   %rcx
   10ffc:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   11001:	8f c2                	pop    %rdx
   11003:	3b d1                	cmp    %ecx,%edx
   11005:	40 0f 95 c2          	rex setne %dl
   11009:	48 0f b6 d2          	movzbq %dl,%rdx
   1100d:	ff f2                	push   %rdx
   1100f:	b9 59 00 00 00       	mov    $0x59,%ecx
   11014:	ff f1                	push   %rcx
   11016:	b9 0e 00 00 00       	mov    $0xe,%ecx
   1101b:	ff f1                	push   %rcx
   1101d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11024 <main+0x11024>
   11024:	ff f1                	push   %rcx
   11026:	b9 0b 00 00 00       	mov    $0xb,%ecx
   1102b:	ff f1                	push   %rcx
   1102d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11034 <main+0x11034>
   11034:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   11039:	8f c1                	pop    %rcx
   1103b:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
   11040:	8f c1                	pop    %rcx
   11042:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   11047:	8f c1                	pop    %rcx
   11049:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   1104e:	8f c1                	pop    %rcx
   11050:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
   11054:	8f c1                	pop    %rcx
   11056:	88 0c 24             	mov    %cl,(%rsp)
   11059:	e8 f4 ef fe ff       	call   52 <main+0x52>
   1105e:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
    frag_at += vert_at + 14
   11065:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   11068:	ff f1                	push   %rcx
   1106a:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   1106d:	ff f1                	push   %rcx
   1106f:	b9 0e 00 00 00       	mov    $0xe,%ecx
   11074:	8f c2                	pop    %rdx
   11076:	03 d1                	add    %ecx,%edx
   11078:	8f c1                	pop    %rcx
   1107a:	03 ca                	add    %edx,%ecx
   1107c:	ff f1                	push   %rcx
   1107e:	48 c7 c1 c8 ff ff ff 	mov    $0xffffffffffffffc8,%rcx
   11085:	48 03 cd             	add    %rbp,%rcx
   11088:	8f c2                	pop    %rdx
   1108a:	89 11                	mov    %edx,(%rcx)


    vertex_text := substring(text, vert_at + 14, frag_at)
   1108c:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   11093:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   11097:	ff f1                	push   %rcx
   11099:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   1109d:	ff f1                	push   %rcx
   1109f:	8b 4d d0             	mov    -0x30(%rbp),%ecx
   110a2:	ff f1                	push   %rcx
   110a4:	b9 0e 00 00 00       	mov    $0xe,%ecx
   110a9:	8f c2                	pop    %rdx
   110ab:	03 d1                	add    %ecx,%edx
   110ad:	ff f2                	push   %rdx
   110af:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   110b2:	89 4c 24 2c          	mov    %ecx,0x2c(%rsp)
   110b6:	8f c1                	pop    %rcx
   110b8:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   110bc:	8f c1                	pop    %rcx
   110be:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   110c3:	8f c1                	pop    %rcx
   110c5:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   110ca:	e8 47 35 ff ff       	call   4616 <main+0x4616>
   110cf:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   110d6:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   110db:	48 8b c9             	mov    %rcx,%rcx
   110de:	ff f1                	push   %rcx
   110e0:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   110e5:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
   110e9:	8f c1                	pop    %rcx
   110eb:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    vertex_text.ptr[vertex_text.len] = '\0'
   110ef:	b9 00 00 00 00       	mov    $0x0,%ecx
   110f4:	ff f1                	push   %rcx
   110f6:	48 c7 c1 b8 ff ff ff 	mov    $0xffffffffffffffb8,%rcx
   110fd:	48 03 cd             	add    %rbp,%rcx
   11100:	ff f1                	push   %rcx
   11102:	48 c7 c1 b8 ff ff ff 	mov    $0xffffffffffffffb8,%rcx
   11109:	48 03 cd             	add    %rbp,%rcx
   1110c:	ba 08 00 00 00       	mov    $0x8,%edx
   11111:	48 03 ca             	add    %rdx,%rcx
   11114:	48 8b 11             	mov    (%rcx),%rdx
   11117:	8f c1                	pop    %rcx
   11119:	48 8b 19             	mov    (%rcx),%rbx
   1111c:	48 03 da             	add    %rdx,%rbx
   1111f:	8f c1                	pop    %rcx
   11121:	88 0b                	mov    %cl,(%rbx)
    fragment_text := substring(text, frag_at + 16)
   11123:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   1112a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
   1112e:	ff f1                	push   %rcx
   11130:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
   11134:	ff f1                	push   %rcx
   11136:	8b 4d c8             	mov    -0x38(%rbp),%ecx
   11139:	ff f1                	push   %rcx
   1113b:	b9 10 00 00 00       	mov    $0x10,%ecx
   11140:	8f c2                	pop    %rdx
   11142:	03 d1                	add    %ecx,%edx
   11144:	ff f2                	push   %rdx
   11146:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   1114b:	89 4c 24 2c          	mov    %ecx,0x2c(%rsp)
   1114f:	8f c1                	pop    %rcx
   11151:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   11155:	8f c1                	pop    %rcx
   11157:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1115c:	8f c1                	pop    %rcx
   1115e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   11163:	e8 ae 34 ff ff       	call   4616 <main+0x4616>
   11168:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   1116f:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   11174:	48 8b c9             	mov    %rcx,%rcx
   11177:	ff f1                	push   %rcx
   11179:	48 8b 4c 24 d0       	mov    -0x30(%rsp),%rcx
   1117e:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
   11182:	8f c1                	pop    %rcx
   11184:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    fragment_text.ptr[fragment_text.len] = '\0'
   11188:	b9 00 00 00 00       	mov    $0x0,%ecx
   1118d:	ff f1                	push   %rcx
   1118f:	48 c7 c1 a8 ff ff ff 	mov    $0xffffffffffffffa8,%rcx
   11196:	48 03 cd             	add    %rbp,%rcx
   11199:	ff f1                	push   %rcx
   1119b:	48 c7 c1 a8 ff ff ff 	mov    $0xffffffffffffffa8,%rcx
   111a2:	48 03 cd             	add    %rbp,%rcx
   111a5:	ba 08 00 00 00       	mov    $0x8,%edx
   111aa:	48 03 ca             	add    %rdx,%rcx
   111ad:	48 8b 11             	mov    (%rcx),%rdx
   111b0:	8f c1                	pop    %rcx
   111b2:	48 8b 19             	mov    (%rcx),%rbx
   111b5:	48 03 da             	add    %rdx,%rbx
   111b8:	8f c1                	pop    %rcx
   111ba:	88 0b                	mov    %cl,(%rbx)
    // log(vertex_text)
    // log("#################")
    // log(fragment_text)
    // log("#################")

    shader := CreateShaderProgram(vertex_text, fragment_text)
   111bc:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   111c3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
   111c7:	ff f1                	push   %rcx
   111c9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
   111cd:	ff f1                	push   %rcx
   111cf:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
   111d3:	ff f1                	push   %rcx
   111d5:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
   111d9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   111de:	8f c1                	pop    %rcx
   111e0:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   111e5:	8f c1                	pop    %rcx
   111e7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   111ec:	8f c1                	pop    %rcx
   111ee:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   111f3:	e8 35 cc ff ff       	call   de2d <main+0xde2d>
   111f8:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
   111ff:	8b 4c 24 c0          	mov    -0x40(%rsp),%ecx
   11203:	8b c9                	mov    %ecx,%ecx
   11205:	89 4d a0             	mov    %ecx,-0x60(%rbp)
    defer FileClose(file)
   11208:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1120f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
   11213:	48 89 0c 24          	mov    %rcx,(%rsp)
   11217:	e8 a5 60 ff ff       	call   72c1 <main+0x72c1>
   1121c:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
    return shader
   11223:	8b 4d a0             	mov    -0x60(%rbp),%ecx
   11226:	8b d1                	mov    %ecx,%edx
   11228:	89 55 f8             	mov    %edx,-0x8(%rbp)
   1122b:	48 81 c4 68 00 00 00 	add    $0x68,%rsp
   11232:	8f c5                	pop    %rbp
   11234:	c3                   	ret
   11235:	48 81 c4 68 00 00 00 	add    $0x68,%rsp
   1123c:	8f c5                	pop    %rbp
   1123e:	c3                   	ret
    vao: VertexArray;
    // vbo: VertexBuffer;
    // ibo: IndexBuffer;
}

fn LoadCubeModel() -> Model {
   1123f:	ff f5                	push   %rbp
   11241:	48 8b ec             	mov    %rsp,%rbp
   11244:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
    model: Model
   1124b:	b9 24 00 00 00       	mov    $0x24,%ecx
   11250:	48 ba b0 ff ff ff ff 	movabs $0xffffffffffffffb0,%rdx
   11257:	ff ff ff 
   1125a:	48 03 d5             	add    %rbp,%rdx
   1125d:	48 83 c2 00          	add    $0x0,%rdx
   11261:	ff f2                	push   %rdx
   11263:	ff f1                	push   %rcx
   11265:	48 01 d1             	add    %rdx,%rcx
   11268:	48 3b ca             	cmp    %rdx,%rcx
   1126b:	74 0c                	je     11279 <main+0x11279>
   1126d:	c7 02 00 00 00 00    	movl   $0x0,(%rdx)
   11273:	48 83 c2 04          	add    $0x4,%rdx
   11277:	eb ef                	jmp    11268 <main+0x11268>
   11279:	8f c1                	pop    %rcx
   1127b:	8f c2                	pop    %rdx
   1127d:	33 c9                	xor    %ecx,%ecx
   1127f:	89 4d ce             	mov    %ecx,-0x32(%rbp)
   11282:	33 c9                	xor    %ecx,%ecx
   11284:	89 4d ca             	mov    %ecx,-0x36(%rbp)
   11287:	b9 10 00 00 00       	mov    $0x10,%ecx
   1128c:	48 ba ba ff ff ff ff 	movabs $0xffffffffffffffba,%rdx
   11293:	ff ff ff 
   11296:	48 03 d5             	add    %rbp,%rdx
   11299:	48 83 c2 00          	add    $0x0,%rdx
   1129d:	ff f2                	push   %rdx
   1129f:	ff f1                	push   %rcx
   112a1:	48 01 d1             	add    %rdx,%rcx
   112a4:	48 3b ca             	cmp    %rdx,%rcx
   112a7:	74 0d                	je     112b6 <main+0x112b6>
   112a9:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
   112b0:	48 83 c2 08          	add    $0x8,%rdx
   112b4:	eb ee                	jmp    112a4 <main+0x112a4>
   112b6:	8f c1                	pop    %rcx
   112b8:	8f c2                	pop    %rdx

    vert: f32[]{
   112ba:	b9 20 01 00 00       	mov    $0x120,%ecx
   112bf:	48 ba 90 fe ff ff ff 	movabs $0xfffffffffffffe90,%rdx
   112c6:	ff ff ff 
   112c9:	48 03 d5             	add    %rbp,%rdx
   112cc:	48 83 c2 00          	add    $0x0,%rdx
   112d0:	ff f2                	push   %rdx
   112d2:	ff f1                	push   %rcx
   112d4:	48 01 d1             	add    %rdx,%rcx
   112d7:	48 3b ca             	cmp    %rdx,%rcx
   112da:	74 0d                	je     112e9 <main+0x112e9>
   112dc:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
   112e3:	48 83 c2 08          	add    $0x8,%rdx
   112e7:	eb ee                	jmp    112d7 <main+0x112d7>
   112e9:	8f c1                	pop    %rcx
   112eb:	8f c2                	pop    %rdx
   112ed:	b9 48 00 00 00       	mov    $0x48,%ecx
   112f2:	ff f1                	push   %rcx
   112f4:	48 c7 c1 90 fe ff ff 	mov    $0xfffffffffffffe90,%rcx
   112fb:	48 03 cd             	add    %rbp,%rcx
   112fe:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
   11305:	8f c1                	pop    %rcx
   11307:	48 89 8d 88 fe ff ff 	mov    %rcx,-0x178(%rbp)
   1130e:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11313:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
   11319:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1131e:	89 8d 94 fe ff ff    	mov    %ecx,-0x16c(%rbp)
   11324:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11329:	89 8d 98 fe ff ff    	mov    %ecx,-0x168(%rbp)
   1132f:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11334:	89 8d 9c fe ff ff    	mov    %ecx,-0x164(%rbp)
   1133a:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1133f:	89 8d a0 fe ff ff    	mov    %ecx,-0x160(%rbp)
   11345:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1134a:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
   11350:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11355:	89 8d a8 fe ff ff    	mov    %ecx,-0x158(%rbp)
   1135b:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11360:	89 8d ac fe ff ff    	mov    %ecx,-0x154(%rbp)
   11366:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1136b:	89 8d b0 fe ff ff    	mov    %ecx,-0x150(%rbp)
   11371:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11376:	89 8d b4 fe ff ff    	mov    %ecx,-0x14c(%rbp)
   1137c:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11381:	89 8d b8 fe ff ff    	mov    %ecx,-0x148(%rbp)
   11387:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1138c:	89 8d bc fe ff ff    	mov    %ecx,-0x144(%rbp)
   11392:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11397:	89 8d c0 fe ff ff    	mov    %ecx,-0x140(%rbp)
   1139d:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113a2:	89 8d c4 fe ff ff    	mov    %ecx,-0x13c(%rbp)
   113a8:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113ad:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
   113b3:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113b8:	89 8d cc fe ff ff    	mov    %ecx,-0x134(%rbp)
   113be:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113c3:	89 8d d0 fe ff ff    	mov    %ecx,-0x130(%rbp)
   113c9:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113ce:	89 8d d4 fe ff ff    	mov    %ecx,-0x12c(%rbp)
   113d4:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113d9:	89 8d d8 fe ff ff    	mov    %ecx,-0x128(%rbp)
   113df:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   113e4:	89 8d dc fe ff ff    	mov    %ecx,-0x124(%rbp)
   113ea:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   113ef:	89 8d e0 fe ff ff    	mov    %ecx,-0x120(%rbp)
   113f5:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   113fa:	89 8d e4 fe ff ff    	mov    %ecx,-0x11c(%rbp)
   11400:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11405:	89 8d e8 fe ff ff    	mov    %ecx,-0x118(%rbp)
   1140b:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11410:	89 8d ec fe ff ff    	mov    %ecx,-0x114(%rbp)
   11416:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1141b:	89 8d f0 fe ff ff    	mov    %ecx,-0x110(%rbp)
   11421:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11426:	89 8d f4 fe ff ff    	mov    %ecx,-0x10c(%rbp)
   1142c:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11431:	89 8d f8 fe ff ff    	mov    %ecx,-0x108(%rbp)
   11437:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1143c:	89 8d fc fe ff ff    	mov    %ecx,-0x104(%rbp)
   11442:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11447:	89 8d 00 ff ff ff    	mov    %ecx,-0x100(%rbp)
   1144d:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11452:	89 8d 04 ff ff ff    	mov    %ecx,-0xfc(%rbp)
   11458:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1145d:	89 8d 08 ff ff ff    	mov    %ecx,-0xf8(%rbp)
   11463:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11468:	89 8d 0c ff ff ff    	mov    %ecx,-0xf4(%rbp)
   1146e:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11473:	89 8d 10 ff ff ff    	mov    %ecx,-0xf0(%rbp)
   11479:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1147e:	89 8d 14 ff ff ff    	mov    %ecx,-0xec(%rbp)
   11484:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11489:	89 8d 18 ff ff ff    	mov    %ecx,-0xe8(%rbp)
   1148f:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11494:	89 8d 1c ff ff ff    	mov    %ecx,-0xe4(%rbp)
   1149a:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1149f:	89 8d 20 ff ff ff    	mov    %ecx,-0xe0(%rbp)
   114a5:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   114aa:	89 8d 24 ff ff ff    	mov    %ecx,-0xdc(%rbp)
   114b0:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   114b5:	89 8d 28 ff ff ff    	mov    %ecx,-0xd8(%rbp)
   114bb:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   114c0:	89 8d 2c ff ff ff    	mov    %ecx,-0xd4(%rbp)
   114c6:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   114cb:	89 8d 30 ff ff ff    	mov    %ecx,-0xd0(%rbp)
   114d1:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   114d6:	89 8d 34 ff ff ff    	mov    %ecx,-0xcc(%rbp)
   114dc:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   114e1:	89 8d 38 ff ff ff    	mov    %ecx,-0xc8(%rbp)
   114e7:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   114ec:	89 8d 3c ff ff ff    	mov    %ecx,-0xc4(%rbp)
   114f2:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   114f7:	89 8d 40 ff ff ff    	mov    %ecx,-0xc0(%rbp)
   114fd:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11502:	89 8d 44 ff ff ff    	mov    %ecx,-0xbc(%rbp)
   11508:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1150d:	89 8d 48 ff ff ff    	mov    %ecx,-0xb8(%rbp)
   11513:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11518:	89 8d 4c ff ff ff    	mov    %ecx,-0xb4(%rbp)
   1151e:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11523:	89 8d 50 ff ff ff    	mov    %ecx,-0xb0(%rbp)
   11529:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1152e:	89 8d 54 ff ff ff    	mov    %ecx,-0xac(%rbp)
   11534:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11539:	89 8d 58 ff ff ff    	mov    %ecx,-0xa8(%rbp)
   1153f:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11544:	89 8d 5c ff ff ff    	mov    %ecx,-0xa4(%rbp)
   1154a:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1154f:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%rbp)
   11555:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   1155a:	89 8d 64 ff ff ff    	mov    %ecx,-0x9c(%rbp)
   11560:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11565:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%rbp)
   1156b:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11570:	89 8d 6c ff ff ff    	mov    %ecx,-0x94(%rbp)
   11576:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1157b:	89 8d 70 ff ff ff    	mov    %ecx,-0x90(%rbp)
   11581:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   11586:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%rbp)
   1158c:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   11591:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%rbp)
   11597:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   1159c:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%rbp)
   115a2:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115a7:	89 4d 80             	mov    %ecx,-0x80(%rbp)
   115aa:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115af:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
   115b2:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115b7:	89 4d 88             	mov    %ecx,-0x78(%rbp)
   115ba:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   115bf:	89 4d 8c             	mov    %ecx,-0x74(%rbp)
   115c2:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115c7:	89 4d 90             	mov    %ecx,-0x70(%rbp)
   115ca:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115cf:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
   115d2:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   115d7:	89 4d 98             	mov    %ecx,-0x68(%rbp)
   115da:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115df:	89 4d 9c             	mov    %ecx,-0x64(%rbp)
   115e2:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   115e7:	89 4d a0             	mov    %ecx,-0x60(%rbp)
   115ea:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115ef:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
   115f2:	b9 00 00 00 bf       	mov    $0xbf000000,%ecx
   115f7:	89 4d a8             	mov    %ecx,-0x58(%rbp)
   115fa:	b9 00 00 00 3f       	mov    $0x3f000000,%ecx
   115ff:	89 4d ac             	mov    %ecx,-0x54(%rbp)
        0.5, -0.5, -0.5,
        0.5, -0.5,  0.5,
        -0.5, -0.5,  0.5,
    }

    indices: i32[]{
   11602:	b9 90 00 00 00       	mov    $0x90,%ecx
   11607:	48 ba f0 fd ff ff ff 	movabs $0xfffffffffffffdf0,%rdx
   1160e:	ff ff ff 
   11611:	48 03 d5             	add    %rbp,%rdx
   11614:	48 83 c2 00          	add    $0x0,%rdx
   11618:	ff f2                	push   %rdx
   1161a:	ff f1                	push   %rcx
   1161c:	48 01 d1             	add    %rdx,%rcx
   1161f:	48 3b ca             	cmp    %rdx,%rcx
   11622:	74 0d                	je     11631 <main+0x11631>
   11624:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
   1162b:	48 83 c2 08          	add    $0x8,%rdx
   1162f:	eb ee                	jmp    1161f <main+0x1161f>
   11631:	8f c1                	pop    %rcx
   11633:	8f c2                	pop    %rdx
   11635:	b9 24 00 00 00       	mov    $0x24,%ecx
   1163a:	ff f1                	push   %rcx
   1163c:	48 c7 c1 f0 fd ff ff 	mov    $0xfffffffffffffdf0,%rcx
   11643:	48 03 cd             	add    %rbp,%rcx
   11646:	48 89 8d e0 fd ff ff 	mov    %rcx,-0x220(%rbp)
   1164d:	8f c1                	pop    %rcx
   1164f:	48 89 8d e8 fd ff ff 	mov    %rcx,-0x218(%rbp)
   11656:	b9 00 00 00 00       	mov    $0x0,%ecx
   1165b:	89 8d f0 fd ff ff    	mov    %ecx,-0x210(%rbp)
   11661:	b9 01 00 00 00       	mov    $0x1,%ecx
   11666:	89 8d f4 fd ff ff    	mov    %ecx,-0x20c(%rbp)
   1166c:	b9 02 00 00 00       	mov    $0x2,%ecx
   11671:	89 8d f8 fd ff ff    	mov    %ecx,-0x208(%rbp)
   11677:	b9 02 00 00 00       	mov    $0x2,%ecx
   1167c:	89 8d fc fd ff ff    	mov    %ecx,-0x204(%rbp)
   11682:	b9 03 00 00 00       	mov    $0x3,%ecx
   11687:	89 8d 00 fe ff ff    	mov    %ecx,-0x200(%rbp)
   1168d:	b9 00 00 00 00       	mov    $0x0,%ecx
   11692:	89 8d 04 fe ff ff    	mov    %ecx,-0x1fc(%rbp)
   11698:	b9 04 00 00 00       	mov    $0x4,%ecx
   1169d:	89 8d 08 fe ff ff    	mov    %ecx,-0x1f8(%rbp)
   116a3:	b9 05 00 00 00       	mov    $0x5,%ecx
   116a8:	89 8d 0c fe ff ff    	mov    %ecx,-0x1f4(%rbp)
   116ae:	b9 06 00 00 00       	mov    $0x6,%ecx
   116b3:	89 8d 10 fe ff ff    	mov    %ecx,-0x1f0(%rbp)
   116b9:	b9 06 00 00 00       	mov    $0x6,%ecx
   116be:	89 8d 14 fe ff ff    	mov    %ecx,-0x1ec(%rbp)
   116c4:	b9 07 00 00 00       	mov    $0x7,%ecx
   116c9:	89 8d 18 fe ff ff    	mov    %ecx,-0x1e8(%rbp)
   116cf:	b9 04 00 00 00       	mov    $0x4,%ecx
   116d4:	89 8d 1c fe ff ff    	mov    %ecx,-0x1e4(%rbp)
   116da:	b9 08 00 00 00       	mov    $0x8,%ecx
   116df:	89 8d 20 fe ff ff    	mov    %ecx,-0x1e0(%rbp)
   116e5:	b9 09 00 00 00       	mov    $0x9,%ecx
   116ea:	89 8d 24 fe ff ff    	mov    %ecx,-0x1dc(%rbp)
   116f0:	b9 0a 00 00 00       	mov    $0xa,%ecx
   116f5:	89 8d 28 fe ff ff    	mov    %ecx,-0x1d8(%rbp)
   116fb:	b9 0a 00 00 00       	mov    $0xa,%ecx
   11700:	89 8d 2c fe ff ff    	mov    %ecx,-0x1d4(%rbp)
   11706:	b9 0b 00 00 00       	mov    $0xb,%ecx
   1170b:	89 8d 30 fe ff ff    	mov    %ecx,-0x1d0(%rbp)
   11711:	b9 08 00 00 00       	mov    $0x8,%ecx
   11716:	89 8d 34 fe ff ff    	mov    %ecx,-0x1cc(%rbp)
   1171c:	b9 0c 00 00 00       	mov    $0xc,%ecx
   11721:	89 8d 38 fe ff ff    	mov    %ecx,-0x1c8(%rbp)
   11727:	b9 0d 00 00 00       	mov    $0xd,%ecx
   1172c:	89 8d 3c fe ff ff    	mov    %ecx,-0x1c4(%rbp)
   11732:	b9 0e 00 00 00       	mov    $0xe,%ecx
   11737:	89 8d 40 fe ff ff    	mov    %ecx,-0x1c0(%rbp)
   1173d:	b9 0e 00 00 00       	mov    $0xe,%ecx
   11742:	89 8d 44 fe ff ff    	mov    %ecx,-0x1bc(%rbp)
   11748:	b9 0f 00 00 00       	mov    $0xf,%ecx
   1174d:	89 8d 48 fe ff ff    	mov    %ecx,-0x1b8(%rbp)
   11753:	b9 0c 00 00 00       	mov    $0xc,%ecx
   11758:	89 8d 4c fe ff ff    	mov    %ecx,-0x1b4(%rbp)
   1175e:	b9 10 00 00 00       	mov    $0x10,%ecx
   11763:	89 8d 50 fe ff ff    	mov    %ecx,-0x1b0(%rbp)
   11769:	b9 11 00 00 00       	mov    $0x11,%ecx
   1176e:	89 8d 54 fe ff ff    	mov    %ecx,-0x1ac(%rbp)
   11774:	b9 12 00 00 00       	mov    $0x12,%ecx
   11779:	89 8d 58 fe ff ff    	mov    %ecx,-0x1a8(%rbp)
   1177f:	b9 12 00 00 00       	mov    $0x12,%ecx
   11784:	89 8d 5c fe ff ff    	mov    %ecx,-0x1a4(%rbp)
   1178a:	b9 13 00 00 00       	mov    $0x13,%ecx
   1178f:	89 8d 60 fe ff ff    	mov    %ecx,-0x1a0(%rbp)
   11795:	b9 10 00 00 00       	mov    $0x10,%ecx
   1179a:	89 8d 64 fe ff ff    	mov    %ecx,-0x19c(%rbp)
   117a0:	b9 14 00 00 00       	mov    $0x14,%ecx
   117a5:	89 8d 68 fe ff ff    	mov    %ecx,-0x198(%rbp)
   117ab:	b9 15 00 00 00       	mov    $0x15,%ecx
   117b0:	89 8d 6c fe ff ff    	mov    %ecx,-0x194(%rbp)
   117b6:	b9 16 00 00 00       	mov    $0x16,%ecx
   117bb:	89 8d 70 fe ff ff    	mov    %ecx,-0x190(%rbp)
   117c1:	b9 16 00 00 00       	mov    $0x16,%ecx
   117c6:	89 8d 74 fe ff ff    	mov    %ecx,-0x18c(%rbp)
   117cc:	b9 17 00 00 00       	mov    $0x17,%ecx
   117d1:	89 8d 78 fe ff ff    	mov    %ecx,-0x188(%rbp)
   117d7:	b9 14 00 00 00       	mov    $0x14,%ecx
   117dc:	89 8d 7c fe ff ff    	mov    %ecx,-0x184(%rbp)
    }

    // model.vbo.setData(sizeof(f32) * vert.len, &vert)
    // model.ibo.setData(sizeof(i32) * indices.len, &indices)

    model.vao.addAttribute(3, null)
   117e2:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   117e9:	48 c7 c1 b0 ff ff ff 	mov    $0xffffffffffffffb0,%rcx
   117f0:	48 03 cd             	add    %rbp,%rcx
   117f3:	ff f1                	push   %rcx
   117f5:	b9 03 00 00 00       	mov    $0x3,%ecx
   117fa:	ff f1                	push   %rcx
   117fc:	b9 00 00 00 00       	mov    $0x0,%ecx
   11801:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
   11806:	8f c1                	pop    %rcx
   11808:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   1180c:	8f c1                	pop    %rcx
   1180e:	48 89 0c 24          	mov    %rcx,(%rsp)
   11812:	e8 bb 08 00 00       	call   120d2 <main+0x120d2>
   11817:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
    // model.vao.addAttribute(3, &model.vbo)

    return model
   1181e:	66 8b 4d ce          	mov    -0x32(%rbp),%cx
   11822:	48 0f b7 c9          	movzwq %cx,%rcx
   11826:	ff f1                	push   %rcx
   11828:	66 8b 4d ca          	mov    -0x36(%rbp),%cx
   1182c:	48 0f b7 c9          	movzwq %cx,%rcx
   11830:	ff f1                	push   %rcx
   11832:	66 8b 4d ba          	mov    -0x46(%rbp),%cx
   11836:	48 0f b7 c9          	movzwq %cx,%rcx
   1183a:	ff f1                	push   %rcx
   1183c:	66 8b 4d b8          	mov    -0x48(%rbp),%cx
   11840:	48 0f b7 c9          	movzwq %cx,%rcx
   11844:	ff f1                	push   %rcx
   11846:	66 8b 4d b6          	mov    -0x4a(%rbp),%cx
   1184a:	48 0f b7 c9          	movzwq %cx,%rcx
   1184e:	ff f1                	push   %rcx
   11850:	66 8b 4d b4          	mov    -0x4c(%rbp),%cx
   11854:	48 0f b7 c9          	movzwq %cx,%rcx
   11858:	ff f1                	push   %rcx
   1185a:	8b 4d b0             	mov    -0x50(%rbp),%ecx
   1185d:	89 4d d8             	mov    %ecx,-0x28(%rbp)
   11860:	8f c1                	pop    %rcx
   11862:	66 89 4d dc          	mov    %cx,-0x24(%rbp)
   11866:	8f c1                	pop    %rcx
   11868:	66 89 4d de          	mov    %cx,-0x22(%rbp)
   1186c:	8f c1                	pop    %rcx
   1186e:	66 89 4d e0          	mov    %cx,-0x20(%rbp)
   11872:	8f c1                	pop    %rcx
   11874:	66 89 4d e2          	mov    %cx,-0x1e(%rbp)
   11878:	8f c1                	pop    %rcx
   1187a:	66 89 4d f2          	mov    %cx,-0xe(%rbp)
   1187e:	8f c1                	pop    %rcx
   11880:	66 89 4d f6          	mov    %cx,-0xa(%rbp)
   11884:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
   1188b:	8f c5                	pop    %rbp
   1188d:	c3                   	ret
    fn setup(assets_path: char[]) {
   1188e:	ff f5                	push   %rbp
   11890:	48 8b ec             	mov    %rsp,%rbp
   11893:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
        tmp: StringBuilder
   1189a:	b9 10 00 00 00       	mov    $0x10,%ecx
   1189f:	48 ba f0 ff ff ff ff 	movabs $0xfffffffffffffff0,%rdx
   118a6:	ff ff ff 
   118a9:	48 03 d5             	add    %rbp,%rdx
   118ac:	48 83 c2 00          	add    $0x0,%rdx
   118b0:	ff f2                	push   %rdx
   118b2:	ff f1                	push   %rcx
   118b4:	48 01 d1             	add    %rdx,%rcx
   118b7:	48 3b ca             	cmp    %rdx,%rcx
   118ba:	74 0d                	je     118c9 <main+0x118c9>
   118bc:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
   118c3:	48 83 c2 08          	add    $0x8,%rdx
   118c7:	eb ee                	jmp    118b7 <main+0x118b7>
   118c9:	8f c1                	pop    %rcx
   118cb:	8f c2                	pop    %rdx
            concat(tmp, assets_path, "/shaders/base.glsl")
   118cd:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   118d4:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   118db:	48 03 cd             	add    %rbp,%rcx
   118de:	ff f1                	push   %rcx
   118e0:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
   118e4:	48 8b c9             	mov    %rcx,%rcx
   118e7:	ff f1                	push   %rcx
   118e9:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
   118ed:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   118f2:	8f c1                	pop    %rcx
   118f4:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   118f9:	8f c1                	pop    %rcx
   118fb:	48 89 0c 24          	mov    %rcx,(%rsp)
   118ff:	e8 ec 2f ff ff       	call   48f0 <main+0x48f0>
   11904:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   1190b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11912:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   11919:	48 03 cd             	add    %rbp,%rcx
   1191c:	ff f1                	push   %rcx
   1191e:	b9 12 00 00 00       	mov    $0x12,%ecx
   11923:	ff f1                	push   %rcx
   11925:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1192c <main+0x1192c>
   1192c:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   11931:	8f c1                	pop    %rcx
   11933:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
   11938:	8f c1                	pop    %rcx
   1193a:	48 89 0c 24          	mov    %rcx,(%rsp)
   1193e:	e8 ad 2f ff ff       	call   48f0 <main+0x48f0>
   11943:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
            base_shader = LoadShader(tmp)
   1194a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11951:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11958:	8b 4d fc             	mov    -0x4(%rbp),%ecx
   1195b:	ff f1                	push   %rcx
   1195d:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   11960:	ff f1                	push   %rcx
   11962:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
   11966:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   1196b:	8f c1                	pop    %rcx
   1196d:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   11971:	8f c1                	pop    %rcx
   11973:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
   11977:	e8 ca 28 ff ff       	call   4246 <main+0x4246>
   1197c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11983:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
   11988:	48 8b c9             	mov    %rcx,%rcx
   1198b:	ff f1                	push   %rcx
   1198d:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
   11992:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   11997:	8f c1                	pop    %rcx
   11999:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1199e:	e8 f1 f2 ff ff       	call   10c94 <main+0x10c94>
   119a3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   119aa:	8b 4c 24 d8          	mov    -0x28(%rsp),%ecx
   119ae:	48 63 c9             	movslq %ecx,%rcx
   119b1:	ff f1                	push   %rcx
   119b3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   119b7:	48 8b c9             	mov    %rcx,%rcx
   119ba:	ba 00 00 00 00       	mov    $0x0,%edx
   119bf:	48 03 ca             	add    %rdx,%rcx
   119c2:	8f c2                	pop    %rdx
   119c4:	89 11                	mov    %edx,(%rcx)
        proj = perspective(100*3.145/180, 16/9.0, 0.1, 400)
   119c6:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   119cd:	b9 64 00 00 00       	mov    $0x64,%ecx
   119d2:	ff f1                	push   %rcx
   119d4:	b9 ae 47 49 40       	mov    $0x404947ae,%ecx
   119d9:	ff f1                	push   %rcx
   119db:	b9 b4 00 00 00       	mov    $0xb4,%ecx
   119e0:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   119e5:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   119ec:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   119f0:	f3 0f 5e c1          	divss  %xmm1,%xmm0
   119f4:	8f c1                	pop    %rcx
   119f6:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   119fa:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
   119fe:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   11a05:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   11a0a:	b9 10 00 00 00       	mov    $0x10,%ecx
   11a0f:	ff f1                	push   %rcx
   11a11:	c7 44 24 f8 00 00 10 	movl   $0x41100000,-0x8(%rsp)
   11a18:	41 
   11a19:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
   11a1f:	8f c1                	pop    %rcx
   11a21:	f3 0f 2a c9          	cvtsi2ss %ecx,%xmm1
   11a25:	f3 0f 5e c8          	divss  %xmm0,%xmm1
   11a29:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   11a30:	f3 0f 11 0c 24       	movss  %xmm1,(%rsp)
   11a35:	b9 cd cc cc 3d       	mov    $0x3dcccccd,%ecx
   11a3a:	ff f1                	push   %rcx
   11a3c:	b9 90 01 00 00       	mov    $0x190,%ecx
   11a41:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
   11a45:	f3 0f 11 44 24 24    	movss  %xmm0,0x24(%rsp)
   11a4b:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11a50:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11a57:	f3 0f 11 44 24 18    	movss  %xmm0,0x18(%rsp)
   11a5d:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11a62:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11a69:	f3 0f 11 44 24 0c    	movss  %xmm0,0xc(%rsp)
   11a6f:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11a74:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11a7b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   11a80:	e8 84 4f ff ff       	call   6a09 <main+0x6a09>
   11a85:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11a8c:	f3 0f 10 44 24 a0    	movss  -0x60(%rsp),%xmm0
   11a92:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   11a99:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   11a9e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11aa2:	48 8b c9             	mov    %rcx,%rcx
   11aa5:	ba 04 00 00 00       	mov    $0x4,%edx
   11aaa:	48 03 ca             	add    %rdx,%rcx
   11aad:	8f c2                	pop    %rdx
   11aaf:	89 11                	mov    %edx,(%rcx)
        loc_transform = glGetUniformLocation(base_shader, "uTransform".ptr)
   11ab1:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11ab8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11abc:	48 8b c9             	mov    %rcx,%rcx
   11abf:	8b 11                	mov    (%rcx),%edx
   11ac1:	8b ca                	mov    %edx,%ecx
   11ac3:	ff f1                	push   %rcx
   11ac5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11acc <main+0x11acc>
   11acc:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   11ad1:	8f c1                	pop    %rcx
   11ad3:	89 0c 24             	mov    %ecx,(%rsp)
   11ad6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11add <main+0x11add>
   11add:	48 8b 11             	mov    (%rcx),%rdx
   11ae0:	4c 8b d2             	mov    %rdx,%r10
   11ae3:	33 c9                	xor    %ecx,%ecx
   11ae5:	8b 0c 24             	mov    (%rsp),%ecx
   11ae8:	33 d2                	xor    %edx,%edx
   11aea:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   11aef:	41 ff d2             	call   *%r10
   11af2:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   11af9:	8b c8                	mov    %eax,%ecx
   11afb:	ff f1                	push   %rcx
   11afd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11b01:	48 8b c9             	mov    %rcx,%rcx
   11b04:	ba 44 00 00 00       	mov    $0x44,%edx
   11b09:	48 03 ca             	add    %rdx,%rcx
   11b0c:	8f c2                	pop    %rdx
   11b0e:	8b da                	mov    %edx,%ebx
   11b10:	89 19                	mov    %ebx,(%rcx)
        loc_proj = glGetUniformLocation(base_shader, "uProj".ptr)
   11b12:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11b19:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11b1d:	48 8b c9             	mov    %rcx,%rcx
   11b20:	8b 11                	mov    (%rcx),%edx
   11b22:	8b ca                	mov    %edx,%ecx
   11b24:	ff f1                	push   %rcx
   11b26:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11b2d <main+0x11b2d>
   11b2d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   11b32:	8f c1                	pop    %rcx
   11b34:	89 0c 24             	mov    %ecx,(%rsp)
   11b37:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11b3e <main+0x11b3e>
   11b3e:	48 8b 11             	mov    (%rcx),%rdx
   11b41:	4c 8b d2             	mov    %rdx,%r10
   11b44:	33 c9                	xor    %ecx,%ecx
   11b46:	8b 0c 24             	mov    (%rsp),%ecx
   11b49:	33 d2                	xor    %edx,%edx
   11b4b:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   11b50:	41 ff d2             	call   *%r10
   11b53:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   11b5a:	8b c8                	mov    %eax,%ecx
   11b5c:	ff f1                	push   %rcx
   11b5e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11b62:	48 8b c9             	mov    %rcx,%rcx
   11b65:	ba 48 00 00 00       	mov    $0x48,%edx
   11b6a:	48 03 ca             	add    %rdx,%rcx
   11b6d:	8f c2                	pop    %rdx
   11b6f:	8b da                	mov    %edx,%ebx
   11b71:	89 19                	mov    %ebx,(%rcx)
        model = LoadCubeModel()
   11b73:	e8 c7 f6 ff ff       	call   1123f <main+0x1123f>
   11b78:	66 8b 4c 24 e6       	mov    -0x1a(%rsp),%cx
   11b7d:	48 0f bf c9          	movswq %cx,%rcx
   11b81:	ff f1                	push   %rcx
   11b83:	66 8b 4c 24 ea       	mov    -0x16(%rsp),%cx
   11b88:	48 0f bf c9          	movswq %cx,%rcx
   11b8c:	ff f1                	push   %rcx
   11b8e:	66 8b 4c 24 e2       	mov    -0x1e(%rsp),%cx
   11b93:	48 0f bf c9          	movswq %cx,%rcx
   11b97:	ff f1                	push   %rcx
   11b99:	66 8b 4c 24 e8       	mov    -0x18(%rsp),%cx
   11b9e:	48 0f bf c9          	movswq %cx,%rcx
   11ba2:	ff f1                	push   %rcx
   11ba4:	66 8b 4c 24 ee       	mov    -0x12(%rsp),%cx
   11ba9:	48 0f bf c9          	movswq %cx,%rcx
   11bad:	ff f1                	push   %rcx
   11baf:	66 8b 4c 24 f4       	mov    -0xc(%rsp),%cx
   11bb4:	48 0f bf c9          	movswq %cx,%rcx
   11bb8:	ff f1                	push   %rcx
   11bba:	8b 4c 24 f8          	mov    -0x8(%rsp),%ecx
   11bbe:	8b c9                	mov    %ecx,%ecx
   11bc0:	ff f1                	push   %rcx
   11bc2:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11bc6:	48 8b c9             	mov    %rcx,%rcx
   11bc9:	ba 4c 00 00 00       	mov    $0x4c,%edx
   11bce:	48 03 ca             	add    %rdx,%rcx
   11bd1:	8f c2                	pop    %rdx
   11bd3:	89 11                	mov    %edx,(%rcx)
   11bd5:	8f c2                	pop    %rdx
   11bd7:	66 89 51 04          	mov    %dx,0x4(%rcx)
   11bdb:	8f c2                	pop    %rdx
   11bdd:	66 89 51 06          	mov    %dx,0x6(%rcx)
   11be1:	8f c2                	pop    %rdx
   11be3:	66 89 51 08          	mov    %dx,0x8(%rcx)
   11be7:	8f c2                	pop    %rdx
   11be9:	66 89 51 0a          	mov    %dx,0xa(%rcx)
   11bed:	8f c2                	pop    %rdx
   11bef:	66 89 51 1a          	mov    %dx,0x1a(%rcx)
   11bf3:	8f c2                	pop    %rdx
   11bf5:	66 89 51 1e          	mov    %dx,0x1e(%rcx)
        tmp.cleanup()
   11bf9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11c00:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   11c07:	48 03 cd             	add    %rbp,%rcx
   11c0a:	ff f1                	push   %rcx
   11c0c:	b9 01 00 00 00       	mov    $0x1,%ecx
   11c11:	88 4c 24 10          	mov    %cl,0x10(%rsp)
   11c15:	8f c1                	pop    %rcx
   11c17:	48 89 0c 24          	mov    %rcx,(%rsp)
   11c1b:	e8 a9 2b ff ff       	call   47c9 <main+0x47c9>
   11c20:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
        defer tmp.cleanup()
   11c27:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11c2e:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   11c35:	48 03 cd             	add    %rbp,%rcx
   11c38:	ff f1                	push   %rcx
   11c3a:	b9 01 00 00 00       	mov    $0x1,%ecx
   11c3f:	88 4c 24 10          	mov    %cl,0x10(%rsp)
   11c43:	8f c1                	pop    %rcx
   11c45:	48 89 0c 24          	mov    %rcx,(%rsp)
   11c49:	e8 7b 2b ff ff       	call   47c9 <main+0x47c9>
   11c4e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11c55:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11c5c:	8f c5                	pop    %rbp
   11c5e:	c3                   	ret
    fn render(state: GameState*) {
   11c5f:	ff f5                	push   %rbp
   11c61:	48 8b ec             	mov    %rsp,%rbp
   11c64:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
        glUseProgram(base_shader);
   11c6b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11c72:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11c76:	48 8b c9             	mov    %rcx,%rcx
   11c79:	8b 11                	mov    (%rcx),%edx
   11c7b:	8b ca                	mov    %edx,%ecx
   11c7d:	89 0c 24             	mov    %ecx,(%rsp)
   11c80:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11c87 <main+0x11c87>
   11c87:	48 8b 11             	mov    (%rcx),%rdx
   11c8a:	4c 8b d2             	mov    %rdx,%r10
   11c8d:	33 c9                	xor    %ecx,%ecx
   11c8f:	8b 0c 24             	mov    (%rsp),%ecx
   11c92:	41 ff d2             	call   *%r10
   11c95:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        glUniformMatrix4fv(loc_proj, 1, false, &proj)
   11c9c:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11ca3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11ca7:	48 8b c9             	mov    %rcx,%rcx
   11caa:	8b 51 48             	mov    0x48(%rcx),%edx
   11cad:	ff f2                	push   %rdx
   11caf:	b9 01 00 00 00       	mov    $0x1,%ecx
   11cb4:	ff f1                	push   %rcx
   11cb6:	b9 00 00 00 00       	mov    $0x0,%ecx
   11cbb:	ff f1                	push   %rcx
   11cbd:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11cc1:	48 8b c9             	mov    %rcx,%rcx
   11cc4:	ba 04 00 00 00       	mov    $0x4,%edx
   11cc9:	48 03 ca             	add    %rdx,%rcx
   11ccc:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
   11cd1:	8f c1                	pop    %rcx
   11cd3:	88 4c 24 20          	mov    %cl,0x20(%rsp)
   11cd7:	8f c1                	pop    %rcx
   11cd9:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   11cdd:	8f c1                	pop    %rcx
   11cdf:	89 0c 24             	mov    %ecx,(%rsp)
   11ce2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11ce9 <main+0x11ce9>
   11ce9:	48 8b 11             	mov    (%rcx),%rdx
   11cec:	4c 8b d2             	mov    %rdx,%r10
   11cef:	33 c9                	xor    %ecx,%ecx
   11cf1:	8b 0c 24             	mov    (%rsp),%ecx
   11cf4:	33 d2                	xor    %edx,%edx
   11cf6:	8b 54 24 08          	mov    0x8(%rsp),%edx
   11cfa:	45 33 c0             	xor    %r8d,%r8d
   11cfd:	4c 8a 44 24 10       	rex.WR mov 0x10(%rsp),%r8b
   11d02:	45 33 c9             	xor    %r9d,%r9d
   11d05:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   11d0a:	41 ff d2             	call   *%r10
   11d0d:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        for entity : state.entities {
   11d14:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11d1b:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   11d22:	48 03 cd             	add    %rbp,%rcx
   11d25:	48 8b 11             	mov    (%rcx),%rdx
   11d28:	b9 80 00 00 00       	mov    $0x80,%ecx
   11d2d:	48 03 d1             	add    %rcx,%rdx
   11d30:	ff f2                	push   %rdx
   11d32:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
   11d37:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   11d3b:	8f c1                	pop    %rcx
   11d3d:	48 89 0c 24          	mov    %rcx,(%rsp)
   11d41:	e8 55 42 ff ff       	call   5f9b <main+0x5f9b>
   11d46:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11d4d:	48 8b 4c 24 d8       	mov    -0x28(%rsp),%rcx
   11d52:	ff f1                	push   %rcx
   11d54:	8b 4c 24 dc          	mov    -0x24(%rsp),%ecx
   11d58:	48 63 c9             	movslq %ecx,%rcx
   11d5b:	ff f1                	push   %rcx
   11d5d:	8b 4c 24 e0          	mov    -0x20(%rsp),%ecx
   11d61:	48 63 c9             	movslq %ecx,%rcx
   11d64:	89 4d f0             	mov    %ecx,-0x10(%rbp)
   11d67:	8f c1                	pop    %rcx
   11d69:	89 4d f4             	mov    %ecx,-0xc(%rbp)
   11d6c:	8f c1                	pop    %rcx
   11d6e:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
   11d72:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11d79:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   11d80:	48 03 cd             	add    %rbp,%rcx
   11d83:	48 8b 11             	mov    (%rcx),%rdx
   11d86:	b9 80 00 00 00       	mov    $0x80,%ecx
   11d8b:	48 03 d1             	add    %rcx,%rdx
   11d8e:	ff f2                	push   %rdx
   11d90:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   11d97:	48 03 cd             	add    %rbp,%rcx
   11d9a:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   11d9f:	8f c1                	pop    %rcx
   11da1:	48 89 0c 24          	mov    %rcx,(%rsp)
   11da5:	e8 8d 42 ff ff       	call   6037 <main+0x6037>
   11daa:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11db1:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
   11db6:	48 0f b6 c9          	movzbq %cl,%rcx
   11dba:	48 83 f9 00          	cmp    $0x0,%rcx
   11dbe:	0f 84 42 01 00 00    	je     11f06 <main+0x11f06>
            mat := translate(mat4_identity(), entity.pos)
   11dc4:	48 81 ec 50 00 00 00 	sub    $0x50,%rsp
   11dcb:	e8 85 49 ff ff       	call   6755 <main+0x6755>
   11dd0:	f3 0f 10 44 24 b0    	movss  -0x50(%rsp),%xmm0
   11dd6:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   11ddd:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   11de2:	48 c7 c1 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rcx
   11de9:	48 03 cd             	add    %rbp,%rcx
   11dec:	48 8b 11             	mov    (%rcx),%rdx
   11def:	b9 04 00 00 00       	mov    $0x4,%ecx
   11df4:	48 03 d1             	add    %rcx,%rdx
   11df7:	8b 4a 08             	mov    0x8(%rdx),%ecx
   11dfa:	ff f1                	push   %rcx
   11dfc:	8b 4a 04             	mov    0x4(%rdx),%ecx
   11dff:	ff f1                	push   %rcx
   11e01:	f3 0f 10 02          	movss  (%rdx),%xmm0
   11e05:	f3 0f 11 44 24 58    	movss  %xmm0,0x58(%rsp)
   11e0b:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11e10:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11e17:	f3 0f 11 44 24 54    	movss  %xmm0,0x54(%rsp)
   11e1d:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11e22:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11e29:	f3 0f 11 44 24 50    	movss  %xmm0,0x50(%rsp)
   11e2f:	f3 0f 10 04 24       	movss  (%rsp),%xmm0
   11e34:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   11e3b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   11e40:	e8 76 4a ff ff       	call   68bb <main+0x68bb>
   11e45:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
   11e4c:	f3 0f 10 84 24 60 ff 	movss  -0xa0(%rsp),%xmm0
   11e53:	ff ff 
   11e55:	f3 0f 11 45 b0       	movss  %xmm0,-0x50(%rbp)
            glUniformMatrix4fv(loc_transform, 1, false, &mat)
   11e5a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11e61:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11e65:	48 8b c9             	mov    %rcx,%rcx
   11e68:	8b 51 44             	mov    0x44(%rcx),%edx
   11e6b:	ff f2                	push   %rdx
   11e6d:	b9 01 00 00 00       	mov    $0x1,%ecx
   11e72:	ff f1                	push   %rcx
   11e74:	b9 00 00 00 00       	mov    $0x0,%ecx
   11e79:	ff f1                	push   %rcx
   11e7b:	48 c7 c1 b0 ff ff ff 	mov    $0xffffffffffffffb0,%rcx
   11e82:	48 03 cd             	add    %rbp,%rcx
   11e85:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
   11e8a:	8f c1                	pop    %rcx
   11e8c:	88 4c 24 20          	mov    %cl,0x20(%rsp)
   11e90:	8f c1                	pop    %rcx
   11e92:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   11e96:	8f c1                	pop    %rcx
   11e98:	89 0c 24             	mov    %ecx,(%rsp)
   11e9b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11ea2 <main+0x11ea2>
   11ea2:	48 8b 11             	mov    (%rcx),%rdx
   11ea5:	4c 8b d2             	mov    %rdx,%r10
   11ea8:	33 c9                	xor    %ecx,%ecx
   11eaa:	8b 0c 24             	mov    (%rsp),%ecx
   11ead:	33 d2                	xor    %edx,%edx
   11eaf:	8b 54 24 08          	mov    0x8(%rsp),%edx
   11eb3:	45 33 c0             	xor    %r8d,%r8d
   11eb6:	4c 8a 44 24 10       	rex.WR mov 0x10(%rsp),%r8b
   11ebb:	45 33 c9             	xor    %r9d,%r9d
   11ebe:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   11ec3:	41 ff d2             	call   *%r10
   11ec6:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
            model.vao.draw(null)
   11ecd:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11ed4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11ed8:	48 8b c9             	mov    %rcx,%rcx
   11edb:	ba 4c 00 00 00       	mov    $0x4c,%edx
   11ee0:	48 03 ca             	add    %rdx,%rcx
   11ee3:	ff f1                	push   %rcx
   11ee5:	b9 00 00 00 00       	mov    $0x0,%ecx
   11eea:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   11eef:	8f c1                	pop    %rcx
   11ef1:	48 89 0c 24          	mov    %rcx,(%rsp)
   11ef5:	e8 56 0a 00 00       	call   12950 <main+0x12950>
   11efa:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11f01:	e9 6c fe ff ff       	jmp    11d72 <main+0x11d72>
        ProcessSleep(0.5)
   11f06:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11f0d:	c7 44 24 f8 00 00 00 	movl   $0x3f000000,-0x8(%rsp)
   11f14:	3f 
   11f15:	f3 0f 10 44 24 f8    	movss  -0x8(%rsp),%xmm0
   11f1b:	f3 0f 11 04 24       	movss  %xmm0,(%rsp)
   11f20:	e8 9a 54 ff ff       	call   73bf <main+0x73bf>
   11f25:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11f2c:	48 81 c4 50 00 00 00 	add    $0x50,%rsp
   11f33:	8f c5                	pop    %rbp
   11f35:	c3                   	ret
    fn bind() {
   11f36:	ff f5                	push   %rbp
   11f38:	48 8b ec             	mov    %rsp,%rbp
        glBindBuffer(GL_ARRAY_BUFFER, id)
   11f3b:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11f42:	b9 92 88 00 00       	mov    $0x8892,%ecx
   11f47:	8b d1                	mov    %ecx,%edx
   11f49:	ff f2                	push   %rdx
   11f4b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11f4f:	48 8b c9             	mov    %rcx,%rcx
   11f52:	8b 11                	mov    (%rcx),%edx
   11f54:	89 54 24 10          	mov    %edx,0x10(%rsp)
   11f58:	8f c1                	pop    %rcx
   11f5a:	89 0c 24             	mov    %ecx,(%rsp)
   11f5d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11f64 <main+0x11f64>
   11f64:	48 8b 11             	mov    (%rcx),%rdx
   11f67:	4c 8b d2             	mov    %rdx,%r10
   11f6a:	33 c9                	xor    %ecx,%ecx
   11f6c:	8b 0c 24             	mov    (%rsp),%ecx
   11f6f:	33 d2                	xor    %edx,%edx
   11f71:	8b 54 24 08          	mov    0x8(%rsp),%edx
   11f75:	41 ff d2             	call   *%r10
   11f78:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   11f7f:	8f c5                	pop    %rbp
   11f81:	c3                   	ret
    fn initialized() -> bool { return id != 0 }
   11f82:	ff f5                	push   %rbp
   11f84:	48 8b ec             	mov    %rsp,%rbp
   11f87:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   11f8e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11f92:	48 8b c9             	mov    %rcx,%rcx
   11f95:	8b 11                	mov    (%rcx),%edx
   11f97:	ff f2                	push   %rdx
   11f99:	b9 00 00 00 00       	mov    $0x0,%ecx
   11f9e:	8f c2                	pop    %rdx
   11fa0:	8b da                	mov    %edx,%ebx
   11fa2:	3b d9                	cmp    %ecx,%ebx
   11fa4:	40 0f 95 c3          	rex setne %bl
   11fa8:	48 0f b6 db          	movzbq %bl,%rbx
   11fac:	88 5d f8             	mov    %bl,-0x8(%rbp)
   11faf:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   11fb6:	8f c5                	pop    %rbp
   11fb8:	c3                   	ret
    fn bind() {
   11fb9:	ff f5                	push   %rbp
   11fbb:	48 8b ec             	mov    %rsp,%rbp
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, id)
   11fbe:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   11fc5:	b9 93 88 00 00       	mov    $0x8893,%ecx
   11fca:	8b d1                	mov    %ecx,%edx
   11fcc:	ff f2                	push   %rdx
   11fce:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   11fd2:	48 8b c9             	mov    %rcx,%rcx
   11fd5:	8b 11                	mov    (%rcx),%edx
   11fd7:	89 54 24 10          	mov    %edx,0x10(%rsp)
   11fdb:	8f c1                	pop    %rcx
   11fdd:	89 0c 24             	mov    %ecx,(%rsp)
   11fe0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11fe7 <main+0x11fe7>
   11fe7:	48 8b 11             	mov    (%rcx),%rdx
   11fea:	4c 8b d2             	mov    %rdx,%r10
   11fed:	33 c9                	xor    %ecx,%ecx
   11fef:	8b 0c 24             	mov    (%rsp),%ecx
   11ff2:	33 d2                	xor    %edx,%edx
   11ff4:	8b 54 24 08          	mov    0x8(%rsp),%edx
   11ff8:	41 ff d2             	call   *%r10
   11ffb:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   12002:	8f c5                	pop    %rbp
   12004:	c3                   	ret
    fn initialized() -> bool { return id != 0 }
   12005:	ff f5                	push   %rbp
   12007:	48 8b ec             	mov    %rsp,%rbp
   1200a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12011:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12015:	48 8b c9             	mov    %rcx,%rcx
   12018:	8b 11                	mov    (%rcx),%edx
   1201a:	ff f2                	push   %rdx
   1201c:	b9 00 00 00 00       	mov    $0x0,%ecx
   12021:	8f c2                	pop    %rdx
   12023:	8b da                	mov    %edx,%ebx
   12025:	3b d9                	cmp    %ecx,%ebx
   12027:	40 0f 95 c3          	rex setne %bl
   1202b:	48 0f b6 db          	movzbq %bl,%rbx
   1202f:	88 5d f8             	mov    %bl,-0x8(%rbp)
   12032:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12039:	8f c5                	pop    %rbp
   1203b:	c3                   	ret
    fn bind() {
   1203c:	ff f5                	push   %rbp
   1203e:	48 8b ec             	mov    %rsp,%rbp
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, id)
   12041:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   12048:	b9 93 88 00 00       	mov    $0x8893,%ecx
   1204d:	8b d1                	mov    %ecx,%edx
   1204f:	ff f2                	push   %rdx
   12051:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12055:	48 8b c9             	mov    %rcx,%rcx
   12058:	8b 11                	mov    (%rcx),%edx
   1205a:	89 54 24 10          	mov    %edx,0x10(%rsp)
   1205e:	8f c1                	pop    %rcx
   12060:	89 0c 24             	mov    %ecx,(%rsp)
   12063:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1206a <main+0x1206a>
   1206a:	48 8b 11             	mov    (%rcx),%rdx
   1206d:	4c 8b d2             	mov    %rdx,%r10
   12070:	33 c9                	xor    %ecx,%ecx
   12072:	8b 0c 24             	mov    (%rsp),%ecx
   12075:	33 d2                	xor    %edx,%edx
   12077:	8b 54 24 08          	mov    0x8(%rsp),%edx
   1207b:	41 ff d2             	call   *%r10
   1207e:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   12085:	8f c5                	pop    %rbp
   12087:	c3                   	ret
    fn unbind() {
   12088:	ff f5                	push   %rbp
   1208a:	48 8b ec             	mov    %rsp,%rbp
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)
   1208d:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   12094:	b9 93 88 00 00       	mov    $0x8893,%ecx
   12099:	8b d1                	mov    %ecx,%edx
   1209b:	ff f2                	push   %rdx
   1209d:	b9 00 00 00 00       	mov    $0x0,%ecx
   120a2:	8b d1                	mov    %ecx,%edx
   120a4:	89 54 24 10          	mov    %edx,0x10(%rsp)
   120a8:	8f c1                	pop    %rcx
   120aa:	89 0c 24             	mov    %ecx,(%rsp)
   120ad:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 120b4 <main+0x120b4>
   120b4:	48 8b 11             	mov    (%rcx),%rdx
   120b7:	4c 8b d2             	mov    %rdx,%r10
   120ba:	33 c9                	xor    %ecx,%ecx
   120bc:	8b 0c 24             	mov    (%rsp),%ecx
   120bf:	33 d2                	xor    %edx,%edx
   120c1:	8b 54 24 08          	mov    0x8(%rsp),%edx
   120c5:	41 ff d2             	call   *%r10
   120c8:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   120cf:	8f c5                	pop    %rbp
   120d1:	c3                   	ret
    fn addAttribute(floatCount: i32, buffer: VertexBuffer*) {
   120d2:	ff f5                	push   %rbp
   120d4:	48 8b ec             	mov    %rsp,%rbp
        addAttribute(floatCount, 0, buffer)
   120d7:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   120de:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   120e2:	48 8b c9             	mov    %rcx,%rcx
   120e5:	ff f1                	push   %rcx
   120e7:	8b 4d 18             	mov    0x18(%rbp),%ecx
   120ea:	48 63 c9             	movslq %ecx,%rcx
   120ed:	ff f1                	push   %rcx
   120ef:	b9 00 00 00 00       	mov    $0x0,%ecx
   120f4:	ff f1                	push   %rcx
   120f6:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
   120fa:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
   120ff:	8f c1                	pop    %rcx
   12101:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
   12105:	8f c1                	pop    %rcx
   12107:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   1210b:	8f c1                	pop    %rcx
   1210d:	48 89 0c 24          	mov    %rcx,(%rsp)
   12111:	e8 f5 01 00 00       	call   1230b <main+0x1230b>
   12116:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   1211d:	8f c5                	pop    %rbp
   1211f:	c3                   	ret
    fn addAttribute(floatCount: i32, divisor: i32) {
   12120:	ff f5                	push   %rbp
   12122:	48 8b ec             	mov    %rsp,%rbp
        if !id
   12125:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12129:	48 8b c9             	mov    %rcx,%rcx
   1212c:	8b 11                	mov    (%rcx),%edx
   1212e:	48 85 d2             	test   %rdx,%rdx
   12131:	40 0f 94 c2          	rex sete %dl
   12135:	48 0f b6 d2          	movzbq %dl,%rdx
   12139:	48 83 fa 00          	cmp    $0x0,%rdx
   1213d:	0f 84 4a 00 00 00    	je     1218d <main+0x1218d>
            glGenVertexArrays(1, &id)
   12143:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   1214a:	b9 01 00 00 00       	mov    $0x1,%ecx
   1214f:	ff f1                	push   %rcx
   12151:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12155:	48 8b c9             	mov    %rcx,%rcx
   12158:	ba 00 00 00 00       	mov    $0x0,%edx
   1215d:	48 03 ca             	add    %rdx,%rcx
   12160:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
   12165:	8f c1                	pop    %rcx
   12167:	89 0c 24             	mov    %ecx,(%rsp)
   1216a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12171 <main+0x12171>
   12171:	48 8b 11             	mov    (%rcx),%rdx
   12174:	4c 8b d2             	mov    %rdx,%r10
   12177:	33 c9                	xor    %ecx,%ecx
   12179:	8b 0c 24             	mov    (%rsp),%ecx
   1217c:	33 d2                	xor    %edx,%edx
   1217e:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
   12183:	41 ff d2             	call   *%r10
   12186:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
        if location == 8 {
   1218d:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12191:	48 8b c9             	mov    %rcx,%rcx
   12194:	66 8b 51 06          	mov    0x6(%rcx),%dx
   12198:	48 0f b7 d2          	movzwq %dx,%rdx
   1219c:	ff f2                	push   %rdx
   1219e:	b9 08 00 00 00       	mov    $0x8,%ecx
   121a3:	8f c2                	pop    %rdx
   121a5:	48 0f bf da          	movswq %dx,%rbx
   121a9:	3b d9                	cmp    %ecx,%ebx
   121ab:	40 0f 94 c3          	rex sete %bl
   121af:	48 0f b6 db          	movzbq %bl,%rbx
   121b3:	48 83 fb 00          	cmp    $0x0,%rbx
   121b7:	0f 84 4b 00 00 00    	je     12208 <main+0x12208>
            log("VertexArray::addAtribute limit of 8 locations")
   121bd:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   121c4:	b9 2d 00 00 00       	mov    $0x2d,%ecx
   121c9:	ff f1                	push   %rcx
   121cb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 121d2 <main+0x121d2>
   121d2:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   121d7:	8f c1                	pop    %rcx
   121d9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   121de:	e8 af 1e ff ff       	call   4092 <main+0x4092>
   121e3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   121ea:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   121f1:	b9 0a 00 00 00       	mov    $0xa,%ecx
   121f6:	88 0c 24             	mov    %cl,(%rsp)
   121f9:	e8 f3 1d ff ff       	call   3ff1 <main+0x3ff1>
   121fe:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
            return;
   12205:	8f c5                	pop    %rbp
   12207:	c3                   	ret
        locationSizes[totalLocation++] = floatCount + (divisor << 4)
   12208:	8b 4d 18             	mov    0x18(%rbp),%ecx
   1220b:	48 63 c9             	movslq %ecx,%rcx
   1220e:	ff f1                	push   %rcx
   12210:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
   12213:	48 63 c9             	movslq %ecx,%rcx
   12216:	ff f1                	push   %rcx
   12218:	b9 04 00 00 00       	mov    $0x4,%ecx
   1221d:	8f c2                	pop    %rdx
   1221f:	48 d3 e2             	shl    %cl,%rdx
   12222:	8f c1                	pop    %rcx
   12224:	03 ca                	add    %edx,%ecx
   12226:	ff f1                	push   %rcx
   12228:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1222c:	48 8b c9             	mov    %rcx,%rcx
   1222f:	ba 0a 00 00 00       	mov    $0xa,%edx
   12234:	48 03 ca             	add    %rdx,%rcx
   12237:	ff f1                	push   %rcx
   12239:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1223d:	48 8b c9             	mov    %rcx,%rcx
   12240:	ba 04 00 00 00       	mov    $0x4,%edx
   12245:	48 03 ca             	add    %rdx,%rcx
   12248:	66 8b 11             	mov    (%rcx),%dx
   1224b:	48 0f b7 d2          	movzwq %dx,%rdx
   1224f:	ff f2                	push   %rdx
   12251:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
   12258:	66 89 11             	mov    %dx,(%rcx)
   1225b:	8f c1                	pop    %rcx
   1225d:	8f c2                	pop    %rdx
   1225f:	bb 02 00 00 00       	mov    $0x2,%ebx
   12264:	ff f2                	push   %rdx
   12266:	48 8b c1             	mov    %rcx,%rax
   12269:	f7 e3                	mul    %ebx
   1226b:	48 8b c8             	mov    %rax,%rcx
   1226e:	8f c2                	pop    %rdx
   12270:	48 03 d1             	add    %rcx,%rdx
   12273:	8f c1                	pop    %rcx
   12275:	48 63 d9             	movslq %ecx,%rbx
   12278:	66 89 1a             	mov    %bx,(%rdx)
        strides[bufferSection] += floatCount
   1227b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1227f:	48 8b c9             	mov    %rcx,%rcx
   12282:	ba 1a 00 00 00       	mov    $0x1a,%edx
   12287:	48 03 ca             	add    %rdx,%rcx
   1228a:	ff f1                	push   %rcx
   1228c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12290:	48 8b c9             	mov    %rcx,%rcx
   12293:	66 8b 51 08          	mov    0x8(%rcx),%dx
   12297:	48 0f b7 d2          	movzwq %dx,%rdx
   1229b:	48 0f bf ca          	movswq %dx,%rcx
   1229f:	8f c2                	pop    %rdx
   122a1:	bb 02 00 00 00       	mov    $0x2,%ebx
   122a6:	ff f2                	push   %rdx
   122a8:	48 8b c1             	mov    %rcx,%rax
   122ab:	f7 e3                	mul    %ebx
   122ad:	48 8b c8             	mov    %rax,%rcx
   122b0:	8f c2                	pop    %rdx
   122b2:	48 03 d1             	add    %rcx,%rdx
   122b5:	66 8b 0a             	mov    (%rdx),%cx
   122b8:	48 0f b7 c9          	movzwq %cx,%rcx
   122bc:	ff f1                	push   %rcx
   122be:	8b 4d 18             	mov    0x18(%rbp),%ecx
   122c1:	48 63 c9             	movslq %ecx,%rcx
   122c4:	8f c2                	pop    %rdx
   122c6:	48 0f bf da          	movswq %dx,%rbx
   122ca:	03 d9                	add    %ecx,%ebx
   122cc:	ff f3                	push   %rbx
   122ce:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   122d2:	48 8b c9             	mov    %rcx,%rcx
   122d5:	ba 1a 00 00 00       	mov    $0x1a,%edx
   122da:	48 03 ca             	add    %rdx,%rcx
   122dd:	ff f1                	push   %rcx
   122df:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   122e3:	48 8b c9             	mov    %rcx,%rcx
   122e6:	66 8b 51 08          	mov    0x8(%rcx),%dx
   122ea:	48 0f b7 d2          	movzwq %dx,%rdx
   122ee:	8f c1                	pop    %rcx
   122f0:	bb 02 00 00 00       	mov    $0x2,%ebx
   122f5:	48 8b c2             	mov    %rdx,%rax
   122f8:	f7 e3                	mul    %ebx
   122fa:	48 8b d0             	mov    %rax,%rdx
   122fd:	48 03 ca             	add    %rdx,%rcx
   12300:	8f c2                	pop    %rdx
   12302:	48 63 da             	movslq %edx,%rbx
   12305:	66 89 19             	mov    %bx,(%rcx)
   12308:	8f c5                	pop    %rbp
   1230a:	c3                   	ret
    fn addAttribute(floatCount: i32, divisor: i32, buffer: VertexBuffer*) {
   1230b:	ff f5                	push   %rbp
   1230d:	48 8b ec             	mov    %rsp,%rbp
   12310:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
        addAttribute(floatCount, divisor)
   12317:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   1231e:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12322:	48 8b c9             	mov    %rcx,%rcx
   12325:	ff f1                	push   %rcx
   12327:	8b 4d 18             	mov    0x18(%rbp),%ecx
   1232a:	48 63 c9             	movslq %ecx,%rcx
   1232d:	ff f1                	push   %rcx
   1232f:	8b 4d 1c             	mov    0x1c(%rbp),%ecx
   12332:	48 63 c9             	movslq %ecx,%rcx
   12335:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
   12339:	8f c1                	pop    %rcx
   1233b:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   1233f:	8f c1                	pop    %rcx
   12341:	48 89 0c 24          	mov    %rcx,(%rsp)
   12345:	e8 d6 fd ff ff       	call   12120 <main+0x12120>
   1234a:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
        if location == 8
   12351:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12355:	48 8b c9             	mov    %rcx,%rcx
   12358:	66 8b 51 06          	mov    0x6(%rcx),%dx
   1235c:	48 0f b7 d2          	movzwq %dx,%rdx
   12360:	ff f2                	push   %rdx
   12362:	b9 08 00 00 00       	mov    $0x8,%ecx
   12367:	8f c2                	pop    %rdx
   12369:	48 0f bf da          	movswq %dx,%rbx
   1236d:	3b d9                	cmp    %ecx,%ebx
   1236f:	40 0f 94 c3          	rex sete %bl
   12373:	48 0f b6 db          	movzbq %bl,%rbx
   12377:	48 83 fb 00          	cmp    $0x0,%rbx
   1237b:	0f 84 0a 00 00 00    	je     1238b <main+0x1238b>
            return; // error already handled
   12381:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   12388:	8f c5                	pop    %rbp
   1238a:	c3                   	ret
        if buffer   buffer.bind()
   1238b:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
   1238f:	ba 00 00 00 00       	mov    $0x0,%edx
   12394:	48 3b ca             	cmp    %rdx,%rcx
   12397:	40 0f 95 c1          	rex setne %cl
   1239b:	48 0f b6 c9          	movzbq %cl,%rcx
   1239f:	48 83 f9 00          	cmp    $0x0,%rcx
   123a3:	0f 84 24 00 00 00    	je     123cd <main+0x123cd>
   123a9:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   123b0:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
   123b7:	48 03 cd             	add    %rbp,%rcx
   123ba:	48 8b 11             	mov    (%rcx),%rdx
   123bd:	48 89 14 24          	mov    %rdx,(%rsp)
   123c1:	e8 70 fb ff ff       	call   11f36 <main+0x11f36>
   123c6:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        bind()
   123cd:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   123d4:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   123d8:	48 8b c9             	mov    %rcx,%rcx
   123db:	48 89 0c 24          	mov    %rcx,(%rsp)
   123df:	e8 58 fc ff ff       	call   1203c <main+0x1203c>
   123e4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        offset := 0
   123eb:	b9 00 00 00 00       	mov    $0x0,%ecx
   123f0:	89 4d f8             	mov    %ecx,-0x8(%rbp)
        startLocations[bufferSection] = location
   123f3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   123f7:	48 8b c9             	mov    %rcx,%rcx
   123fa:	66 8b 51 06          	mov    0x6(%rcx),%dx
   123fe:	48 0f b7 d2          	movzwq %dx,%rdx
   12402:	ff f2                	push   %rdx
   12404:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12408:	48 8b c9             	mov    %rcx,%rcx
   1240b:	ba 1e 00 00 00       	mov    $0x1e,%edx
   12410:	48 03 ca             	add    %rdx,%rcx
   12413:	ff f1                	push   %rcx
   12415:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12419:	48 8b c9             	mov    %rcx,%rcx
   1241c:	66 8b 51 08          	mov    0x8(%rcx),%dx
   12420:	48 0f b7 d2          	movzwq %dx,%rdx
   12424:	8f c1                	pop    %rcx
   12426:	bb 02 00 00 00       	mov    $0x2,%ebx
   1242b:	48 8b c2             	mov    %rdx,%rax
   1242e:	f7 e3                	mul    %ebx
   12430:	48 8b d0             	mov    %rax,%rdx
   12433:	48 03 ca             	add    %rdx,%rcx
   12436:	8f c2                	pop    %rdx
   12438:	66 89 11             	mov    %dx,(%rcx)
        while location < totalLocation {
   1243b:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1243f:	48 8b c9             	mov    %rcx,%rcx
   12442:	66 8b 51 06          	mov    0x6(%rcx),%dx
   12446:	48 0f b7 d2          	movzwq %dx,%rdx
   1244a:	ff f2                	push   %rdx
   1244c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12450:	48 8b c9             	mov    %rcx,%rcx
   12453:	66 8b 51 04          	mov    0x4(%rcx),%dx
   12457:	48 0f b7 d2          	movzwq %dx,%rdx
   1245b:	8f c1                	pop    %rcx
   1245d:	66 3b ca             	cmp    %dx,%cx
   12460:	40 0f 9c c1          	rex setl %cl
   12464:	48 0f b6 c9          	movzbq %cl,%rcx
   12468:	48 83 f9 00          	cmp    $0x0,%rcx
   1246c:	0f 84 f5 02 00 00    	je     12767 <main+0x12767>
            glEnableVertexAttribArray(location)
   12472:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   12479:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1247d:	48 8b c9             	mov    %rcx,%rcx
   12480:	66 8b 51 06          	mov    0x6(%rcx),%dx
   12484:	48 0f b7 d2          	movzwq %dx,%rdx
   12488:	48 0f b7 ca          	movzwq %dx,%rcx
   1248c:	89 0c 24             	mov    %ecx,(%rsp)
   1248f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12496 <main+0x12496>
   12496:	48 8b 11             	mov    (%rcx),%rdx
   12499:	4c 8b d2             	mov    %rdx,%r10
   1249c:	33 c9                	xor    %ecx,%ecx
   1249e:	8b 0c 24             	mov    (%rsp),%ecx
   124a1:	41 ff d2             	call   *%r10
   124a4:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
            size := locationSizes[location] << 4;
   124ab:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   124af:	48 8b c9             	mov    %rcx,%rcx
   124b2:	ba 0a 00 00 00       	mov    $0xa,%edx
   124b7:	48 03 ca             	add    %rdx,%rcx
   124ba:	ff f1                	push   %rcx
   124bc:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   124c0:	48 8b c9             	mov    %rcx,%rcx
   124c3:	66 8b 51 06          	mov    0x6(%rcx),%dx
   124c7:	48 0f b7 d2          	movzwq %dx,%rdx
   124cb:	48 0f bf ca          	movswq %dx,%rcx
   124cf:	8f c2                	pop    %rdx
   124d1:	bb 02 00 00 00       	mov    $0x2,%ebx
   124d6:	ff f2                	push   %rdx
   124d8:	48 8b c1             	mov    %rcx,%rax
   124db:	f7 e3                	mul    %ebx
   124dd:	48 8b c8             	mov    %rax,%rcx
   124e0:	8f c2                	pop    %rdx
   124e2:	48 03 d1             	add    %rcx,%rdx
   124e5:	66 8b 0a             	mov    (%rdx),%cx
   124e8:	48 0f b7 c9          	movzwq %cx,%rcx
   124ec:	ff f1                	push   %rcx
   124ee:	b9 04 00 00 00       	mov    $0x4,%ecx
   124f3:	8f c2                	pop    %rdx
   124f5:	48 d3 e2             	shl    %cl,%rdx
   124f8:	66 89 55 f0          	mov    %dx,-0x10(%rbp)
            size = size >> 4
   124fc:	66 8b 4d f0          	mov    -0x10(%rbp),%cx
   12500:	48 0f b7 c9          	movzwq %cx,%rcx
   12504:	ff f1                	push   %rcx
   12506:	b9 04 00 00 00       	mov    $0x4,%ecx
   1250b:	8f c2                	pop    %rdx
   1250d:	48 d3 ea             	shr    %cl,%rdx
   12510:	ff f2                	push   %rdx
   12512:	48 c7 c1 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rcx
   12519:	48 03 cd             	add    %rbp,%rcx
   1251c:	8f c2                	pop    %rdx
   1251e:	66 89 11             	mov    %dx,(%rcx)
            div := locationSizes[location] >> 4
   12521:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12525:	48 8b c9             	mov    %rcx,%rcx
   12528:	ba 0a 00 00 00       	mov    $0xa,%edx
   1252d:	48 03 ca             	add    %rdx,%rcx
   12530:	ff f1                	push   %rcx
   12532:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12536:	48 8b c9             	mov    %rcx,%rcx
   12539:	66 8b 51 06          	mov    0x6(%rcx),%dx
   1253d:	48 0f b7 d2          	movzwq %dx,%rdx
   12541:	48 0f bf ca          	movswq %dx,%rcx
   12545:	8f c2                	pop    %rdx
   12547:	bb 02 00 00 00       	mov    $0x2,%ebx
   1254c:	ff f2                	push   %rdx
   1254e:	48 8b c1             	mov    %rcx,%rax
   12551:	f7 e3                	mul    %ebx
   12553:	48 8b c8             	mov    %rax,%rcx
   12556:	8f c2                	pop    %rdx
   12558:	48 03 d1             	add    %rcx,%rdx
   1255b:	66 8b 0a             	mov    (%rdx),%cx
   1255e:	48 0f b7 c9          	movzwq %cx,%rcx
   12562:	ff f1                	push   %rcx
   12564:	b9 04 00 00 00       	mov    $0x4,%ecx
   12569:	8f c2                	pop    %rdx
   1256b:	48 d3 ea             	shr    %cl,%rdx
   1256e:	66 89 55 e8          	mov    %dx,-0x18(%rbp)
            glVertexAttribPointer(location, size, GL_FLOAT, GL_FALSE, strides[bufferSection] * sizeof(f32), cast<void*>cast<i64>(offset * sizeof(f32)))
   12572:	48 81 ec 38 00 00 00 	sub    $0x38,%rsp
   12579:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1257d:	48 8b c9             	mov    %rcx,%rcx
   12580:	66 8b 51 06          	mov    0x6(%rcx),%dx
   12584:	48 0f b7 d2          	movzwq %dx,%rdx
   12588:	48 0f b7 ca          	movzwq %dx,%rcx
   1258c:	ff f1                	push   %rcx
   1258e:	66 8b 4d f0          	mov    -0x10(%rbp),%cx
   12592:	48 0f b7 c9          	movzwq %cx,%rcx
   12596:	48 0f bf d1          	movswq %cx,%rdx
   1259a:	ff f2                	push   %rdx
   1259c:	b9 06 14 00 00       	mov    $0x1406,%ecx
   125a1:	8b d1                	mov    %ecx,%edx
   125a3:	ff f2                	push   %rdx
   125a5:	b9 00 00 00 00       	mov    $0x0,%ecx
   125aa:	48 63 d1             	movslq %ecx,%rdx
   125ad:	ff f2                	push   %rdx
   125af:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   125b3:	48 8b c9             	mov    %rcx,%rcx
   125b6:	ba 1a 00 00 00       	mov    $0x1a,%edx
   125bb:	48 03 ca             	add    %rdx,%rcx
   125be:	ff f1                	push   %rcx
   125c0:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   125c4:	48 8b c9             	mov    %rcx,%rcx
   125c7:	66 8b 51 08          	mov    0x8(%rcx),%dx
   125cb:	48 0f b7 d2          	movzwq %dx,%rdx
   125cf:	48 0f bf ca          	movswq %dx,%rcx
   125d3:	8f c2                	pop    %rdx
   125d5:	bb 02 00 00 00       	mov    $0x2,%ebx
   125da:	ff f2                	push   %rdx
   125dc:	48 8b c1             	mov    %rcx,%rax
   125df:	f7 e3                	mul    %ebx
   125e1:	48 8b c8             	mov    %rax,%rcx
   125e4:	8f c2                	pop    %rdx
   125e6:	48 03 d1             	add    %rcx,%rdx
   125e9:	66 8b 0a             	mov    (%rdx),%cx
   125ec:	48 0f b7 c9          	movzwq %cx,%rcx
   125f0:	ff f1                	push   %rcx
   125f2:	b9 04 00 00 00       	mov    $0x4,%ecx
   125f7:	8f c2                	pop    %rdx
   125f9:	48 0f bf da          	movswq %dx,%rbx
   125fd:	0f af d9             	imul   %ecx,%ebx
   12600:	ff f3                	push   %rbx
   12602:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   12605:	ff f1                	push   %rcx
   12607:	b9 04 00 00 00       	mov    $0x4,%ecx
   1260c:	8f c2                	pop    %rdx
   1260e:	0f af d1             	imul   %ecx,%edx
   12611:	48 63 ca             	movslq %edx,%rcx
   12614:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
   12619:	8f c1                	pop    %rcx
   1261b:	89 4c 24 40          	mov    %ecx,0x40(%rsp)
   1261f:	8f c1                	pop    %rcx
   12621:	88 4c 24 30          	mov    %cl,0x30(%rsp)
   12625:	8f c1                	pop    %rcx
   12627:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   1262b:	8f c1                	pop    %rcx
   1262d:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   12631:	8f c1                	pop    %rcx
   12633:	89 0c 24             	mov    %ecx,(%rsp)
   12636:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1263d <main+0x1263d>
   1263d:	48 8b 11             	mov    (%rcx),%rdx
   12640:	4c 8b d2             	mov    %rdx,%r10
   12643:	33 c9                	xor    %ecx,%ecx
   12645:	8b 0c 24             	mov    (%rsp),%ecx
   12648:	33 d2                	xor    %edx,%edx
   1264a:	8b 54 24 08          	mov    0x8(%rsp),%edx
   1264e:	45 33 c0             	xor    %r8d,%r8d
   12651:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   12656:	45 33 c9             	xor    %r9d,%r9d
   12659:	4c 8a 4c 24 18       	rex.WR mov 0x18(%rsp),%r9b
   1265e:	41 ff d2             	call   *%r10
   12661:	48 81 c4 38 00 00 00 	add    $0x38,%rsp
            if div !=0
   12668:	66 8b 4d e8          	mov    -0x18(%rbp),%cx
   1266c:	48 0f b7 c9          	movzwq %cx,%rcx
   12670:	ff f1                	push   %rcx
   12672:	b9 00 00 00 00       	mov    $0x0,%ecx
   12677:	8f c2                	pop    %rdx
   12679:	48 0f bf da          	movswq %dx,%rbx
   1267d:	3b d9                	cmp    %ecx,%ebx
   1267f:	40 0f 95 c3          	rex setne %bl
   12683:	48 0f b6 db          	movzbq %bl,%rbx
   12687:	48 83 fb 00          	cmp    $0x0,%rbx
   1268b:	0f 84 53 00 00 00    	je     126e4 <main+0x126e4>
                glVertexAttribDivisor(location, div)
   12691:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   12698:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1269c:	48 8b c9             	mov    %rcx,%rcx
   1269f:	66 8b 51 06          	mov    0x6(%rcx),%dx
   126a3:	48 0f b7 d2          	movzwq %dx,%rdx
   126a7:	48 0f b7 ca          	movzwq %dx,%rcx
   126ab:	ff f1                	push   %rcx
   126ad:	66 8b 4d e8          	mov    -0x18(%rbp),%cx
   126b1:	48 0f b7 c9          	movzwq %cx,%rcx
   126b5:	48 0f bf d1          	movswq %cx,%rdx
   126b9:	89 54 24 10          	mov    %edx,0x10(%rsp)
   126bd:	8f c1                	pop    %rcx
   126bf:	89 0c 24             	mov    %ecx,(%rsp)
   126c2:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 126c9 <main+0x126c9>
   126c9:	48 8b 11             	mov    (%rcx),%rdx
   126cc:	4c 8b d2             	mov    %rdx,%r10
   126cf:	33 c9                	xor    %ecx,%ecx
   126d1:	8b 0c 24             	mov    (%rsp),%ecx
   126d4:	33 d2                	xor    %edx,%edx
   126d6:	8b 54 24 08          	mov    0x8(%rsp),%edx
   126da:	41 ff d2             	call   *%r10
   126dd:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
            offset += locationSizes[location]
   126e4:	8b 4d f8             	mov    -0x8(%rbp),%ecx
   126e7:	ff f1                	push   %rcx
   126e9:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   126ed:	48 8b c9             	mov    %rcx,%rcx
   126f0:	ba 0a 00 00 00       	mov    $0xa,%edx
   126f5:	48 03 ca             	add    %rdx,%rcx
   126f8:	ff f1                	push   %rcx
   126fa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   126fe:	48 8b c9             	mov    %rcx,%rcx
   12701:	66 8b 51 06          	mov    0x6(%rcx),%dx
   12705:	48 0f b7 d2          	movzwq %dx,%rdx
   12709:	48 0f bf ca          	movswq %dx,%rcx
   1270d:	8f c2                	pop    %rdx
   1270f:	bb 02 00 00 00       	mov    $0x2,%ebx
   12714:	ff f2                	push   %rdx
   12716:	48 8b c1             	mov    %rcx,%rax
   12719:	f7 e3                	mul    %ebx
   1271b:	48 8b c8             	mov    %rax,%rcx
   1271e:	8f c2                	pop    %rdx
   12720:	48 03 d1             	add    %rcx,%rdx
   12723:	66 8b 0a             	mov    (%rdx),%cx
   12726:	48 0f b7 c9          	movzwq %cx,%rcx
   1272a:	8f c2                	pop    %rdx
   1272c:	48 0f bf d9          	movswq %cx,%rbx
   12730:	03 d3                	add    %ebx,%edx
   12732:	ff f2                	push   %rdx
   12734:	48 c7 c1 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rcx
   1273b:	48 03 cd             	add    %rbp,%rcx
   1273e:	8f c2                	pop    %rdx
   12740:	89 11                	mov    %edx,(%rcx)
            location++
   12742:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12746:	48 8b c9             	mov    %rcx,%rcx
   12749:	ba 06 00 00 00       	mov    $0x6,%edx
   1274e:	48 03 ca             	add    %rdx,%rcx
   12751:	66 8b 11             	mov    (%rcx),%dx
   12754:	48 0f b7 d2          	movzwq %dx,%rdx
   12758:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
   1275f:	66 89 11             	mov    %dx,(%rcx)
   12762:	e9 d4 fc ff ff       	jmp    1243b <main+0x1243b>
        bufferSection++
   12767:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   1276b:	48 8b c9             	mov    %rcx,%rcx
   1276e:	ba 08 00 00 00       	mov    $0x8,%edx
   12773:	48 03 ca             	add    %rdx,%rcx
   12776:	66 8b 11             	mov    (%rcx),%dx
   12779:	48 0f b7 d2          	movzwq %dx,%rdx
   1277d:	48 81 c2 01 00 00 00 	add    $0x1,%rdx
   12784:	66 89 11             	mov    %dx,(%rcx)
        GLCHECK()
   12787:	48 81 ec 28 00 00 00 	sub    $0x28,%rsp
   1278e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12795 <main+0x12795>
   12795:	48 8b 11             	mov    (%rcx),%rdx
   12798:	4c 8b d2             	mov    %rdx,%r10
   1279b:	41 ff d2             	call   *%r10
   1279e:	48 81 c4 28 00 00 00 	add    $0x28,%rsp
   127a5:	8b c8                	mov    %eax,%ecx
   127a7:	ff f1                	push   %rcx
   127a9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 127b0 <main+0x127b0>
   127b0:	8f c2                	pop    %rdx
   127b2:	48 63 da             	movslq %edx,%rbx
   127b5:	88 19                	mov    %bl,(%rcx)
   127b7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 127be <main+0x127be>
   127be:	48 8a 11             	rex.W mov (%rcx),%dl
   127c1:	48 0f b6 d2          	movzbq %dl,%rdx
   127c5:	48 83 fa 00          	cmp    $0x0,%rdx
   127c9:	0f 84 17 01 00 00    	je     128e6 <main+0x128e6>
   127cf:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   127d6:	b9 06 00 00 00       	mov    $0x6,%ecx
   127db:	ff f1                	push   %rcx
   127dd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 127e4 <main+0x127e4>
   127e4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   127e9:	8f c1                	pop    %rcx
   127eb:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   127f0:	e8 9d 18 ff ff       	call   4092 <main+0x4092>
   127f5:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   127fc:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   12803:	b9 0e 00 00 00       	mov    $0xe,%ecx
   12808:	ff f1                	push   %rcx
   1280a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12811 <main+0x12811>
   12811:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12816:	8f c1                	pop    %rcx
   12818:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1281d:	e8 70 18 ff ff       	call   4092 <main+0x4092>
   12822:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   12829:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   12830:	b9 01 00 00 00       	mov    $0x1,%ecx
   12835:	ff f1                	push   %rcx
   12837:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1283e <main+0x1283e>
   1283e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12843:	8f c1                	pop    %rcx
   12845:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1284a:	e8 43 18 ff ff       	call   4092 <main+0x4092>
   1284f:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   12856:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1285d:	b9 0d 01 00 00       	mov    $0x10d,%ecx
   12862:	48 63 d1             	movslq %ecx,%rdx
   12865:	48 89 14 24          	mov    %rdx,(%rsp)
   12869:	e8 88 15 ff ff       	call   3df6 <main+0x3df6>
   1286e:	48 81 c4 08 00 00 00 	add    $0x8,%rsp

   12875:	48 81 ec 18 00 00 00 	sub    $0x18,%rsp
   1287c:	b9 08 00 00 00       	mov    $0x8,%ecx
   12881:	ff f1                	push   %rcx
   12883:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1288a <main+0x1288a>
   1288a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   1288f:	8f c1                	pop    %rcx
   12891:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12896:	e8 f7 17 ff ff       	call   4092 <main+0x4092>
   1289b:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   128a2:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   128a9:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 128b0 <main+0x128b0>
   128b0:	48 8a 11             	rex.W mov (%rcx),%dl
   128b3:	48 0f b6 d2          	movzbq %dl,%rdx
   128b7:	48 0f be ca          	movsbq %dl,%rcx
   128bb:	48 89 0c 24          	mov    %rcx,(%rsp)
   128bf:	e8 32 15 ff ff       	call   3df6 <main+0x3df6>
   128c4:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   128cb:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   128d2:	b9 0a 00 00 00       	mov    $0xa,%ecx
   128d7:	88 0c 24             	mov    %cl,(%rsp)
   128da:	e8 12 17 ff ff       	call   3ff1 <main+0x3ff1>
   128df:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        if buffer    buffer.bind() // we should bind here (code in ProjectUnknown does it)
   128e6:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
   128ea:	ba 00 00 00 00       	mov    $0x0,%edx
   128ef:	48 3b ca             	cmp    %rdx,%rcx
   128f2:	40 0f 95 c1          	rex setne %cl
   128f6:	48 0f b6 c9          	movzbq %cl,%rcx
   128fa:	48 83 f9 00          	cmp    $0x0,%rcx
   128fe:	0f 84 24 00 00 00    	je     12928 <main+0x12928>
   12904:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1290b:	48 c7 c1 20 00 00 00 	mov    $0x20,%rcx
   12912:	48 03 cd             	add    %rbp,%rcx
   12915:	48 8b 11             	mov    (%rcx),%rdx
   12918:	48 89 14 24          	mov    %rdx,(%rsp)
   1291c:	e8 15 f6 ff ff       	call   11f36 <main+0x11f36>
   12921:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
        unbind()
   12928:	48 81 ec 08 00 00 00 	sub    $0x8,%rsp
   1292f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12933:	48 8b c9             	mov    %rcx,%rcx
   12936:	48 89 0c 24          	mov    %rcx,(%rsp)
   1293a:	e8 49 f7 ff ff       	call   12088 <main+0x12088>
   1293f:	48 81 c4 08 00 00 00 	add    $0x8,%rsp
   12946:	48 81 c4 18 00 00 00 	add    $0x18,%rsp
   1294d:	8f c5                	pop    %rbp
   1294f:	c3                   	ret
    fn draw(indexBuffer: IndexBuffer*) {
   12950:	ff f5                	push   %rbp
   12952:	48 8b ec             	mov    %rsp,%rbp
        if (!initialized()) {
   12955:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   1295c:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12960:	48 8b c9             	mov    %rcx,%rcx
   12963:	48 89 0c 24          	mov    %rcx,(%rsp)
   12967:	e8 99 f6 ff ff       	call   12005 <main+0x12005>
   1296c:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12973:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
   12978:	48 0f b6 c9          	movzbq %cl,%rcx
   1297c:	48 85 c9             	test   %rcx,%rcx
   1297f:	40 0f 94 c1          	rex sete %cl
   12983:	48 0f b6 c9          	movzbq %cl,%rcx
   12987:	48 83 f9 00          	cmp    $0x0,%rcx
   1298b:	0f 84 4b 00 00 00    	je     129dc <main+0x129dc>
			log("VertexArray::draw - object is uninitialized!");
   12991:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12998:	b9 2c 00 00 00       	mov    $0x2c,%ecx
   1299d:	ff f1                	push   %rcx
   1299f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 129a6 <main+0x129a6>
   129a6:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   129ab:	8f c1                	pop    %rcx
   129ad:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   129b2:	e8 db 16 ff ff       	call   4092 <main+0x4092>
   129b7:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   129be:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   129c5:	b9 0a 00 00 00       	mov    $0xa,%ecx
   129ca:	88 0c 24             	mov    %cl,(%rsp)
   129cd:	e8 1f 16 ff ff       	call   3ff1 <main+0x3ff1>
   129d2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
			return;
   129d9:	8f c5                	pop    %rbp
   129db:	c3                   	ret
		bind();
   129dc:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   129e3:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   129e7:	48 8b c9             	mov    %rcx,%rcx
   129ea:	48 89 0c 24          	mov    %rcx,(%rsp)
   129ee:	e8 49 f6 ff ff       	call   1203c <main+0x1203c>
   129f3:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
		if (bufferSection == 0) {
   129fa:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   129fe:	48 8b c9             	mov    %rcx,%rcx
   12a01:	66 8b 51 08          	mov    0x8(%rcx),%dx
   12a05:	48 0f b7 d2          	movzwq %dx,%rdx
   12a09:	ff f2                	push   %rdx
   12a0b:	b9 00 00 00 00       	mov    $0x0,%ecx
   12a10:	8f c2                	pop    %rdx
   12a12:	48 0f bf da          	movswq %dx,%rbx
   12a16:	3b d9                	cmp    %ecx,%ebx
   12a18:	40 0f 94 c3          	rex sete %bl
   12a1c:	48 0f b6 db          	movzbq %bl,%rbx
   12a20:	48 83 fb 00          	cmp    $0x0,%rbx
   12a24:	0f 84 48 00 00 00    	je     12a72 <main+0x12a72>
			log("VertexArray::draw You forgot VBO in addAttribute!");
   12a2a:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12a31:	b9 31 00 00 00       	mov    $0x31,%ecx
   12a36:	ff f1                	push   %rcx
   12a38:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12a3f <main+0x12a3f>
   12a3f:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12a44:	8f c1                	pop    %rcx
   12a46:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12a4b:	e8 42 16 ff ff       	call   4092 <main+0x4092>
   12a50:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12a57:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12a5e:	b9 0a 00 00 00       	mov    $0xa,%ecx
   12a63:	88 0c 24             	mov    %cl,(%rsp)
   12a66:	e8 86 15 ff ff       	call   3ff1 <main+0x3ff1>
   12a6b:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
		if (indexBuffer != null) {
   12a72:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
   12a76:	ff f1                	push   %rcx
   12a78:	b9 00 00 00 00       	mov    $0x0,%ecx
   12a7d:	8f c2                	pop    %rdx
   12a7f:	48 3b d1             	cmp    %rcx,%rdx
   12a82:	40 0f 95 c2          	rex setne %dl
   12a86:	48 0f b6 d2          	movzbq %dl,%rdx
   12a8a:	48 83 fa 00          	cmp    $0x0,%rdx
   12a8e:	0f 84 3e 01 00 00    	je     12bd2 <main+0x12bd2>
			if (indexBuffer.initialized()) {
   12a94:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12a9b:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   12aa2:	48 03 cd             	add    %rbp,%rcx
   12aa5:	48 8b 11             	mov    (%rcx),%rdx
   12aa8:	48 89 14 24          	mov    %rdx,(%rsp)
   12aac:	e8 d1 f4 ff ff       	call   11f82 <main+0x11f82>
   12ab1:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12ab8:	48 8a 4c 24 d8       	rex.W mov -0x28(%rsp),%cl
   12abd:	48 0f b6 c9          	movzbq %cl,%rcx
   12ac1:	48 83 f9 00          	cmp    $0x0,%rcx
   12ac5:	0f 84 ba 00 00 00    	je     12b85 <main+0x12b85>
				indexBuffer.bind();
   12acb:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12ad2:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   12ad9:	48 03 cd             	add    %rbp,%rcx
   12adc:	48 8b 11             	mov    (%rcx),%rdx
   12adf:	48 89 14 24          	mov    %rdx,(%rsp)
   12ae3:	e8 d1 f4 ff ff       	call   11fb9 <main+0x11fb9>
   12ae8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
				glDrawElements(GL_TRIANGLES, indexBuffer.size/sizeof(u32), GL_UNSIGNED_INT, null);
   12aef:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   12af6:	b9 04 00 00 00       	mov    $0x4,%ecx
   12afb:	8b d1                	mov    %ecx,%edx
   12afd:	ff f2                	push   %rdx
   12aff:	48 c7 c1 18 00 00 00 	mov    $0x18,%rcx
   12b06:	48 03 cd             	add    %rbp,%rcx
   12b09:	48 8b 11             	mov    (%rcx),%rdx
   12b0c:	b9 04 00 00 00       	mov    $0x4,%ecx
   12b11:	48 03 d1             	add    %rcx,%rdx
   12b14:	8b 0a                	mov    (%rdx),%ecx
   12b16:	ff f1                	push   %rcx
   12b18:	b9 04 00 00 00       	mov    $0x4,%ecx
   12b1d:	8f c2                	pop    %rdx
   12b1f:	48 8b c2             	mov    %rdx,%rax
   12b22:	99                   	cltd
   12b23:	f7 f9                	idiv   %ecx
   12b25:	48 8b d0             	mov    %rax,%rdx
   12b28:	ff f2                	push   %rdx
   12b2a:	b9 05 14 00 00       	mov    $0x1405,%ecx
   12b2f:	8b d1                	mov    %ecx,%edx
   12b31:	ff f2                	push   %rdx
   12b33:	b9 00 00 00 00       	mov    $0x0,%ecx
   12b38:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
   12b3d:	8f c1                	pop    %rcx
   12b3f:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
   12b43:	8f c1                	pop    %rcx
   12b45:	89 4c 24 10          	mov    %ecx,0x10(%rsp)
   12b49:	8f c1                	pop    %rcx
   12b4b:	89 0c 24             	mov    %ecx,(%rsp)
   12b4e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12b55 <main+0x12b55>
   12b55:	48 8b 11             	mov    (%rcx),%rdx
   12b58:	4c 8b d2             	mov    %rdx,%r10
   12b5b:	33 c9                	xor    %ecx,%ecx
   12b5d:	8b 0c 24             	mov    (%rsp),%ecx
   12b60:	33 d2                	xor    %edx,%edx
   12b62:	8b 54 24 08          	mov    0x8(%rsp),%edx
   12b66:	45 33 c0             	xor    %r8d,%r8d
   12b69:	44 8b 44 24 10       	mov    0x10(%rsp),%r8d
   12b6e:	45 33 c9             	xor    %r9d,%r9d
   12b71:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
   12b76:	41 ff d2             	call   *%r10
   12b79:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   12b80:	e9 48 00 00 00       	jmp    12bcd <main+0x12bcd>
				log("VertexArray::draw - buffer is uninitialized!");
   12b85:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12b8c:	b9 2c 00 00 00       	mov    $0x2c,%ecx
   12b91:	ff f1                	push   %rcx
   12b93:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12b9a <main+0x12b9a>
   12b9a:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12b9f:	8f c1                	pop    %rcx
   12ba1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12ba6:	e8 e7 14 ff ff       	call   4092 <main+0x4092>
   12bab:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12bb2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12bb9:	b9 0a 00 00 00       	mov    $0xa,%ecx
   12bbe:	88 0c 24             	mov    %cl,(%rsp)
   12bc1:	e8 2b 14 ff ff       	call   3ff1 <main+0x3ff1>
   12bc6:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12bcd:	e9 48 00 00 00       	jmp    12c1a <main+0x12c1a>
			log("VertexArray::draw Must have indexBuffer when drawing!");
   12bd2:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12bd9:	b9 35 00 00 00       	mov    $0x35,%ecx
   12bde:	ff f1                	push   %rcx
   12be0:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12be7 <main+0x12be7>
   12be7:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12bec:	8f c1                	pop    %rcx
   12bee:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12bf3:	e8 9a 14 ff ff       	call   4092 <main+0x4092>
   12bf8:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12bff:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12c06:	b9 0a 00 00 00       	mov    $0xa,%ecx
   12c0b:	88 0c 24             	mov    %cl,(%rsp)
   12c0e:	e8 de 13 ff ff       	call   3ff1 <main+0x3ff1>
   12c13:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
		GLCHECK();
   12c1a:	48 81 ec 20 00 00 00 	sub    $0x20,%rsp
   12c21:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12c28 <main+0x12c28>
   12c28:	48 8b 11             	mov    (%rcx),%rdx
   12c2b:	4c 8b d2             	mov    %rdx,%r10
   12c2e:	41 ff d2             	call   *%r10
   12c31:	48 81 c4 20 00 00 00 	add    $0x20,%rsp
   12c38:	8b c8                	mov    %eax,%ecx
   12c3a:	ff f1                	push   %rcx
   12c3c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12c43 <main+0x12c43>
   12c43:	8f c2                	pop    %rdx
   12c45:	48 63 da             	movslq %edx,%rbx
   12c48:	88 19                	mov    %bl,(%rcx)
   12c4a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12c51 <main+0x12c51>
   12c51:	48 8a 11             	rex.W mov (%rcx),%dl
   12c54:	48 0f b6 d2          	movzbq %dl,%rdx
   12c58:	48 83 fa 00          	cmp    $0x0,%rdx
   12c5c:	0f 84 17 01 00 00    	je     12d79 <main+0x12d79>
   12c62:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12c69:	b9 06 00 00 00       	mov    $0x6,%ecx
   12c6e:	ff f1                	push   %rcx
   12c70:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12c77 <main+0x12c77>
   12c77:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12c7c:	8f c1                	pop    %rcx
   12c7e:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12c83:	e8 0a 14 ff ff       	call   4092 <main+0x4092>
   12c88:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12c8f:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12c96:	b9 0e 00 00 00       	mov    $0xe,%ecx
   12c9b:	ff f1                	push   %rcx
   12c9d:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12ca4 <main+0x12ca4>
   12ca4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12ca9:	8f c1                	pop    %rcx
   12cab:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12cb0:	e8 dd 13 ff ff       	call   4092 <main+0x4092>
   12cb5:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12cbc:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12cc3:	b9 01 00 00 00       	mov    $0x1,%ecx
   12cc8:	ff f1                	push   %rcx
   12cca:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12cd1 <main+0x12cd1>
   12cd1:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12cd6:	8f c1                	pop    %rcx
   12cd8:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12cdd:	e8 b0 13 ff ff       	call   4092 <main+0x4092>
   12ce2:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12ce9:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12cf0:	b9 7e 01 00 00       	mov    $0x17e,%ecx
   12cf5:	48 63 d1             	movslq %ecx,%rdx
   12cf8:	48 89 14 24          	mov    %rdx,(%rsp)
   12cfc:	e8 f5 10 ff ff       	call   3df6 <main+0x3df6>
   12d01:	48 81 c4 10 00 00 00 	add    $0x10,%rsp

   12d08:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12d0f:	b9 08 00 00 00       	mov    $0x8,%ecx
   12d14:	ff f1                	push   %rcx
   12d16:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12d1d <main+0x12d1d>
   12d1d:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12d22:	8f c1                	pop    %rcx
   12d24:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
   12d29:	e8 64 13 ff ff       	call   4092 <main+0x4092>
   12d2e:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12d35:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12d3c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 12d43 <main+0x12d43>
   12d43:	48 8a 11             	rex.W mov (%rcx),%dl
   12d46:	48 0f b6 d2          	movzbq %dl,%rdx
   12d4a:	48 0f be ca          	movsbq %dl,%rcx
   12d4e:	48 89 0c 24          	mov    %rcx,(%rsp)
   12d52:	e8 9f 10 ff ff       	call   3df6 <main+0x3df6>
   12d57:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12d5e:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12d65:	b9 0a 00 00 00       	mov    $0xa,%ecx
   12d6a:	88 0c 24             	mov    %cl,(%rsp)
   12d6d:	e8 7f 12 ff ff       	call   3ff1 <main+0x3ff1>
   12d72:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
		unbind();
   12d79:	48 81 ec 10 00 00 00 	sub    $0x10,%rsp
   12d80:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
   12d84:	48 8b c9             	mov    %rcx,%rcx
   12d87:	48 89 0c 24          	mov    %rcx,(%rsp)
   12d8b:	e8 f8 f2 ff ff       	call   12088 <main+0x12088>
   12d90:	48 81 c4 10 00 00 00 	add    $0x10,%rsp
   12d97:	8f c5                	pop    %rbp
   12d99:	c3                   	ret
