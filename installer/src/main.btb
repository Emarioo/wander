/*
    The installer user program.
    (also for develop)
*/

#import "Logger"
#import "OS"
#import "Net"
#import "Stream"

#import "libs/mbedtls-3.6.3/include/mbedtls.btb"

#import "./util.btb"

#macro VERSION "0.1.0"
#macro COMMIT_HASH ""

fn print_version() {
    log("Wander Installer v",VERSION)
    if COMMIT_HASH.len != 0 {
        log("commit hash: ",COMMIT_HASH)
    }
}

struct Session {
    client: Client;
    net_lock: Semaphore; // this lock allows us to ask server for data and block until the callback is called then continue executing

    install_dir: StringBuilder;

    channels: Array<StringBuilder>;

    response_result: ResponseResult;
    server_message: StringBuilder;

    get_file_data: char[];

    fn init() {
        net_lock.init(0, 1)
    }
}
global session: Session*;

fn main(argc: i32, argv: char**) -> i32 {
    disable_safety := false
    verify_files := false
    run_game := false
    list_channels := false

    install_dir: StringBuilder
    {
        // set install_dir to folder where installer.exe exists
        // depending on how and where you call the installer the exe path
        // may be absolute or relative if you start a new process installer in C code 
        // in a certain then we might have problems if you don't provide that argument?
        exe := Slice<char>{argv[0], strlen(argv[0])}
        for 0..exe.len {
            if exe[nr] == '\\'
                exe[nr] = '/'
        }
        at := find("/", exe, true)
        install_dir.append(substring(exe, 0, at))
    }
    channel: StringBuilder;
    channel.append("release")
    
    upload := false;
    upload_dir: StringBuilder;

    server_address: StringBuilder;
    // server_address.append("btb-lang.org")
    server_address.append("localhost")
    
    argi := 1
    while argi < argc {
        arg := Slice<char>{argv[argi], strlen(argv[argi])}
        argi++
        if arg == "-v" || arg == "--version" {
            print_version()
            return 0
        } else if arg == "-h" || arg == "--help" {
            log("The Wander Installer lets you securely download new versions.")
            log("You can also download beta versions and auto-update them while playing the game (hotreloading).")
            log("")
            log("If you want secure downloads you MUST ")
            log("")
            log("Flags:")
            log("  -v,--version         : Print version")
            log("  --unsafe             : Ignore hash and signature checks (still warns)")
            log("  --verify             : Verify game files against the manifest and signature (does not download anything)")
            log("  --run                : Update and run game")
            log("  --list-channels      : List available game versions")
            log("  --channel <name>     : Download a beta version or older game versions")
            log("  --install-dir <path> : Folder where game versions are installed. The folder where installer is located is default.")
            log()
            log("Dev flags:")
            log("  --upload <channel> <game_files_dir> : Upload release or beta game version.\n       Requires 'dev.token' for authentication to content server.")
            log("  --ip <server_ip>[:port] : Connect to a different content server (btb-lang.org is default)")
            return 0
        } else if arg == "--unsafe" {
            disable_safety = true
        } else if arg == "--verify" {
            verify_files = true
        } else if arg == "--run" {
            run_game = true
        } else if arg == "--list-channels" {
            list_channels = true
        } else if arg == "--channel" {
            if argi >= argc {
                log("Missing argument after ", arg)
                return 1
            }
            channel.clear()
            channel.append(argv[argi])
            argi++
        } else if arg == "--install-dir" {
            if argi >= argc {
                log("Missing argument after ", arg)
                return 1
            }
            install_dir.clear()
            install_dir.append(argv[argi])
            argi++
        } else if arg == "--ip" {
            if argi >= argc {
                log("Missing argument after ", arg)
                return 1
            }
            server_address.clear()
            server_address.append(argv[argi])
            argi++
        } else if arg == "--upload" {
            upload = true
            if argi >= argc {
                log("Missing argument after ", arg)
                return 1
            }
            channel.clear()
            channel.append(argv[argi])
            argi++
            if argi >= argc {
                log("Missing argument after ", arg)
                return 1
            }
            upload_dir.clear()
            upload_dir.append(argv[argi])
            argi++
        } else {
            log("Unknown argument ", arg)
            return 1
        }
    }

    session = Allocate(sizeof(Session))
    construct(session)

    // install_dir.clear()
    // install_dir.append("sandbox/installer")

    session.install_dir = install_dir
    install_dir = {}

    // Separate server IP and port
    port := SERVER_PORT
    {
        at := find(":",server_address, true)
        if at != -1 {
            head := at+1
            valid: bool
            port = parse_i64(&head, server_address, &valid)
            if !valid {
                log(LOG_RED,"ERROR: '",substring(server_address, at), "' is not a valid number.")
                return 1
            }
            if port < 0 || port > 0xFFFF {
                log(LOG_RED,"ERROR: Port ",substring(server_address, at), " must be within 0 - 65535.")
                return 1
            }
            server_address.len = at
        }
    }

    session.client.set_callback(handle_event, null)
    res := session.client.start(server_address, port, protocol = NET_TCP | NET_PROTO_MESSAGE)
    if res != NET_SUCCESS {
        log(LOG_RED,"ERROR: ",LOG_NO_COLOR,"Could not connect to content server at ",server_address, ":",port)
        return 1
    }

    if verify_files {
        VerifyLocalFiles(channel)
    } else if list_channels {
        array: Array<StringBuilder>
        RetrieveChannels(&array);
        log("Available channels:")
        for array {
            log(" ", *it)
        }
    } else if upload {
        yes := FileExist("dev.token")
        if !yes {
            log("You must be a developer to upload game files (file 'dev.token' is missing)")
            return 1
        }

        UploadGameVersion(channel, upload_dir)
    } else {
        manifest := RetrieveManifest(channel)
        if !manifest {
            if channel == "release" {
                log("This channel should always exist. Ask the developers, they may be experiencing technical difficulties.")
            }
            log("Try installer.exe --list-channels")
            return 1
        }

        if manifest.game_version.len == 0 {
            log("Do you want to install unnamed version from channel ", channel, " in ", session.install_dir,"/",channel,"?")
        } else {
            log("Do you want to install ", manifest.game_version," in ", session.install_dir,"/",channel,"?")
        }
        log("Yes")
        log() // extra spacing to separate downloading output

        // We will download and parse manifest again.
        // This is fine for now.
        DownloadGameVersion(channel)
    }

    if run_game {
        log("TODO: run game, --run")
    }
    if disable_safety {
        log("TODO: unsafe, --unsafe, what should it do? not download files?")
    }

    return 0
}

fn RetrieveChannels(channels: Array<StringBuilder>*) {
    msg_version := 1

    msg: ByteStream
    defer msg.cleanup()
    msg.write(MSG_GET_CHANNELS)
    msg.write<i32>(msg_version)

    data: u8[];
    msg.finalize(&data)

    session.client.send(data)

    session.net_lock.wait();

    *channels = session.channels
    session.channels = {}
}

fn RetrieveManifest(channel: char[]) -> Manifest* {
    msg: ByteStream
    defer msg.cleanup()
    msg.write<i32>(MSG_GET_FILE)
    msg.write_string8(channel)
    msg.write_string8("manifest.txt")

    data: u8[];
    msg.finalize(&data)

    session.client.send(data)

    session.net_lock.wait()

    if session.response_result != RESPONSE_SUCCESS {
        log("Could not download manifest from '",channel,"'.")
        return null
    }

    manifest := Allocate(sizeof(Manifest))
    Assert(manifest)

    // parse function initializes manifest
    res := ParseManifestText(session.get_file_data, manifest)
    if !res {
        // something is very wrong with the manifest
        // message already printed
        // leaking manifest allocation is fine.
        return null
    }

    return manifest
}

fn VerifyLocalFiles(channel: char[]) {
    res: i32;
    warnings := 0;

    version_root: StringBuilder
    defer version_root.cleanup()
    version_root.append(session.install_dir)
    version_root.append("/")
    version_root.append(channel)
    version_root.append("/")

    log("Downloading ",channel,"/manifest.txt")
    signature_path: StringBuilder
    defer signature_path.cleanup()
    signature_path.append(version_root)
    signature_path.append("manifest.sig")

    manifest_path: StringBuilder
    defer manifest_path.cleanup()
    manifest_path.append(version_root)
    manifest_path.append("manifest.txt")

    verified := VerifySignature(signature_path, manifest_path)
    if !verified {
        log(LOG_YELLOW,"WARNING:",LOG_NO_COLOR," manifest.txt has been tampered with!\n  (or the server mixed up the manifests?)")
        warnings++
    }

    manifest_text: char[]
    manifest_text, res = ReadWholeFile(manifest_path)
    if !res {
        log("Could not read ",manifest_path)
        return
    }

    manifest: Manifest* = Allocate(sizeof(Manifest))
    Assert(manifest)
    res = ParseManifestText(manifest_text, manifest)
    if !res {
        // error already printed
        return;
    }

    path: StringBuilder
    defer path.cleanup()

    for mf : manifest.game_files {
        path.clear()
        path.append(version_root)
        path.append(mf.file)

        // TODO: What about large executables and dlls? Can we just read the whole file?
        file_data := ReadWholeFile(path)
        
        diff := mf.compare_hash(file_data)
        if diff {
            warnings++;
        }
    }
    
    if warnings > 0 {
        log(LOG_YELLOW,warnings," warning(s)",LOG_NO_COLOR)
    } else {
        log("Succesfully verified ", manifest.game_files.len, " files for ", channel)
    }
}

fn DownloadGameVersion(channel: char[]) {
    res: i32;
    warnings := 0;

    version_root: StringBuilder
    defer version_root.cleanup()
    version_root.append(session.install_dir)
    version_root.append("/")
    version_root.append(channel)
    version_root.append("/")

    log("Downloading ",channel,"/manifest.txt")
    signature_path: StringBuilder
    defer signature_path.cleanup()
    signature_path.append(version_root)
    signature_path.append("manifest.sig")
    res = DownloadFile(channel, "manifest.sig", signature_path)
    if !res {
        return
    }

    manifest_path: StringBuilder
    defer manifest_path.cleanup()
    manifest_path.append(version_root)
    manifest_path.append("manifest.txt")
    res = DownloadFile(channel, "manifest.txt", manifest_path)
    if !res {
        return
    }
    // Download manifest.txt last so we have the file data cached in memory (in session.get_file_data)

    verified := VerifySignature(signature_path, manifest_path)
    if !verified {
        log(LOG_YELLOW,"WARNING:",LOG_NO_COLOR," manifest.txt has been tampered with!\n  (or the server mixed up the manifests?)")
        warnings++
        // Keep going anyway or no?
    }

    log("Downloading game files...")

    manifest: Manifest* = Allocate(sizeof(Manifest))
    Assert(manifest)
    res = ParseManifestText(session.get_file_data, manifest)
    if !res {
        // error already printed
        return;
    }
    
    bad_file_count := 0

    path: StringBuilder
    defer path.cleanup()

    temp_hash: u8[32]; // SHA-256 output is 32 bytes
    for mf : manifest.game_files {
        path.clear()
        path.append(version_root)
        path.append(mf.file)
        // log("Downloading ", mf.file)
        // TODO: What about large executables and dlls? Can we just download them and store data in session.get_file_data?
        res = DownloadFile(channel, mf.file, path)
        if !res {
            bad_file_count++
            continue
        }

        file_data := session.get_file_data

        diff := mf.compare_hash(file_data)
        if diff {
            warnings++;
        }
    }
    
    if bad_file_count > 0 {
        log(LOG_RED, "ERROR: ",LOG_NO_COLOR,"Manifest file is corrupt. Content server is missing ", bad_file_count, " file(s).")
        return;
    }
    if warnings > 0 {
        log(LOG_YELLOW,warnings," warning(s)",LOG_NO_COLOR)
    } else {
        log("Succesfully downloaded ", manifest.game_files.len, " files for ", channel)
    }
}

fn VerifySignature(signature_path: char[], manifest_path: char[]) -> bool {
    res: i32;

    signature_data := ReadWholeFile(signature_path)
    if !signature_data.ptr {
        log("Could not read ", signature_path)
        return false
    }

    manifest_data := ReadWholeFile(manifest_path)
    if !manifest_data.ptr {
        log("Could not read ", manifest_path)
        return false
    }
    
    hash: u8[32]; // SHA-256 output is 32 bytes
    res = mbedtls_sha256(cast<void*>manifest_data.ptr, manifest_data.len, hash.ptr, 0); // 0 = SHA-256 (224 otherwise?)
    if(res != 0) {
        log("FAIL mbedtls_sha256 ", res);
        return false;
    }

    ctx: mbedtls_pk_context;
    mbedtls_pk_init(&ctx);

    res = mbedtls_pk_parse_public_key(&ctx, cast<void*>public_key.ptr, public_key.len + 1); // +1 to include null terminator
    if(res != 0) {
        log("FAIL mbedtls_pk_parse_public_key ", res);
        return false;
    }
    res = mbedtls_pk_verify(&ctx, MBEDTLS_MD_SHA256, hash.ptr, 32, cast<void*>signature_data.ptr, signature_data.len);
    if res == MBEDTLS_ERR_RSA_VERIFY_FAILED {
        // Verify failing is somewhat expected behaviour.
        // We don't print anything here.
        return false
    }
    if(res != 0) {
        log("FAIL mbedtls_pk_verify ",res);
        return false;
    }

    // Verify success!
    return true;
}

fn DownloadFile(version: char[], file: char[], out_path: char[]) -> bool {
    msg_version := 1

    msg: ByteStream
    defer msg.cleanup()
    msg.write(MSG_GET_FILE)
    msg.write<i32>(msg_version)
    msg.write_string8(version)
    msg.write_string8(file)

    data: u8[];
    msg.finalize(&data)

    session.client.send(data)

    session.net_lock.wait()

    if session.response_result != RESPONSE_SUCCESS {
        log(" server is missing ", file)
        return false
    }

    at := find("/", out_path, true)
    dir := substring(out_path, 0, at)
    DirectoryCreate(dir)

    f := FileOpen(out_path, FILE_CLEAR_AND_WRITE)
    if !f {
        log("Could not write to ", out_path)
    }
    defer FileClose(f)

    FileWrite(f, session.get_file_data.ptr, session.get_file_data.len)

    return true
}

fn UploadGameVersion(channel: char[], game_files_dir: char[]) {
    res: i32
    dev_token: char[]
    dev_token, res = ReadWholeFile("dev.token")
    if !res {
        log("Could not read dev.token")
        return
    }

    manifest_path: StringBuilder
    manifest_path.append(game_files_dir)
    manifest_path.append("/manifest.txt")
    
    signature_path: StringBuilder
    signature_path.append(game_files_dir)
    signature_path.append("/manifest.sig")

    manifest_text: char[]
    manifest_text, res = ReadWholeFile(manifest_path)
    if !res {
        log("Could not read ",manifest_path)
        return
    }
    manifest: Manifest* = Allocate(sizeof(Manifest))
    res = ParseManifestText(manifest_text, manifest)
    if !res {
        // error already printed
        return
    }

    res = UploadFile(channel, dev_token, "manifest.txt", manifest_text)
    if !res {
        // error already printed
        return
    }

    signature_text: char[]
    signature_text, res = ReadWholeFile(signature_path)
    if !res {
        log("Could not read ",signature_path)
        return
    }
    res = UploadFile(channel, dev_token, "manifest.sig", signature_text)
    if !res {
        // error already printed
        return
    }

    temp_path: StringBuilder
    defer temp_path.cleanup()
    for mf : manifest.game_files {
        temp_path.clear()
        appends(temp_path, game_files_dir, "/", mf.file)
        text: char[]
        text, res = ReadWholeFile(temp_path)
        if !res {
            log("Could not read ",temp_path)
            return
        }
        res = UploadFile(channel, dev_token, mf.file, text)
        if !res {
            // error already printed
            return
        }
    }
}
fn UploadFile(channel: char[], dev_token: char[], file: char[], file_data: char[]) -> bool {
    msg_version := 1

    if file_data.len > 0x7FFF_FFFF {
        log(LOG_RED, "ERROR: File ", file, " is ", file_data.len, " bytes which is to big for signed 32-bit integer.")
        return false
    }

    // TODO: How much data can byte stream handle?
    //   Is 2GB to much? Should we stream the file data?
    msg: ByteStream
    defer msg.cleanup()
    msg.write(MSG_UPLOAD_FILE)
    msg.write<i32>(msg_version)
    msg.write_string8(dev_token)
    msg.write_string8(channel)
    msg.write_string8(file)
    msg.write<i32>(file_data.len)
    msg.write(file_data.ptr, file_data.len)

    data: u8[];
    msg.finalize(&data)

    session.client.send(data)

    session.net_lock.wait()

    if session.response_result != RESPONSE_SUCCESS {
        log("Upload of ", file, " failed. Error from server: ", &session.response_result)
        log(" Server: ", session.server_message)
        return false
    }

    return true
}

fn handle_event(e: NetEvent*, user_data: void*) {
    if e.type != EVENT_RECEIVE
        return;

    // log(e)

    stream: ByteStream
    defer stream.cleanup()
    stream.write(e.bytes.ptr, e.bytes.len)

    head := 0
    kind: MessageType
    msg_version: i32
    stream.read(&head, &kind)
    stream.read(&head, &msg_version)
    stream.read(&head, &session.response_result)
    stream.read_string8(&head, &session.server_message)

    if msg_version != 1 {
        log(LOG_RED,"ERROR: ",LOG_NO_COLOR,"Recieved ", &kind, " version ", msg_version, " which is unsupported. (is version corrupt or installer old?)" )
        return
    }

    switch kind {
        case MSG_RESPONSE_GET_CHANNELS:
            session.channels.clear()

            if session.response_result != RESPONSE_SUCCESS {
                session.net_lock.signal()
                return
            }

            num: i32;
            stream.read<i32>(&head, &num)
            for 0..num {
                name: StringBuilder
                // builder is added to channels, we don't clean it up
                stream.read_string8(&head, &name)
                session.channels.add(name)
            }

            session.net_lock.signal()
        case MSG_RESPONSE_GET_FILE:
            version, relative_file: StringBuilder
            defer { version.cleanup() relative_file.cleanup() }

            stream.read_string8(&head, &version)
            stream.read_string8(&head, &relative_file)
            file_size: i32;
            stream.read(&head, &file_size)

            // log("File recieved: ", version, " ", relative_file, " size: ", file_size)

            if session.response_result != RESPONSE_SUCCESS {
                session.net_lock.signal()
                return
            }

            new_ptr := Reallocate(file_size, session.get_file_data.ptr, session.get_file_data.len)
            Assert(new_ptr)

            session.get_file_data.ptr = new_ptr
            session.get_file_data.len = file_size;
            
            stream.read(&head, session.get_file_data.ptr, file_size)

            session.net_lock.signal()
         case MSG_RESPONSE_UPLOAD_FILE:
            if session.response_result != RESPONSE_SUCCESS {
                // we already know it's abad
            }
            session.net_lock.signal()
        case: // dd nothing
    }
}

global public_key: char[815]; // 814+1, allocate extra byte for null terminator
#run {
    // Whenever we are dealing with slice.len we don't expect len to include null terminator.
    // We should therefore not start doing that here.
    public_key.len--

    file_size: i64
    file := FileOpen("public_key.pem", FILE_READ_ONLY, &file_size)
    defer  FileClose(file)
    Assert(public_key.len == file_size)

    FileRead(file, public_key.ptr, file_size)
    public_key.ptr[file_size] = '\0'
    // log("Inserted public key into installer, ", file_size)
}