/*
    The backend server for the installer.
*/

#import "Logger"
#import "OS"
#import "Net"
#import "Stream"

#import "./util.btb"

#macro VERSION "0.1.0"
#macro COMMIT_HASH ""

fn print_version() {
    log("Wander Content Server v",VERSION)
    if COMMIT_HASH.len != 0 {
        log("commit hash: ",COMMIT_HASH)
    }
}

struct Session {
    server: Server;
    channels_dir: StringBuilder;
    // net_lock: Semaphore; // this lock allows us to ask server for data and block until the callback is called then continue executing

    // fn init() {
    //     net_lock.init(1, 1)
    // }
}
global session: Session*;

fn main(argc: i32, argv: char**) -> i32 {
    print_version()

    text_port: StringBuilder
    text_port.append(SERVER_PORT)

    argi := 1
    while argi < argc {
        arg := Slice<char>{argv[argi], strlen(argv[argi])}
        argi++
        if arg == "-v" || arg == "--version" {
            print_version()
            return 0
        } else if arg == "-h" || arg == "--help" {
            log("The Wander Content Server lets you host channels for installers to download game files from.")
            log("")
            log("Flags:")
            log("  -v,--version   : Print version")
            log("  --port <port>  : Change server port, default is ", SERVER_PORT)
            return 0
        } else if arg == "--port" {
            if argi >= argc {
                log("Missing port after ", arg)
                return 1
            }
            text_port.clear()
            text_port.append(argv[argi])
            argi++
        } else {
            log("Unknown argument ", arg)
            return 1
        }
    }

    port: i32;
    {
        valid: bool
        head: i32;
        port = parse_i64(&head, text_port, &valid)
        if !valid {
            log(LOG_RED,"ERROR: '",text_port, "' is not a valid number.")
            return 1
        }
        if port < 0 || port > 0xFFFF {
            log(LOG_RED,"ERROR: Port ",text_port, " must be within 0 - 65535.")
            return 1
        }
    }

    session = Allocate(sizeof(Session))
    construct(session)

    session.channels_dir.append("channels")
    // Directory during development
    // session.channels_dir.append("sandbox/server/channels")

    session.server.set_callback(handle_event, null)
    res := session.server.start(port, protocol = NET_TCP | NET_PROTO_MESSAGE)

    if res != NET_SUCCESS {
        log("Could not start server on port ", port)
        return 1
    }

    log("Started server on port ", port)

    session.server.wait()

    return 0
}

fn handle_event(e: NetEvent*, user_data: void*) {
    if e.type != EVENT_RECEIVE
        return;

    // log(e)

    stream: ByteStream
    defer stream.cleanup()
    stream.write(e.bytes.ptr, e.bytes.len)

    head := 0
    kind: MessageType
    msg_version: i32;
    stream.read(&head, &kind)
    stream.read(&head, &msg_version)

    if msg_version != 1 {
        log(LOG_RED,"ERROR: Recieved ", &kind, " version ", msg_version, " which isn't supported.")
        
        msg_version := 1
        msg: ByteStream
        defer msg.cleanup()
        msg.write(MSG_RESPONSE_GET_CHANNELS) // We default to this because 
        msg.write(msg_version)
        msg.write(UNSUPPORTED_VERSION)
        mess: StringBuilder
        appends(mess, "Version ",msg_version, " on ", &kind," is not supported. Server is running v", VERSION)
        msg.write_string16(mess)

        data: u8[]
        msg.finalize(&data)

        session.server.send(data, who = e.who)
        return
    }

    // TODO: Check errors from read and writes
    switch kind {
        case MSG_GET_CHANNELS:
            msg_version := 1
            msg: ByteStream
            defer msg.cleanup()
            msg.write(MSG_RESPONSE_GET_CHANNELS)
            msg.write(msg_version)
            msg.write(RESPONSE_SUCCESS)
            msg.write_string16("")

            // TODO: List channels
            msg.write<i32>(1)
            msg.write_string16("release")

            data: u8[]
            msg.finalize(&data)

            session.server.send(data, who = e.who)
        
        case MSG_GET_FILE:
            channel, relative_file: StringBuilder
            defer { channel.cleanup() relative_file.cleanup() }

            stream.read_string16(&head, &channel)
            stream.read_string16(&head, &relative_file)
            
            msg_version := 1
            msg: ByteStream
            defer msg.cleanup()
            msg.write(MSG_RESPONSE_GET_FILE)
            msg.write(msg_version)

            path: StringBuilder
            appends(path, session.channels_dir, "/", channel, "/", relative_file)
            
            file_size: i64
            file := FileOpen(path, FILE_READ_ONLY, &file_size)
            if !file {
                log("Could not read ", path)

                msg.write(DOWNLOAD_FILE_MISSING)
                msg.write_string16("File does not exist")

                // Send back empty data, installer knows that this means failure
                msg.write<i32>(0)
                data: u8[]
                msg.finalize(&data)
                session.server.send(data, who = e.who)
                return
            }

            log("File request: ", channel, " ", relative_file, " size: ", file_size)

            msg.write(RESPONSE_SUCCESS)
            msg.write_string16("")

            msg.write_string16(channel)
            msg.write_string16(relative_file)

            valid_size := file_size < 0x7FFF_FFFF
            Assert(valid_size) // TODO: Crash in a good way
            
            msg.write<i32>(file_size)

            file_data := msg.write_late(file_size)
            FileRead(file, file_data, file_size)
            FileClose(file)

            data: u8[]
            msg.finalize(&data)

            session.server.send(data, who = e.who)
        case MSG_UPLOAD_FILE:
            msg_version := 1 // variables and data we send back
            response_result: ResponseResult = RESPONSE_SUCCESS
            server_message: StringBuilder

            dev_token, channel, relative_file: StringBuilder
            defer { dev_token.cleanup() channel.cleanup() relative_file.cleanup() }
            file_size: i32

            stream.read_string16(&head, &dev_token)
            stream.read_string16(&head, &channel)
            stream.read_string16(&head, &relative_file)

            stream.read(&head, &file_size)
            valid_size := file_size < 0x7FFF_FFFF
            if file_size < 0 || file_size > 0x7FFF_FFFF {
                log(LOG_RED, "ERROR: Recieved ",channel,"@", relative_file, " with ", file_size,". Size should be 0 - 2GB.")

                response_result = UPLOAD_CORRUPTED_MESSAGE
                appends(server_message, "Recieved ",channel,"@", relative_file, " with ", file_size,". Size should be 0 - 2GB.")
            }
            // we don't read file data into temporary buffer
            // we write to file directly from byte stream

            expected_dev_token: char[]
            if response_result == RESPONSE_SUCCESS {
                res: i32;
                expected_dev_token, res = ReadWholeFile("dev.token")
                if !res {
                    log(LOG_RED,"ERROR: ",LOG_NO_COLOR, "Server does not have dev.token which is required for uploading.")
                    log(" ours: ", expected_dev_token)
                    log(" theirs: ", dev_token)
                    response_result = UPLOAD_AUTH_FAILED
                    server_message.append("Server is missing dev token. (server is messed up)")
                } else if dev_token != expected_dev_token {
                    log(LOG_YELLOW,"WARNING: ",LOG_NO_COLOR,"Auth failed. Someone tried to upload ",channel,"@",relative_file, " with ",file_size, " bytes")
                    log(" ours: ", expected_dev_token)
                    log(" theirs: ", dev_token)
                    response_result = UPLOAD_AUTH_FAILED
                    server_message.append("Authentication failed. 'dev.token' does not match the server's.")
                }
            }
            path: StringBuilder
            defer path.cleanup()
            if response_result == RESPONSE_SUCCESS {
                path.append(session.channels_dir)
                path.append("/")
                path.append(channel)
                path.append("/")
                path.append(relative_file)

                // TODO: Sanitize path

                at_slash := find("/", path, reverse = true)
                if at_slash == -1 {
                    at_slash = 0
                }

                yes := DirectoryCreate(substring(path, 0, at_slash))
                if !yes {
                    log("Could not create directory ", path)
                    response_result = UPLOAD_FILE_ERROR
                    appends(server_message, "Could not create directory ", path)
                } else {
                    file := FileOpen(path, FILE_CLEAR_AND_WRITE)
                    defer FileClose(file)

                    yes, file_data := stream.try_get_all_data()
                    file_data.ptr += head
                    Assert(yes)
                    // TODO: Check file error
                    FileWrite(file, file_data.ptr, file_data.len - head)
                }
            }

            if response_result == RESPONSE_SUCCESS {
                log("Uploaded ", channel,"@",relative_file, " ",file_size, " bytes")
                log("  ",path)
            }

            msg: ByteStream
            defer msg.cleanup()
            msg.write(MSG_RESPONSE_UPLOAD_FILE)
            msg.write(msg_version)
            msg.write(response_result)
            msg.write_string16(server_message)

            data: u8[]
            msg.finalize(&data)

            session.server.send(data, who = e.who)
        case: // dd nothing
    }
}

fn test_token_bucket() {
    log("test token bucket")

    frame := 0

#import "Math"

    limiter: ByteLimiter;
    limiter.init(25, 10)
    

    while frame < 35 {
        log("FRAME ", frame)
        
        val: f32 = (2.5+sin(frame/2.0))
        log("  val ", val)
        if val >= 1 {
            bytes: i64 = val
            yes := limiter.try_consume_bytes(bytes)
            if yes {
                log("  consume ", bytes, ", bucket at ", limiter.m_free_bytes, ", delta ", limiter.delta_seconds)
            } else {
                log("  CANNOT consume ", bytes, ", bucket at ", limiter.m_free_bytes, ", delta ", limiter.delta_seconds)
            }
        }

        frame++
        ProcessSleep(random_f32()/5)
    }
}

// Based on Token Bucket concept
struct ByteLimiter {
    m_free_bytes: i64; // bytes
    m_capacity: i64;
    m_last_time: i64;
    m_bytes_per_second: i64;
    delta_seconds: f32;

    fn init(capacity: i64, bytes_per_second: i64) {
        m_free_bytes = capacity
        m_capacity = capacity
        m_bytes_per_second = bytes_per_second
    }

    fn try_consume_bytes(bytes: i64) -> bool {
        now: i64 = StartMeasure()
        delta_seconds = DiffMeasure(now - m_last_time)
        m_last_time = now

        new_bytes: i64 = cast<i64>(m_bytes_per_second * delta_seconds)
        log("    new_bytes ",new_bytes)
        m_free_bytes += new_bytes
        if m_free_bytes > m_capacity
            m_free_bytes = m_capacity
        
        if m_free_bytes < bytes
            return false
        m_free_bytes -= bytes
        return true
    }
}